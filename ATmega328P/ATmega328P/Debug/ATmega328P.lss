
ATmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00001d96  00001e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800136  00800136  00001e60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000500a  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b0  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001403  00000000  00000000  00008242  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  00009648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce5  00000000  00000000  00009c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025b3  00000000  00000000  0000a939  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000ceec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__ctors_end>
       4:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
       8:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
       c:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      10:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      14:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      18:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      1c:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_7>
      20:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      24:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      28:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      2c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_11>
      30:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      34:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      38:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      3c:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      40:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      44:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      48:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      4c:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      50:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      54:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      58:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      5c:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      60:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>
      64:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 30       	cpi	r16, 0x00	; 0
      6a:	00 00       	nop
      6c:	10 00       	.word	0x0010	; ????
	...
      76:	00 00       	nop
      78:	00 78       	andi	r16, 0x80	; 128
      7a:	6c 28       	or	r6, r12
      7c:	3c 66       	ori	r19, 0x6C	; 108
      7e:	20 30       	cpi	r18, 0x00	; 0
      80:	18 30       	cpi	r17, 0x08	; 8
      82:	54 18       	sub	r5, r4
      84:	00 00       	nop
      86:	00 06       	cpc	r0, r16
      88:	00 78       	andi	r16, 0x80	; 128
      8a:	24 7c       	andi	r18, 0xC4	; 196
      8c:	60 0c       	add	r6, r0
      8e:	50 10       	cpse	r5, r0
      90:	30 18       	sub	r3, r0
      92:	38 18       	sub	r3, r8
      94:	00 00       	nop
      96:	00 0c       	add	r0, r0
      98:	00 78       	andi	r16, 0x80	; 128
      9a:	00 28       	or	r0, r0
      9c:	38 18       	sub	r3, r8
      9e:	34 00       	.word	0x0034	; ????
      a0:	30 18       	sub	r3, r0
      a2:	10 7e       	andi	r17, 0xE0	; 224
      a4:	00 7e       	andi	r16, 0xE0	; 224
      a6:	00 18       	sub	r0, r0
      a8:	00 30       	cpi	r16, 0x00	; 0
      aa:	00 7c       	andi	r16, 0xC0	; 192
      ac:	0c 30       	cpi	r16, 0x0C	; 12
      ae:	48 00       	.word	0x0048	; ????
      b0:	30 18       	sub	r3, r0
      b2:	38 18       	sub	r3, r8
      b4:	00 00       	nop
      b6:	00 30       	cpi	r16, 0x00	; 0
      b8:	00 00       	nop
      ba:	00 28       	or	r0, r0
      bc:	78 66       	ori	r23, 0x68	; 104
      be:	34 00       	.word	0x0034	; ????
      c0:	18 30       	cpi	r17, 0x08	; 8
      c2:	54 18       	sub	r5, r4
      c4:	00 00       	nop
      c6:	00 60       	ori	r16, 0x00	; 0
      c8:	00 30       	cpi	r16, 0x00	; 0
      ca:	00 00       	nop
      cc:	10 00       	.word	0x0010	; ????
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	30 00       	.word	0x0030	; ????
      d6:	30 00       	.word	0x0030	; ????
	...
      e4:	10 00       	.word	0x0010	; ????
      e6:	00 00       	nop
      e8:	38 18       	sub	r3, r8
      ea:	fc fc       	.word	0xfcfc	; ????
      ec:	06 fe       	sbrs	r0, 6
      ee:	7c fe       	.word	0xfe7c	; ????
      f0:	7c 7c       	andi	r23, 0xCC	; 204
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	00 7c       	andi	r16, 0xC0	; 192
      f8:	4c 38       	cpi	r20, 0x8C	; 140
      fa:	06 06       	cpc	r0, r22
      fc:	c6 c0       	rjmp	.+396    	; 0x28a <__trampolines_end+0x222>
      fe:	c0 06       	cpc	r12, r16
     100:	c6 c6       	rjmp	.+3468   	; 0xe8e <_ZN4Font11printLetterEiih+0x88>
     102:	00 00       	nop
     104:	18 00       	.word	0x0018	; ????
     106:	30 c6       	rjmp	.+3168   	; 0xd68 <main+0x32>
     108:	c6 18       	sub	r12, r6
     10a:	06 3c       	cpi	r16, 0xC6	; 198
     10c:	c6 fc       	sbrc	r12, 6
     10e:	fc 06       	cpc	r15, r28
     110:	7c c6       	rjmp	.+3320   	; 0xe0a <_ZN4Font11printLetterEiih+0x4>
     112:	30 30       	cpi	r19, 0x00	; 0
     114:	30 7c       	andi	r19, 0xC0	; 192
     116:	18 06       	cpc	r1, r24
     118:	c6 18       	sub	r12, r6
     11a:	7c 06       	cpc	r7, r28
     11c:	c6 06       	cpc	r12, r22
     11e:	c6 0c       	add	r12, r6
     120:	c6 c6       	rjmp	.+3468   	; 0xeae <_ZN4Font11printLetterEiih+0xa8>
     122:	00 00       	nop
     124:	60 00       	.word	0x0060	; ????
     126:	0c 06       	cpc	r0, r28
     128:	c6 18       	sub	r12, r6
     12a:	c0 06       	cpc	r12, r16
     12c:	c6 06       	cpc	r12, r22
     12e:	c6 18       	sub	r12, r6
     130:	c6 7e       	andi	r28, 0xE6	; 230
     132:	00 00       	nop
     134:	30 7c       	andi	r19, 0xC0	; 192
     136:	18 3c       	cpi	r17, 0xC8	; 200
     138:	64 18       	sub	r6, r4
     13a:	c0 06       	cpc	r12, r16
     13c:	fe 06       	cpc	r15, r30
     13e:	c6 30       	cpi	r28, 0x06	; 6
     140:	c6 06       	cpc	r12, r22
     142:	30 30       	cpi	r19, 0x00	; 0
     144:	18 00       	.word	0x0018	; ????
     146:	30 00       	.word	0x0030	; ????
     148:	38 3c       	cpi	r19, 0xC8	; 200
     14a:	fe fc       	.word	0xfcfe	; ????
     14c:	06 fc       	sbrc	r0, 6
     14e:	7c 30       	cpi	r23, 0x0C	; 12
     150:	7c 7c       	andi	r23, 0xCC	; 204
     152:	00 10       	cpse	r0, r0
     154:	00 00       	nop
     156:	00 30       	cpi	r16, 0x00	; 0
	...
     168:	7c 7c       	andi	r23, 0xCC	; 204
     16a:	fc 7e       	andi	r31, 0xEC	; 236
     16c:	fc fe       	.word	0xfefc	; ????
     16e:	fe 7c       	andi	r31, 0xCE	; 206
     170:	c6 3c       	cpi	r28, 0xC6	; 198
     172:	1e c6       	rjmp	.+3132   	; 0xdb0 <__vector_7+0xa>
     174:	c0 c6       	rjmp	.+3456   	; 0xef6 <_ZN4Font11printLetterEiih+0xf0>
     176:	c6 7c       	andi	r28, 0xC6	; 198
     178:	c6 c6       	rjmp	.+3468   	; 0xf06 <_ZN4Font5printEiiPKc+0xe>
     17a:	c6 c0       	rjmp	.+396    	; 0x308 <__trampolines_end+0x2a0>
     17c:	c6 c0       	rjmp	.+396    	; 0x30a <__trampolines_end+0x2a2>
     17e:	c0 c6       	rjmp	.+3456   	; 0xf00 <_ZN4Font5printEiiPKc+0x8>
     180:	c6 18       	sub	r12, r6
     182:	06 c6       	rjmp	.+3084   	; 0xd90 <__vector_11+0x18>
     184:	c0 ee       	ldi	r28, 0xE0	; 224
     186:	e6 c6       	rjmp	.+3532   	; 0xf54 <_ZN4Font5printEiim+0x10>
     188:	c6 c6       	rjmp	.+3468   	; 0xf16 <_ZN4Font5printEiiPKc+0x1e>
     18a:	c6 c0       	rjmp	.+396    	; 0x318 <__trampolines_end+0x2b0>
     18c:	c6 c0       	rjmp	.+396    	; 0x31a <__trampolines_end+0x2b2>
     18e:	c0 c0       	rjmp	.+384    	; 0x310 <__trampolines_end+0x2a8>
     190:	c6 18       	sub	r12, r6
     192:	06 cc       	rjmp	.-2036   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
     194:	c0 fe       	sbrs	r12, 0
     196:	f6 c6       	rjmp	.+3564   	; 0xf84 <_ZN4Font5printEiim+0x40>
     198:	d6 c6       	rjmp	.+3500   	; 0xf46 <_ZN4Font5printEiim+0x2>
     19a:	fc c0       	rjmp	.+504    	; 0x394 <_ZL9logoAtmel+0x2c>
     19c:	c6 f8       	bld	r12, 6
     19e:	fc de       	rcall	.-520    	; 0xffffff98 <__eeprom_end+0xff7eff98>
     1a0:	fe 18       	sub	r15, r14
     1a2:	06 f8       	bld	r0, 6
     1a4:	c0 d6       	rcall	.+3456   	; 0xf26 <_ZN4Font5printEiiPKc+0x2e>
     1a6:	de c6       	rjmp	.+3516   	; 0xf64 <_ZN4Font5printEiim+0x20>
     1a8:	dc fe       	.word	0xfedc	; ????
     1aa:	c6 c0       	rjmp	.+396    	; 0x338 <__trampolines_end+0x2d0>
     1ac:	c6 c0       	rjmp	.+396    	; 0x33a <__trampolines_end+0x2d2>
     1ae:	c0 c6       	rjmp	.+3456   	; 0xf30 <_ZN4Font5printEiiPKc+0x38>
     1b0:	c6 18       	sub	r12, r6
     1b2:	06 cc       	rjmp	.-2036   	; 0xfffff9c0 <__eeprom_end+0xff7ef9c0>
     1b4:	c0 c6       	rjmp	.+3456   	; 0xf36 <_ZN4Font5printEiiPKc+0x3e>
     1b6:	ce c6       	rjmp	.+3484   	; 0xf54 <_ZN4Font5printEiim+0x10>
     1b8:	c0 c6       	rjmp	.+3456   	; 0xf3a <_ZN4Font5printEiiPKc+0x42>
     1ba:	c6 c0       	rjmp	.+396    	; 0x348 <__trampolines_end+0x2e0>
     1bc:	c6 c0       	rjmp	.+396    	; 0x34a <__trampolines_end+0x2e2>
     1be:	c0 c6       	rjmp	.+3456   	; 0xf40 <_ZN4Font5printEiiPKc+0x48>
     1c0:	c6 18       	sub	r12, r6
     1c2:	c6 c6       	rjmp	.+3468   	; 0xf50 <_ZN4Font5printEiim+0xc>
     1c4:	c0 c6       	rjmp	.+3456   	; 0xf46 <_ZN4Font5printEiim+0x2>
     1c6:	c6 c6       	rjmp	.+3468   	; 0xf54 <_ZN4Font5printEiim+0x10>
     1c8:	7c c6       	rjmp	.+3320   	; 0xec2 <_ZN4Font11printLetterEiih+0xbc>
     1ca:	fc 7e       	andi	r31, 0xEC	; 236
     1cc:	fc fe       	.word	0xfefc	; ????
     1ce:	c0 7e       	andi	r28, 0xE0	; 224
     1d0:	c6 3c       	cpi	r28, 0xC6	; 198
     1d2:	7c c6       	rjmp	.+3320   	; 0xecc <_ZN4Font11printLetterEiih+0xc6>
     1d4:	fe c6       	rjmp	.+3580   	; 0xfd2 <_ZN4Font5printEiim+0x8e>
     1d6:	c6 7c       	andi	r28, 0xC6	; 198
	...
     1e8:	fc 7c       	andi	r31, 0xCC	; 204
     1ea:	fc 7e       	andi	r31, 0xEC	; 236
     1ec:	7e c6       	rjmp	.+3324   	; 0xeea <_ZN4Font11printLetterEiih+0xe4>
     1ee:	c6 c6       	rjmp	.+3468   	; 0xf7c <_ZN4Font5printEiim+0x38>
     1f0:	c6 66       	ori	r28, 0x66	; 102
     1f2:	fe 00       	.word	0x00fe	; ????
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	c6 c6       	rjmp	.+3468   	; 0xf86 <_ZN4Font5printEiim+0x42>
     1fa:	c6 c0       	rjmp	.+396    	; 0x388 <_ZL9logoAtmel+0x20>
     1fc:	18 c6       	rjmp	.+3120   	; 0xe2e <_ZN4Font11printLetterEiih+0x28>
     1fe:	c6 c6       	rjmp	.+3468   	; 0xf8c <_ZN4Font5printEiim+0x48>
     200:	c6 66       	ori	r28, 0x66	; 102
     202:	06 38       	cpi	r16, 0x86	; 134
     204:	60 38       	cpi	r22, 0x80	; 128
     206:	10 00       	.word	0x0010	; ????
     208:	c6 c6       	rjmp	.+3468   	; 0xf96 <_ZN4Font5printEiim+0x52>
     20a:	c6 c0       	rjmp	.+396    	; 0x398 <_ZL9logoAtmel+0x30>
     20c:	18 c6       	rjmp	.+3120   	; 0xe3e <_ZN4Font11printLetterEiih+0x38>
     20e:	c6 c6       	rjmp	.+3468   	; 0xf9c <_ZN4Font5printEiim+0x58>
     210:	6c 66       	ori	r22, 0x6C	; 108
     212:	0c 30       	cpi	r16, 0x0C	; 12
     214:	30 18       	sub	r3, r0
     216:	38 00       	.word	0x0038	; ????
     218:	c6 c6       	rjmp	.+3468   	; 0xfa6 <_ZN4Font5printEiim+0x62>
     21a:	c6 7c       	andi	r28, 0xC6	; 198
     21c:	18 c6       	rjmp	.+3120   	; 0xe4e <_ZN4Font11printLetterEiih+0x48>
     21e:	c6 d6       	rcall	.+3468   	; 0xfac <_ZN4Font5printEiim+0x68>
     220:	38 3c       	cpi	r19, 0xC8	; 200
     222:	38 30       	cpi	r19, 0x08	; 8
     224:	18 18       	sub	r1, r8
     226:	6c 00       	.word	0x006c	; ????
     228:	fc de       	rcall	.-520    	; 0x22 <__FUSE_REGION_LENGTH__+0x1f>
     22a:	fc 06       	cpc	r15, r28
     22c:	18 c6       	rjmp	.+3120   	; 0xe5e <_ZN4Font11printLetterEiih+0x58>
     22e:	6c fe       	.word	0xfe6c	; ????
     230:	6c 18       	sub	r6, r12
     232:	60 30       	cpi	r22, 0x00	; 0
     234:	0c 18       	sub	r0, r12
     236:	44 00       	.word	0x0044	; ????
     238:	c0 cc       	rjmp	.-1664   	; 0xfffffbba <__eeprom_end+0xff7efbba>
     23a:	c6 06       	cpc	r12, r22
     23c:	18 c6       	rjmp	.+3120   	; 0xe6e <_ZN4Font11printLetterEiih+0x68>
     23e:	38 ee       	ldi	r19, 0xE8	; 232
     240:	c6 18       	sub	r12, r6
     242:	c0 38       	cpi	r28, 0x80	; 128
     244:	06 38       	cpi	r16, 0x86	; 134
     246:	00 00       	nop
     248:	c0 76       	andi	r28, 0x60	; 96
     24a:	c6 fc       	sbrc	r12, 6
     24c:	18 7c       	andi	r17, 0xC8	; 200
     24e:	10 c6       	rjmp	.+3104   	; 0xe70 <_ZN4Font11printLetterEiih+0x6a>
     250:	c6 18       	sub	r12, r6
     252:	fe 00       	.word	0x00fe	; ????
     254:	00 00       	nop
     256:	00 fe       	sbrs	r0, 0
	...
     268:	00 00       	nop
     26a:	c0 00       	.word	0x00c0	; ????
     26c:	06 00       	.word	0x0006	; ????
     26e:	3e 00       	.word	0x003e	; ????
     270:	c0 18       	sub	r12, r0
     272:	0c c0       	rjmp	.+24     	; 0x28c <__trampolines_end+0x224>
     274:	38 00       	.word	0x0038	; ????
     276:	00 00       	nop
     278:	60 7c       	andi	r22, 0xC0	; 192
     27a:	fc 7e       	andi	r31, 0xEC	; 236
     27c:	7e 7c       	andi	r23, 0xCE	; 206
     27e:	60 7e       	andi	r22, 0xE0	; 224
     280:	c0 00       	.word	0x00c0	; ????
     282:	00 c6       	rjmp	.+3072   	; 0xe84 <_ZN4Font11printLetterEiih+0x7e>
     284:	18 fc       	.word	0xfc18	; ????
     286:	fc 7c       	andi	r31, 0xCC	; 204
     288:	20 06       	cpc	r2, r16
     28a:	c6 c0       	rjmp	.+396    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     28c:	c6 c6       	rjmp	.+3468   	; 0x101a <_ZN4Font5printEiim+0xd6>
     28e:	60 c6       	rjmp	.+3264   	; 0xf50 <_ZN4Font5printEiim+0xc>
     290:	fc 38       	cpi	r31, 0x8C	; 140
     292:	1c cc       	rjmp	.-1992   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     294:	18 d6       	rcall	.+3120   	; 0xec6 <_ZN4Font11printLetterEiih+0xc0>
     296:	c6 c6       	rjmp	.+3468   	; 0x1024 <_ZN4Font5printEiim+0xe0>
     298:	00 7e       	andi	r16, 0xE0	; 224
     29a:	c6 c0       	rjmp	.+396    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     29c:	c6 c6       	rjmp	.+3468   	; 0x102a <_ZN4Font5printEiim+0xe6>
     29e:	fc c6       	rjmp	.+3576   	; 0x1098 <_ZN5Frame6updateEv+0x6>
     2a0:	c6 18       	sub	r12, r6
     2a2:	0c f8       	.word	0xf80c	; ????
     2a4:	18 d6       	rcall	.+3120   	; 0xed6 <_ZN4Font11printLetterEiih+0xd0>
     2a6:	c6 c6       	rjmp	.+3468   	; 0x1034 <_ZN4Font5printEiim+0xf0>
     2a8:	00 c6       	rjmp	.+3072   	; 0xeaa <_ZN4Font11printLetterEiih+0xa4>
     2aa:	c6 c0       	rjmp	.+396    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     2ac:	c6 fc       	sbrc	r12, 6
     2ae:	60 c6       	rjmp	.+3264   	; 0xf70 <_ZN4Font5printEiim+0x2c>
     2b0:	c6 18       	sub	r12, r6
     2b2:	0c cc       	rjmp	.-2024   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     2b4:	18 d6       	rcall	.+3120   	; 0xee6 <_ZN4Font11printLetterEiih+0xe0>
     2b6:	c6 c6       	rjmp	.+3468   	; 0x1044 <_ZN4Font5printEiim+0x100>
     2b8:	00 c6       	rjmp	.+3072   	; 0xeba <_ZN4Font11printLetterEiih+0xb4>
     2ba:	c6 c0       	rjmp	.+396    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     2bc:	c6 c0       	rjmp	.+396    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     2be:	60 7e       	andi	r22, 0xE0	; 224
     2c0:	c6 18       	sub	r12, r6
     2c2:	0c c6       	rjmp	.+3096   	; 0xedc <_ZN4Font11printLetterEiih+0xd6>
     2c4:	18 d6       	rcall	.+3120   	; 0xef6 <_ZN4Font11printLetterEiih+0xf0>
     2c6:	c6 c6       	rjmp	.+3468   	; 0x1054 <_ZN4Font5printEiim+0x110>
     2c8:	00 7e       	andi	r16, 0xE0	; 224
     2ca:	fc 7e       	andi	r31, 0xEC	; 236
     2cc:	7e 7c       	andi	r23, 0xCE	; 206
     2ce:	60 06       	cpc	r6, r16
     2d0:	c6 18       	sub	r12, r6
     2d2:	0c c6       	rjmp	.+3096   	; 0xeec <_ZN4Font11printLetterEiih+0xe6>
     2d4:	18 d6       	rcall	.+3120   	; 0xf06 <_ZN4Font5printEiiPKc+0xe>
     2d6:	c6 7c       	andi	r28, 0xC6	; 198
     2d8:	00 00       	nop
     2da:	00 00       	nop
     2dc:	00 00       	nop
     2de:	00 7c       	andi	r16, 0xC0	; 192
     2e0:	00 00       	nop
     2e2:	78 00       	.word	0x0078	; ????
	...
     2ec:	18 00       	.word	0x0018	; ????
	...
     2f6:	00 00       	nop
     2f8:	fc 7e       	andi	r31, 0xEC	; 236
     2fa:	fc 7c       	andi	r31, 0xCC	; 204
     2fc:	18 c6       	rjmp	.+3120   	; 0xf2e <_ZN4Font5printEiiPKc+0x36>
     2fe:	c6 d6       	rcall	.+3468   	; 0x108c <_ZN4Font5printEiim+0x148>
     300:	c6 c6       	rjmp	.+3468   	; 0x108e <_ZN4Font5printEiim+0x14a>
     302:	fe 38       	cpi	r31, 0x8E	; 142
     304:	10 38       	cpi	r17, 0x80	; 128
     306:	00 00       	nop
     308:	c6 c6       	rjmp	.+3468   	; 0x1096 <_ZN5Frame6updateEv+0x4>
     30a:	c6 c0       	rjmp	.+396    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     30c:	7e c6       	rjmp	.+3324   	; 0x100a <_ZN4Font5printEiim+0xc6>
     30e:	c6 d6       	rcall	.+3468   	; 0x109c <_ZN5Frame6updateEv+0xa>
     310:	6c c6       	rjmp	.+3288   	; 0xfea <_ZN4Font5printEiim+0xa6>
     312:	0c 30       	cpi	r16, 0x0C	; 12
     314:	10 18       	sub	r1, r0
     316:	30 00       	.word	0x0030	; ????
     318:	c6 c6       	rjmp	.+3468   	; 0x10a6 <_ZN5Frame6updateEv+0x14>
     31a:	c0 7c       	andi	r28, 0xC0	; 192
     31c:	18 c6       	rjmp	.+3120   	; 0xf4e <_ZN4Font5printEiim+0xa>
     31e:	c6 d6       	rcall	.+3468   	; 0x10ac <_ZN5Frame6updateEv+0x1a>
     320:	38 c6       	rjmp	.+3184   	; 0xf92 <_ZN4Font5printEiim+0x4e>
     322:	38 60       	ori	r19, 0x08	; 8
     324:	10 0c       	add	r1, r0
     326:	5a 00       	.word	0x005a	; ????
     328:	c6 c6       	rjmp	.+3468   	; 0x10b6 <_ZN5Frame6updateEv+0x24>
     32a:	c0 06       	cpc	r12, r16
     32c:	18 c6       	rjmp	.+3120   	; 0xf5e <_ZN4Font5printEiim+0x1a>
     32e:	6c d6       	rcall	.+3288   	; 0x1008 <_ZN4Font5printEiim+0xc4>
     330:	6c c6       	rjmp	.+3288   	; 0x100a <_ZN4Font5printEiim+0xc6>
     332:	60 30       	cpi	r22, 0x00	; 0
     334:	10 18       	sub	r1, r0
     336:	0c 00       	.word	0x000c	; ????
     338:	c6 c6       	rjmp	.+3468   	; 0x10c6 <_ZN5Frame6updateEv+0x34>
     33a:	c0 06       	cpc	r12, r16
     33c:	18 c6       	rjmp	.+3120   	; 0xf6e <_ZN4Font5printEiim+0x2a>
     33e:	38 d6       	rcall	.+3184   	; 0xfb0 <_ZN4Font5printEiim+0x6c>
     340:	c6 7e       	andi	r28, 0xE6	; 230
     342:	c0 38       	cpi	r28, 0x80	; 128
     344:	10 38       	cpi	r17, 0x80	; 128
     346:	00 00       	nop
     348:	fc 7e       	andi	r31, 0xEC	; 236
     34a:	c0 7c       	andi	r28, 0xC0	; 192
     34c:	18 7e       	andi	r17, 0xE8	; 232
     34e:	10 7e       	andi	r17, 0xE0	; 224
     350:	c6 06       	cpc	r12, r22
     352:	fe 00       	.word	0x00fe	; ????
     354:	00 00       	nop
     356:	00 00       	nop
     358:	c0 06       	cpc	r12, r16
     35a:	00 00       	nop
     35c:	00 00       	nop
     35e:	00 00       	nop
     360:	00 7c       	andi	r16, 0xC0	; 192
     362:	00 00       	nop
     364:	00 00       	nop
	...

00000368 <_ZL9logoAtmel>:
     368:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     378:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     388:	ff ff ff ff ff ff ff ff ff ff d5 5f f5 7f ff ff     ..........._....
     398:	ff ff ff ff ff ff ff ff ff ff d5 ff 7f ff ff ff     ................
     3a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3b8:	d5 5f f5 7f ff ff ff ff ff ff ff ff ff ff ff ff     ._..............
     3c8:	d5 fd ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3d8:	ff ff ff ff ff ff 55 5f f5 7f ff ff ff ff ff ff     ......U_........
     3e8:	ff ff ff ff ff ff d5 ff ff ff ff ff ff ff ff ff     ................
     3f8:	ff ff ff ff ff ff ff ff ff ff ff fd 55 5f f5 7f     ............U_..
     408:	ff ff ff ff ff ff ff ff ff ff ff ff d5 ff ff ff     ................
     418:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     428:	ff f5 5d 5f f5 7f ff ff ff ff ff ff ff ff ff ff     ..]_............
     438:	ff ff d5 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     448:	ff ff ff ff ff ff ff d5 7d 5f f5 5f ff ff f5 7f     ........}_._....
     458:	ff d5 ff ff ff d5 5f ff d5 ff ff ff ff ff ff ff     ......_.........
     468:	ff ff ff ff ff ff ff ff ff ff ff ff ff 55 fd 5f     .............U._
     478:	55 55 5f ff 55 57 f5 55 5f ff f5 55 55 ff d5 ff     UU_.UW.U_..UU...
     488:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     498:	ff ff ff 57 fd 5f 55 55 5f fd 55 55 55 55 57 ff     ...W._UU_.UUUUW.
     4a8:	d5 55 55 7f d5 ff ff ff ff ff ff ff ff ff ff ff     .UU.............
     4b8:	ff ff ff ff ff ff ff ff fd 57 fd 5f 55 55 5f f5     .........W._UU_.
     4c8:	55 55 55 55 55 ff 55 5f d5 5f d5 ff ff ff ff ff     UUUUU.U_._......
     4d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff f5 5f     ..............._
     4e8:	fd 5f f5 7f ff d5 5f f5 55 ff 55 ff 55 ff f5 5f     ._...._.U.U.U.._
     4f8:	d5 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     508:	ff ff ff ff d5 7f fd 5f f5 7f ff d5 7f fd 57 ff     ......._......W.
     518:	d5 fd 57 ff fd 57 d5 ff ff ff ff ff ff ff ff ff     ..W..W..........
     528:	ff ff ff ff ff ff ff ff ff ff 55 ff fd 5f f5 7f     ..........U.._..
     538:	ff d5 ff fd 5f ff d5 7d 57 ff fd 57 d5 ff ff ff     ...._..}W..W....
     548:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fd     ................
     558:	55 55 fd 5f f5 7f ff d5 ff fd 5f ff d5 7d 55 55     UU._......_..}UU
     568:	55 57 d5 ff ff ff ff ff ff ff ff ff ff ff ff ff     UW..............
     578:	ff ff ff ff ff f5 55 55 fd 5f f5 7f ff d5 ff fd     ......UU._......
     588:	5f ff d5 7d 55 55 55 57 d5 ff ff ff ff ff ff ff     _..}UUUW........
     598:	ff ff ff ff ff ff ff ff ff ff ff f5 55 57 fd 5f     ............UW._
     5a8:	f5 7f ff d5 ff fd 5f ff d5 7d 55 55 55 57 d5 ff     ......_..}UUUW..
     5b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5c8:	ff d5 7f ff fd 5f f5 7f ff d5 ff fd 5f ff d5 7d     ....._......_..}
     5d8:	5f ff ff ff d5 7f ff ff ff ff ff ff ff ff ff ff     _...............
     5e8:	ff ff ff ff ff ff ff 55 ff ff fd 5f f5 5f ff d5     .......U..._._..
     5f8:	ff fd 5f ff d5 7d 57 ff ff ff d5 7f ff ff ff ff     .._..}W.........
     608:	ff ff ff ff ff ff ff ff ff ff ff ff fd 57 ff ff     .............W..
     618:	fd 5f fd 57 ff d5 ff fd 5f ff d5 7f 55 ff fd 5f     ._.W...._...U.._
     628:	f5 5f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ._..............
     638:	ff ff f5 5f ff ff fd 5f fd 55 5f d5 ff fd 5f ff     ..._..._.U_..._.
     648:	d5 7f 55 7f d5 5f f5 55 7f ff ff ff ff ff ff ff     ..U.._.U........
     658:	ff ff ff ff ff ff ff ff d5 7f ff ff fd 5f ff 55     ............._.U
     668:	5f d5 ff fd 5f ff d5 7f d5 55 55 7f fd 55 7f ff     _..._....UU..U..
     678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 55 ff     ..............U.
     688:	ff ff fd 5f ff d5 5f d5 ff fd 5f ff d5 7f f5 55     ..._.._..._....U
     698:	55 ff ff 55 7f ff ff ff ff ff ff ff ff ff ff ff     U..U............
     6a8:	ff ff ff ff 57 ff ff ff ff ff ff ff ff ff ff ff     ....W...........
     6b8:	ff ff ff ff ff d5 5f ff ff ff ff ff ff ff ff ff     ......_.........
     6c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6d8:	ff ff fe aa aa bf ff ff ff ff ff ff ff ff ff ff     ................
     6e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6f8:	ff ff ff ff ff ff ff ff ea aa aa af af ff ff ff     ................
     708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff aa aa     ................
     728:	aa ab ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     738:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     748:	ff ff ff fe aa aa aa aa ff ff ff ff ff ff ff ff     ................
     758:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     768:	ff ff ff ff ff ff ff ff ff fa aa aa aa aa ff ff     ................
     778:	ff 0f ff f0 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     788:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ea     ................
     798:	ab ea aa fa bf ff fc 03 ff c0 3f ff ff ff ff ff     ..........?.....
     7a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7b8:	ff ff ff ff ff aa af fa ab fe bf ff fc 03 ff c0     ................
     7c8:	3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
     7d8:	ff ff ff ff ff ff ff ff ff ff ff aa bf fa af fe     ................
     7e8:	af ff fc 03 ff c0 3f ff ff ff ff ff ff ff ff ff     ......?.........
     7f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     808:	fe aa ff fe af ff ab ff fc 00 ff 00 3f 0f c0 00     ............?...
     818:	3f 00 00 ff 00 00 ff 00 00 3c 3f f0 f0 fc 00 03     ?........<?.....
     828:	ff ff ff ff ff ff fe aa bf fe af ff eb ff f0 00     ................
     838:	ff 00 3f 0f 00 00 0f 00 00 3f 00 00 fc 00 00 3c     ..?......?.....<
     848:	3f f0 f0 f0 00 00 ff ff ff ff ff ff fe aa bf ff     ?...............
     858:	ab ff ea ff f0 00 3c 00 3f 0f 00 00 0f 00 00 3c     ......<.?......<
     868:	00 00 3c 00 00 3c 3f f0 f0 f0 00 00 ff ff ff ff     ..<..<?.........
     878:	ff ff fe af af ff eb ff fa bf f0 30 3c 0c 0f 0f     ...........0<...
     888:	03 ff ff 0f fc 3c 0f f0 3c 0f ff fc 3f f0 f0 f0     .....<..<...?...
     898:	3f f0 ff ff ff ff ff ff fe af ab ff ea ff fe bf     ?...............
     8a8:	f0 30 3c 0c 0f 0f 0f ff ff 0f fc 3c 3f fc 3c 3f     .0<........<?.<?
     8b8:	ff fc 00 00 f0 f0 3f f0 ff ff ff ff ff ff fe bf     ......?.........
     8c8:	eb ff fa ff fe af f0 3c 00 3c 0f 0f 0f ff ff 0f     .......<.<......
     8d8:	fc 3c 3f fc 3c 3f ff fc 00 00 f0 f0 3f f0 ff ff     .<?.<?......?...
     8e8:	ff ff ff ff fe ff fa ff fe bf ff af f0 3c 00 3c     .............<.<
     8f8:	0f 0f 0f ff ff 00 00 3c 3f fc 3c 3f ff fc 00 00     .......<?.<?....
     908:	f0 f0 00 00 ff ff ff ff ff ff ff ff fa ff fe af     ................
     918:	ff ef f0 3c 00 3c 0f 0f 0f ff ff 00 00 3c 3f fc     ...<.<.......<?.
     928:	3c 3f ff fc 3f f0 f0 f0 00 03 ff ff ff ff ff ff     <?..?...........
     938:	ff ff fa bf ff af ff ff f0 3f 00 fc 0f 0f 03 ff     .........?......
     948:	ff 0f fc 3c 0f f0 3c 0f ff fc 3f f0 f0 f0 3f ff     ...<..<...?...?.
     958:	ff ff ff ff ff ff ff ff ea af fe ab ff ff f0 3f     ...............?
     968:	00 fc 0f 0f 00 00 0f 0f fc 3c 00 00 3c 00 00 3c     .........<..<..<
     978:	3f f0 f0 f0 3f ff ff ff ff ff ff ff ff ff aa af     ?...?...........
     988:	fe aa ff ff f0 3f c3 fc 0f 0f c0 00 0f 0f fc 3f     .....?.........?
     998:	00 00 ff 00 00 3c 3f f0 f0 f0 3f ff ff ff ff ff     .....<?...?.....
     9a8:	ff ff ff ff aa ab fa aa ff ff fc ff ff ff 3f ff     ..............?.
     9b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fc     ................
     9c8:	ff ff ff ff ff ff ff ff ff fe aa aa ea aa bf ff     ................
     9d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fa     ................
     9f8:	aa aa aa aa bf ff ff ff ff ff ff ff ff ff ff ff     ................
     a08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a18:	ff ff ff ff ff fe aa aa aa aa bf ff ff ff ff ff     ................
     a28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a38:	ff ff ff ff ff ff ff ff ff ff ff ff ea aa aa aa     ................
     a48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a68:	ff ff fe aa aa af ff ff ff ff ff ff ff ff ff ff     ................
     a78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000a88 <_ZL7charRun>:
     a88:	00 00 00 00 00 00 00 0f fc 00 00 f0 fa ab c0 03     ................
     a98:	ff aa aa b0 03 ea aa aa ac 00 fa aa aa fc 00 0d     ................
     aa8:	6a af ff 00 0d 5d 5f ff 00 03 d7 ff 3c 00 00 35     j....]_.....<..5
     ab8:	57 3c 00 00 f5 57 fc 00 03 aa 57 f0 00 3e aa 60     W<...W....W..>.`
     ac8:	70 00 ea a9 80 70 03 aa a9 80 c0 0e aa 96 02 c0     p....p..........
     ad8:	0e 95 68 07 00 39 6a 80 03 00 0e b5 50 03 00 03     ..h..9j.....P...
     ae8:	cd 40 0c 00 00 00 00 ff c0 00 00 0f aa b0 00 00     .@..............
     af8:	3a aa ac 00 f3 ea aa fc 03 fe aa aa ff 03 ea aa     :...............
     b08:	ab ff 00 f5 aa 9f fc 00 0d 55 5f 3c 00 03 f7 5f     .........U_<..._
     b18:	3c 00 00 39 f7 f0 00 00 e9 54 70 00 03 aa 98 70     <..9.....Tp....p
     b28:	00 0e aa 60 c0 00 3a aa 60 c0 00 ea a9 80 c0 03     ...`..:.`.......
     b38:	aa a9 80 c0 0e aa 96 00 c0 39 55 68 c3 00 0e aa     .........9Uh....
     b48:	83 3c 00 03 fc 0c 00 00 00 00 0f ff f0 00 00 3a     .<.............:
     b58:	aa ac 00 00 ea aa ff 00 03 aa ab ff 00 3f aa ab     .............?..
     b68:	ff 00 fe aa af 3c 00 fa aa b7 3c 00 3d 55 d7 fc     .....<....<.=U..
     b78:	00 03 d5 d7 f0 00 03 a9 54 70 00 0e aa 60 b0 00     ........Tp...`..
     b88:	3a a9 80 b0 00 3a a6 02 b0 00 ea a6 02 c0 00 ea     :....:..........
     b98:	98 00 c0 00 ea 98 00 c0 03 95 58 f0 c0 00 ea a3     ..........X.....
     ba8:	0c c0 00 3c 0c 03 00 00 03 30 00 00 00 00 ff ff     ...<.....0......
     bb8:	c0 00 03 aa aa b0 00 0e aa aa ac 00 3a aa aa ff     ............:...
     bc8:	00 ea aa af ff 03 e6 ab ff fc 03 fd 9f 57 3c 00     .............W<.
     bd8:	ff 57 57 3c 00 0f a5 57 fc 00 3a a9 53 f0 00 ea     .WW<...W..:.S...
     be8:	a6 80 c0 03 aa 98 00 c0 03 aa 60 02 b0 0e a9 80     ..........`.....
     bf8:	02 b0 0d a9 80 0a b0 0e 69 80 02 c0 03 95 80 03     ........i.......
     c08:	00 00 ea 00 00 c0 00 3f 01 70 c0 00 00 ff cc 30     .......?.p.....0
     c18:	00 03 ff fc 00 00 3e aa ab c0 03 ea aa aa b0 0f     ......>.........
     c28:	aa aa aa ac 0f f6 aa ab ff 03 cd af af ff 00 03     ................
     c38:	75 ff fc 00 00 d5 57 3c 00 00 d5 57 3c 00 03 e5     u.....W<...W<...
     c48:	57 fc 00 3e a9 63 f0 03 ea a6 80 c0 0e aa 98 00     W..>.c..........
     c58:	c0 3a aa 60 02 c0 36 a9 80 02 c0 39 a6 00 0a c0     .:.`..6....9....
     c68:	0e 56 40 0a c0 03 ab 50 03 00 00 fc c0 03 00 00     .V@....P........
     c78:	00 3a 83 00 00 00 00 00 00 00 00 0f fc 00 00 f0     .:..............
     c88:	fa ab c0 03 ff aa aa b0 03 ea aa aa ac 00 d6 aa     ................
     c98:	ab fc 00 3d 6a bf ff 00 0d 5d 5f ff 00 03 d7 fc     ...=j....]_.....
     ca8:	fc 00 00 35 5c fc 00 00 f5 5f fc 00 03 a9 4f f0     ...5\...._....O.
     cb8:	00 3e a9 80 70 00 ea a6 00 70 03 aa a6 00 70 0e     .>..p....p....p.
     cc8:	aa 58 02 c0 0e 55 a0 0a c0 39 aa 00 03 00 0e b5     .X...U...9......
     cd8:	50 03 00 03 cd 4c 0c 00                             P....L..

00000ce0 <__ctors_start>:
     ce0:	f8 06       	cpc	r15, r24

00000ce2 <__ctors_end>:
     ce2:	11 24       	eor	r1, r1
     ce4:	1f be       	out	0x3f, r1	; 63
     ce6:	cf ef       	ldi	r28, 0xFF	; 255
     ce8:	d8 e0       	ldi	r29, 0x08	; 8
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	cd bf       	out	0x3d, r28	; 61

00000cee <__do_copy_data>:
     cee:	11 e0       	ldi	r17, 0x01	; 1
     cf0:	a0 e0       	ldi	r26, 0x00	; 0
     cf2:	b1 e0       	ldi	r27, 0x01	; 1
     cf4:	e6 e9       	ldi	r30, 0x96	; 150
     cf6:	fd e1       	ldi	r31, 0x1D	; 29
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <__do_copy_data+0x10>
     cfa:	05 90       	lpm	r0, Z+
     cfc:	0d 92       	st	X+, r0
     cfe:	a6 33       	cpi	r26, 0x36	; 54
     d00:	b1 07       	cpc	r27, r17
     d02:	d9 f7       	brne	.-10     	; 0xcfa <__do_copy_data+0xc>

00000d04 <__do_clear_bss>:
     d04:	21 e0       	ldi	r18, 0x01	; 1
     d06:	a6 e3       	ldi	r26, 0x36	; 54
     d08:	b1 e0       	ldi	r27, 0x01	; 1
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <.do_clear_bss_start>

00000d0c <.do_clear_bss_loop>:
     d0c:	1d 92       	st	X+, r1

00000d0e <.do_clear_bss_start>:
     d0e:	a5 35       	cpi	r26, 0x55	; 85
     d10:	b2 07       	cpc	r27, r18
     d12:	e1 f7       	brne	.-8      	; 0xd0c <.do_clear_bss_loop>

00000d14 <__do_global_ctors>:
     d14:	16 e0       	ldi	r17, 0x06	; 6
     d16:	c1 e7       	ldi	r28, 0x71	; 113
     d18:	d6 e0       	ldi	r29, 0x06	; 6
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <__do_global_ctors+0x10>
     d1c:	21 97       	sbiw	r28, 0x01	; 1
     d1e:	fe 01       	movw	r30, r28
     d20:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__tablejump2__>
     d24:	c0 37       	cpi	r28, 0x70	; 112
     d26:	d1 07       	cpc	r29, r17
     d28:	c9 f7       	brne	.-14     	; 0xd1c <__do_global_ctors+0x8>
     d2a:	0e 94 9b 06 	call	0xd36	; 0xd36 <main>
     d2e:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <_exit>

00000d32 <__bad_interrupt>:
     d32:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d36 <main>:
--------------  MAIN START  --------------
//========================================*/

int main(void)
{
  beginPort(B, OUT);
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN3MCU7Setting9beginPortEab>
  beginPort(D, OUT);
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN3MCU7Setting9beginPortEab>
  beginTimer(1, COMP);
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN3MCU7Setting10beginTimerEab>
  beginTimer(2, COMP);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN3MCU7Setting10beginTimerEab>
  beginPWM(OC0A, FAST);
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN3MCU7Setting8beginPWMEab>
  beginSPI();
     d5e:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZN3MCU7Setting8beginSPIEv>
  sei();
     d62:	78 94       	sei

  TCCR0B = 0x00;
     d64:	15 bc       	out	0x25, r1	; 37

  game.title();
     d66:	86 e3       	ldi	r24, 0x36	; 54
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN4Game5titleEv>

  while (1)
  {
    game.start();
     d6e:	86 e3       	ldi	r24, 0x36	; 54
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 a0 09 	call	0x1340	; 0x1340 <_ZN4Game5startEv>
     d76:	fb cf       	rjmp	.-10     	; 0xd6e <main+0x38>

00000d78 <__vector_11>:
---------------  MAIN END  ---------------
//========================================*/


ISR(TIMER1_COMPA_vect)
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
  Frame::secondTime++;
     d86:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_ZN5Frame10secondTimeE>
     d8a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <_ZN5Frame10secondTimeE+0x1>
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <_ZN5Frame10secondTimeE+0x1>
     d94:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_ZN5Frame10secondTimeE>
}
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
  Frame::presentTime++;
     db8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_ZN5Frame11presentTimeE>
     dbc:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <_ZN5Frame11presentTimeE+0x1>
     dc0:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <_ZN5Frame11presentTimeE+0x2>
     dc4:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <_ZN5Frame11presentTimeE+0x3>
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	a1 1d       	adc	r26, r1
     dcc:	b1 1d       	adc	r27, r1
     dce:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <_ZN5Frame11presentTimeE>
     dd2:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <_ZN5Frame11presentTimeE+0x1>
     dd6:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <_ZN5Frame11presentTimeE+0x2>
     dda:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <_ZN5Frame11presentTimeE+0x3>
}
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	0f 90       	pop	r0
     dec:	1f 90       	pop	r1
     dee:	18 95       	reti

00000df0 <_GLOBAL__sub_I_game>:
private:
  int16_t m_Width;
  int16_t m_Height;

public:
  TFT() : SPI() { m_Width = 240; m_Height = 320; }
     df0:	e6 e3       	ldi	r30, 0x36	; 54
     df2:	f1 e0       	ldi	r31, 0x01	; 1
     df4:	80 ef       	ldi	r24, 0xF0	; 240
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	80 83       	st	Z, r24
     dfc:	80 e4       	ldi	r24, 0x40	; 64
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	93 83       	std	Z+3, r25	; 0x03
     e02:	82 83       	std	Z+2, r24	; 0x02
     e04:	08 95       	ret

00000e06 <_ZN4Font11printLetterEiih>:
/*----------------------------------------//
              Print 8x8 Letter
//----------------------------------------*/

void Font::printLetter(int16_t xPos, int16_t yPos, uint8_t ASCII)
{
     e06:	8f 92       	push	r8
     e08:	9f 92       	push	r9
     e0a:	af 92       	push	r10
     e0c:	bf 92       	push	r11
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24

  uint8_t data;
  uint8_t temp;
  int16_t ASCIIValue = ASCII - 32;
     e20:	82 2f       	mov	r24, r18
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	80 97       	sbiw	r24, 0x20	; 32
  ASCIIValue = (ASCIIValue / 16) * 128 + (ASCIIValue % 16);
     e26:	9c 01       	movw	r18, r24
     e28:	12 f4       	brpl	.+4      	; 0xe2e <_ZN4Font11printLetterEiih+0x28>
     e2a:	21 5f       	subi	r18, 0xF1	; 241
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	49 01       	movw	r8, r18
     e30:	95 94       	asr	r9
     e32:	87 94       	ror	r8
     e34:	95 94       	asr	r9
     e36:	87 94       	ror	r8
     e38:	95 94       	asr	r9
     e3a:	87 94       	ror	r8
     e3c:	95 94       	asr	r9
     e3e:	87 94       	ror	r8
     e40:	96 94       	lsr	r9
     e42:	98 2c       	mov	r9, r8
     e44:	88 24       	eor	r8, r8
     e46:	97 94       	ror	r9
     e48:	87 94       	ror	r8
     e4a:	8f 70       	andi	r24, 0x0F	; 15
     e4c:	90 78       	andi	r25, 0x80	; 128
     e4e:	99 23       	and	r25, r25
     e50:	24 f4       	brge	.+8      	; 0xe5a <_ZN4Font11printLetterEiih+0x54>
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	80 6f       	ori	r24, 0xF0	; 240
     e56:	9f 6f       	ori	r25, 0xFF	; 255
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	88 0e       	add	r8, r24
     e5c:	99 1e       	adc	r9, r25

  setAddress(xPos, yPos, (xPos + 15), (yPos + 15));
     e5e:	8a 01       	movw	r16, r20
     e60:	01 5f       	subi	r16, 0xF1	; 241
     e62:	1f 4f       	sbci	r17, 0xFF	; 255
     e64:	9b 01       	movw	r18, r22
     e66:	21 5f       	subi	r18, 0xF1	; 241
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	ce 01       	movw	r24, r28
     e6c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN3TFT10setAddressEiiii>
     e70:	54 01       	movw	r10, r8
     e72:	80 e8       	ldi	r24, 0x80	; 128
     e74:	88 0e       	add	r8, r24
     e76:	91 1c       	adc	r9, r1
/*----------------------------------------//
              Print 8x8 Letter
//----------------------------------------*/

void Font::printLetter(int16_t xPos, int16_t yPos, uint8_t ASCII)
{
     e78:	68 94       	set
     e7a:	cc 24       	eor	r12, r12
     e7c:	c1 f8       	bld	r12, 1
     e7e:	d1 2c       	mov	r13, r1
  for (int i=0; i<(16 / 2); i++)
  {
    for (int j=0; j<2; j++)
    {

      data = pgm_read_byte(&m_Bitmap[(i * 16) + ASCIIValue]);
     e80:	ec 81       	ldd	r30, Y+4	; 0x04
     e82:	fd 81       	ldd	r31, Y+5	; 0x05
     e84:	ea 0d       	add	r30, r10
     e86:	fb 1d       	adc	r31, r11
     e88:	14 91       	lpm	r17, Z
     e8a:	68 94       	set
     e8c:	ee 24       	eor	r14, r14
     e8e:	e3 f8       	bld	r14, 3
     e90:	f1 2c       	mov	r15, r1
        temp = data >> 7;

        for (int l=0; l<2; l++)
        {

          if (temp == 0x00)       //1Pixel = 0
     e92:	11 23       	and	r17, r17
     e94:	5c f4       	brge	.+22     	; 0xeac <_ZN4Font11printLetterEiih+0xa6>
            exportLongData(m_Background);
          }

          else                    //1Pixel = 1
          {
            exportLongData(m_Colored);
     e96:	68 85       	ldd	r22, Y+8	; 0x08
     e98:	79 85       	ldd	r23, Y+9	; 0x09
     e9a:	ce 01       	movw	r24, r28
     e9c:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
     ea0:	68 85       	ldd	r22, Y+8	; 0x08
     ea2:	79 85       	ldd	r23, Y+9	; 0x09
     ea4:	ce 01       	movw	r24, r28
     ea6:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <_ZN4Font11printLetterEiih+0xba>
        for (int l=0; l<2; l++)
        {

          if (temp == 0x00)       //1Pixel = 0
          {
            exportLongData(m_Background);
     eac:	6e 81       	ldd	r22, Y+6	; 0x06
     eae:	7f 81       	ldd	r23, Y+7	; 0x07
     eb0:	ce 01       	movw	r24, r28
     eb2:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
     eb6:	6e 81       	ldd	r22, Y+6	; 0x06
     eb8:	7f 81       	ldd	r23, Y+7	; 0x07
     eba:	ce 01       	movw	r24, r28
     ebc:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
            exportLongData(m_Colored);
          }

        }

        data <<= 1;
     ec0:	11 0f       	add	r17, r17
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	e8 1a       	sub	r14, r24
     ec6:	f1 08       	sbc	r15, r1
    for (int j=0; j<2; j++)
    {

      data = pgm_read_byte(&m_Bitmap[(i * 16) + ASCIIValue]);

      for (int k=0; k<8; k++)
     ec8:	21 f7       	brne	.-56     	; 0xe92 <_ZN4Font11printLetterEiih+0x8c>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	c8 1a       	sub	r12, r24
     ece:	d1 08       	sbc	r13, r1

  setAddress(xPos, yPos, (xPos + 15), (yPos + 15));

  for (int i=0; i<(16 / 2); i++)
  {
    for (int j=0; j<2; j++)
     ed0:	b9 f6       	brne	.-82     	; 0xe80 <_ZN4Font11printLetterEiih+0x7a>
     ed2:	80 e1       	ldi	r24, 0x10	; 16
     ed4:	a8 0e       	add	r10, r24
     ed6:	b1 1c       	adc	r11, r1
  int16_t ASCIIValue = ASCII - 32;
  ASCIIValue = (ASCIIValue / 16) * 128 + (ASCIIValue % 16);

  setAddress(xPos, yPos, (xPos + 15), (yPos + 15));

  for (int i=0; i<(16 / 2); i++)
     ed8:	a8 14       	cp	r10, r8
     eda:	b9 04       	cpc	r11, r9
     edc:	69 f6       	brne	.-102    	; 0xe78 <_ZN4Font11printLetterEiih+0x72>
      }

    }
  }

}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	9f 90       	pop	r9
     ef4:	8f 90       	pop	r8
     ef6:	08 95       	ret

00000ef8 <_ZN4Font5printEiiPKc>:
/*----------------------------------------//
              Print String
//----------------------------------------*/

void Font::print(int16_t xPos, int16_t yPos, const char *stringValue)
{
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	7c 01       	movw	r14, r24
     f0a:	eb 01       	movw	r28, r22
     f0c:	6a 01       	movw	r12, r20
     f0e:	f9 01       	movw	r30, r18

  while (*stringValue != '\0')
     f10:	20 81       	ld	r18, Z
     f12:	22 23       	and	r18, r18
     f14:	71 f0       	breq	.+28     	; 0xf32 <_ZN4Font5printEiiPKc+0x3a>
     f16:	8f 01       	movw	r16, r30
     f18:	0f 5f       	subi	r16, 0xFF	; 255
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    printLetter(xPos, yPos, *stringValue);
     f1c:	a6 01       	movw	r20, r12
     f1e:	be 01       	movw	r22, r28
     f20:	c7 01       	movw	r24, r14
     f22:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN4Font11printLetterEiih>
    stringValue++;
    xPos += 16;
     f26:	60 96       	adiw	r28, 0x10	; 16
//----------------------------------------*/

void Font::print(int16_t xPos, int16_t yPos, const char *stringValue)
{

  while (*stringValue != '\0')
     f28:	f8 01       	movw	r30, r16
     f2a:	21 91       	ld	r18, Z+
     f2c:	8f 01       	movw	r16, r30
     f2e:	21 11       	cpse	r18, r1
     f30:	f5 cf       	rjmp	.-22     	; 0xf1c <_ZN4Font5printEiiPKc+0x24>
    printLetter(xPos, yPos, *stringValue);
    stringValue++;
    xPos += 16;
  }

}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	08 95       	ret

00000f44 <_ZN4Font5printEiim>:
/*----------------------------------------//
              Print Intager
//----------------------------------------*/

void Font::print(int16_t xPos, int16_t yPos, uint32_t intager)
{
     f44:	2f 92       	push	r2
     f46:	3f 92       	push	r3
     f48:	4f 92       	push	r4
     f4a:	5f 92       	push	r5
     f4c:	6f 92       	push	r6
     f4e:	7f 92       	push	r7
     f50:	8f 92       	push	r8
     f52:	9f 92       	push	r9
     f54:	af 92       	push	r10
     f56:	bf 92       	push	r11
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	27 97       	sbiw	r28, 0x07	; 7
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	b6 2e       	mov	r11, r22
     f7e:	a7 2e       	mov	r10, r23
     f80:	5c 83       	std	Y+4, r21	; 0x04
     f82:	4b 83       	std	Y+3, r20	; 0x03
     f84:	68 01       	movw	r12, r16
     f86:	79 01       	movw	r14, r18

  uint32_t placeValue = 1;
  uint8_t digit = 1;

  while ((intager / placeValue) > 9)
     f88:	0a 30       	cpi	r16, 0x0A	; 10
     f8a:	11 05       	cpc	r17, r1
     f8c:	21 05       	cpc	r18, r1
     f8e:	31 05       	cpc	r19, r1
     f90:	88 f1       	brcs	.+98     	; 0xff4 <_ZN4Font5printEiim+0xb0>
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	9d 83       	std	Y+5, r25	; 0x05
     f96:	41 2c       	mov	r4, r1
     f98:	51 2c       	mov	r5, r1
     f9a:	32 01       	movw	r6, r4
     f9c:	43 94       	inc	r4
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <_ZN4Font5printEiim+0x6e>
  {
    digit++;
    placeValue *= 10;
  }
  
  for (int i=0; i<digit; i++)
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	89 2f       	mov	r24, r25
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9f 83       	std	Y+7, r25	; 0x07
     fa8:	8e 83       	std	Y+6, r24	; 0x06
     faa:	18 16       	cp	r1, r24
     fac:	19 06       	cpc	r1, r25
     fae:	54 f1       	brlt	.+84     	; 0x1004 <_ZN4Font5printEiim+0xc0>
     fb0:	57 c0       	rjmp	.+174    	; 0x1060 <_ZN4Font5printEiim+0x11c>
  uint32_t placeValue = 1;
  uint8_t digit = 1;

  while ((intager / placeValue) > 9)
  {
    digit++;
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	8d 83       	std	Y+5, r24	; 0x05
    placeValue *= 10;
     fb8:	44 0c       	add	r4, r4
     fba:	55 1c       	adc	r5, r5
     fbc:	66 1c       	adc	r6, r6
     fbe:	77 1c       	adc	r7, r7
     fc0:	d3 01       	movw	r26, r6
     fc2:	c2 01       	movw	r24, r4
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	aa 1f       	adc	r26, r26
     fca:	bb 1f       	adc	r27, r27
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	aa 1f       	adc	r26, r26
     fd2:	bb 1f       	adc	r27, r27
     fd4:	48 0e       	add	r4, r24
     fd6:	59 1e       	adc	r5, r25
     fd8:	6a 1e       	adc	r6, r26
     fda:	7b 1e       	adc	r7, r27
{

  uint32_t placeValue = 1;
  uint8_t digit = 1;

  while ((intager / placeValue) > 9)
     fdc:	c7 01       	movw	r24, r14
     fde:	b6 01       	movw	r22, r12
     fe0:	a3 01       	movw	r20, r6
     fe2:	92 01       	movw	r18, r4
     fe4:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__udivmodsi4>
     fe8:	2a 30       	cpi	r18, 0x0A	; 10
     fea:	31 05       	cpc	r19, r1
     fec:	41 05       	cpc	r20, r1
     fee:	51 05       	cpc	r21, r1
     ff0:	00 f7       	brcc	.-64     	; 0xfb2 <_ZN4Font5printEiim+0x6e>
     ff2:	d6 cf       	rjmp	.-84     	; 0xfa0 <_ZN4Font5printEiim+0x5c>
  {
    digit++;
    placeValue *= 10;
  }
  
  for (int i=0; i<digit; i++)
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9f 83       	std	Y+7, r25	; 0x07
     ffa:	8e 83       	std	Y+6, r24	; 0x06
//----------------------------------------*/

void Font::print(int16_t xPos, int16_t yPos, uint32_t intager)
{

  uint32_t placeValue = 1;
     ffc:	41 2c       	mov	r4, r1
     ffe:	51 2c       	mov	r5, r1
    1000:	32 01       	movw	r6, r4
    1002:	43 94       	inc	r4
    1004:	0b 2d       	mov	r16, r11
    1006:	1a 2d       	mov	r17, r10
    1008:	a1 2c       	mov	r10, r1
    100a:	b1 2c       	mov	r11, r1
    placeValue *= 10;
  }
  
  for (int i=0; i<digit; i++)
  {
    printLetter(xPos + (16 * i), yPos, ((intager / placeValue) + 0x30));
    100c:	c7 01       	movw	r24, r14
    100e:	b6 01       	movw	r22, r12
    1010:	a3 01       	movw	r20, r6
    1012:	92 01       	movw	r18, r4
    1014:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__udivmodsi4>
    1018:	26 2e       	mov	r2, r22
    101a:	37 2e       	mov	r3, r23
    101c:	88 2e       	mov	r8, r24
    101e:	99 2e       	mov	r9, r25
    1020:	20 5d       	subi	r18, 0xD0	; 208
    1022:	4b 81       	ldd	r20, Y+3	; 0x03
    1024:	5c 81       	ldd	r21, Y+4	; 0x04
    1026:	b8 01       	movw	r22, r16
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN4Font11printLetterEiih>
    intager %= placeValue;
    1030:	c2 2c       	mov	r12, r2
    1032:	d3 2c       	mov	r13, r3
    1034:	e8 2c       	mov	r14, r8
    1036:	f9 2c       	mov	r15, r9
    placeValue /= 10;
    1038:	c3 01       	movw	r24, r6
    103a:	b2 01       	movw	r22, r4
    103c:	2a e0       	ldi	r18, 0x0A	; 10
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__udivmodsi4>
    1048:	29 01       	movw	r4, r18
    104a:	3a 01       	movw	r6, r20
  {
    digit++;
    placeValue *= 10;
  }
  
  for (int i=0; i<digit; i++)
    104c:	9f ef       	ldi	r25, 0xFF	; 255
    104e:	a9 1a       	sub	r10, r25
    1050:	b9 0a       	sbc	r11, r25
    1052:	00 5f       	subi	r16, 0xF0	; 240
    1054:	1f 4f       	sbci	r17, 0xFF	; 255
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	9f 81       	ldd	r25, Y+7	; 0x07
    105a:	a8 16       	cp	r10, r24
    105c:	b9 06       	cpc	r11, r25
    105e:	b4 f2       	brlt	.-84     	; 0x100c <_ZN4Font5printEiim+0xc8>
    printLetter(xPos + (16 * i), yPos, ((intager / placeValue) + 0x30));
    intager %= placeValue;
    placeValue /= 10;
  }

    1060:	27 96       	adiw	r28, 0x07	; 7
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	9f 90       	pop	r9
    1082:	8f 90       	pop	r8
    1084:	7f 90       	pop	r7
    1086:	6f 90       	pop	r6
    1088:	5f 90       	pop	r5
    108a:	4f 90       	pop	r4
    108c:	3f 90       	pop	r3
    108e:	2f 90       	pop	r2
    1090:	08 95       	ret

00001092 <_ZN5Frame6updateEv>:
//----------------------------------------*/

void Frame::update(void)
{

  if (presentTime >= pastTick + 10)
    1092:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_ZN5Frame11presentTimeE>
    1096:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <_ZN5Frame11presentTimeE+0x1>
    109a:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <_ZN5Frame11presentTimeE+0x2>
    109e:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <_ZN5Frame11presentTimeE+0x3>
    10a2:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <_ZN5Frame8pastTickE>
    10a6:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <_ZN5Frame8pastTickE+0x1>
    10aa:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <_ZN5Frame8pastTickE+0x2>
    10ae:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <_ZN5Frame8pastTickE+0x3>
    10b2:	46 5f       	subi	r20, 0xF6	; 246
    10b4:	5f 4f       	sbci	r21, 0xFF	; 255
    10b6:	6f 4f       	sbci	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	84 17       	cp	r24, r20
    10bc:	95 07       	cpc	r25, r21
    10be:	a6 07       	cpc	r26, r22
    10c0:	b7 07       	cpc	r27, r23
    10c2:	90 f0       	brcs	.+36     	; 0x10e8 <_ZN5Frame6updateEv+0x56>
  {

    pastTick = presentTime;
    10c4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_ZN5Frame8pastTickE>
    10c8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_ZN5Frame8pastTickE+0x1>
    10cc:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <_ZN5Frame8pastTickE+0x2>
    10d0:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <_ZN5Frame8pastTickE+0x3>

    oneTick++;
    10d4:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <_ZN5Frame7oneTickE>
    10d8:	2f 5f       	subi	r18, 0xFF	; 255

    if (oneTick == 2)
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	19 f0       	breq	.+6      	; 0x10e4 <_ZN5Frame6updateEv+0x52>
  if (presentTime >= pastTick + 10)
  {

    pastTick = presentTime;

    oneTick++;
    10de:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <_ZN5Frame7oneTickE>
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <_ZN5Frame6updateEv+0x56>

    if (oneTick == 2)
    {
      oneTick = 0;
    10e4:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZN5Frame7oneTickE>
    }

  }

  if (presentTime >= pastFrame + 100)
    10e8:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <_ZN5Frame9pastFrameE>
    10ec:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <_ZN5Frame9pastFrameE+0x1>
    10f0:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <_ZN5Frame9pastFrameE+0x2>
    10f4:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <_ZN5Frame9pastFrameE+0x3>
    10f8:	4c 59       	subi	r20, 0x9C	; 156
    10fa:	5f 4f       	sbci	r21, 0xFF	; 255
    10fc:	6f 4f       	sbci	r22, 0xFF	; 255
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	84 17       	cp	r24, r20
    1102:	95 07       	cpc	r25, r21
    1104:	a6 07       	cpc	r26, r22
    1106:	b7 07       	cpc	r27, r23
    1108:	d0 f0       	brcs	.+52     	; 0x113e <_ZN5Frame6updateEv+0xac>
  {

    pastFrame = presentTime;
    110a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_ZN5Frame9pastFrameE>
    110e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_ZN5Frame9pastFrameE+0x1>
    1112:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_ZN5Frame9pastFrameE+0x2>
    1116:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_ZN5Frame9pastFrameE+0x3>

    fourFrames++;
    111a:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <_ZN5Frame10fourFramesE>
    111e:	3f 5f       	subi	r19, 0xFF	; 255
    1120:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <_ZN5Frame10fourFramesE>
    sixFrames++;
    1124:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <_ZN5Frame9sixFramesE>
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <_ZN5Frame9sixFramesE>

    if (fourFrames == 4)
    112e:	34 30       	cpi	r19, 0x04	; 4
    1130:	11 f4       	brne	.+4      	; 0x1136 <_ZN5Frame6updateEv+0xa4>
    {
      fourFrames = 0;
    1132:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZN5Frame10fourFramesE>
    }

    if (sixFrames == 6)
    1136:	26 30       	cpi	r18, 0x06	; 6
    1138:	11 f4       	brne	.+4      	; 0x113e <_ZN5Frame6updateEv+0xac>
    {
      sixFrames = 0;
    113a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN5Frame9sixFramesE>
    }

  }

  if (presentTime >= pastBeat + 125)
    113e:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <_ZN5Frame8pastBeatE>
    1142:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <_ZN5Frame8pastBeatE+0x1>
    1146:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <_ZN5Frame8pastBeatE+0x2>
    114a:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <_ZN5Frame8pastBeatE+0x3>
    114e:	43 58       	subi	r20, 0x83	; 131
    1150:	5f 4f       	sbci	r21, 0xFF	; 255
    1152:	6f 4f       	sbci	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	84 17       	cp	r24, r20
    1158:	95 07       	cpc	r25, r21
    115a:	a6 07       	cpc	r26, r22
    115c:	b7 07       	cpc	r27, r23
    115e:	90 f0       	brcs	.+36     	; 0x1184 <_ZN5Frame6updateEv+0xf2>
  {

    pastBeat = presentTime;
    1160:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_ZN5Frame8pastBeatE>
    1164:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_ZN5Frame8pastBeatE+0x1>
    1168:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <_ZN5Frame8pastBeatE+0x2>
    116c:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <_ZN5Frame8pastBeatE+0x3>

    sixteenBeats++;
    1170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1174:	8f 5f       	subi	r24, 0xFF	; 255

    if (sixteenBeats == 2)
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	19 f0       	breq	.+6      	; 0x1180 <_ZN5Frame6updateEv+0xee>
  if (presentTime >= pastBeat + 125)
  {

    pastBeat = presentTime;

    sixteenBeats++;
    117a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    117e:	08 95       	ret

    if (sixteenBeats == 2)
    {
      sixteenBeats = 0;
    1180:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    1184:	08 95       	ret

00001186 <_ZN5Frame4initEv>:
                Reset Frame
//----------------------------------------*/

void Frame::init(void)
{
  pastTick = presentTime;
    1186:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_ZN5Frame11presentTimeE>
    118a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <_ZN5Frame11presentTimeE+0x1>
    118e:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <_ZN5Frame11presentTimeE+0x2>
    1192:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <_ZN5Frame11presentTimeE+0x3>
    1196:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_ZN5Frame8pastTickE>
    119a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_ZN5Frame8pastTickE+0x1>
    119e:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <_ZN5Frame8pastTickE+0x2>
    11a2:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <_ZN5Frame8pastTickE+0x3>
  pastFrame = presentTime;
    11a6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_ZN5Frame9pastFrameE>
    11aa:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_ZN5Frame9pastFrameE+0x1>
    11ae:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_ZN5Frame9pastFrameE+0x2>
    11b2:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_ZN5Frame9pastFrameE+0x3>
  pastBeat = presentTime;
    11b6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_ZN5Frame8pastBeatE>
    11ba:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_ZN5Frame8pastBeatE+0x1>
    11be:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <_ZN5Frame8pastBeatE+0x2>
    11c2:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <_ZN5Frame8pastBeatE+0x3>
    11c6:	08 95       	ret

000011c8 <_ZN4Game5titleEv>:
/*----------------------------------------//
                Game Title
//----------------------------------------*/

void Game::title(void)
{
    11c8:	7f 92       	push	r7
    11ca:	8f 92       	push	r8
    11cc:	9f 92       	push	r9
    11ce:	af 92       	push	r10
    11d0:	bf 92       	push	r11
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	ec 01       	movw	r28, r24
  begin();
    11e4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_ZN3TFT5beginEv>
  setRotation(0);
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	ce 01       	movw	r24, r28
    11ec:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN3TFT11setRotationEa>

  fillScreen(WHITE);
    11f0:	6f ef       	ldi	r22, 0xFF	; 255
    11f2:	7f ef       	ldi	r23, 0xFF	; 255
    11f4:	ce 01       	movw	r24, r28
    11f6:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN3TFT10fillScreenEj>
  drawBitmapOnce(8, 70, 152, 48, logoAtmel, BLACK, RED, BLUE, WHITE);
    11fa:	77 24       	eor	r7, r7
    11fc:	7a 94       	dec	r7
    11fe:	7f 92       	push	r7
    1200:	7f 92       	push	r7
    1202:	0f 2e       	mov	r0, r31
    1204:	ff e1       	ldi	r31, 0x1F	; 31
    1206:	8f 2e       	mov	r8, r31
    1208:	91 2c       	mov	r9, r1
    120a:	f0 2d       	mov	r31, r0
    120c:	0f 2e       	mov	r0, r31
    120e:	a1 2c       	mov	r10, r1
    1210:	f8 ef       	ldi	r31, 0xF8	; 248
    1212:	bf 2e       	mov	r11, r31
    1214:	f0 2d       	mov	r31, r0
    1216:	c1 2c       	mov	r12, r1
    1218:	d1 2c       	mov	r13, r1
    121a:	0f 2e       	mov	r0, r31
    121c:	f8 e6       	ldi	r31, 0x68	; 104
    121e:	ef 2e       	mov	r14, r31
    1220:	f3 e0       	ldi	r31, 0x03	; 3
    1222:	ff 2e       	mov	r15, r31
    1224:	f0 2d       	mov	r31, r0
    1226:	00 e3       	ldi	r16, 0x30	; 48
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	28 e9       	ldi	r18, 0x98	; 152
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	46 e4       	ldi	r20, 0x46	; 70
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	68 e0       	ldi	r22, 0x08	; 8
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	ce 01       	movw	r24, r28
    1238:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    123c:	2f ef       	ldi	r18, 0xFF	; 255
    123e:	89 e6       	ldi	r24, 0x69	; 105
    1240:	98 e1       	ldi	r25, 0x18	; 24
    1242:	21 50       	subi	r18, 0x01	; 1
    1244:	80 40       	sbci	r24, 0x00	; 0
    1246:	90 40       	sbci	r25, 0x00	; 0
    1248:	e1 f7       	brne	.-8      	; 0x1242 <_ZN4Game5titleEv+0x7a>
    124a:	00 c0       	rjmp	.+0      	; 0x124c <_ZN4Game5titleEv+0x84>
    124c:	00 00       	nop
  _delay_ms(500);

  drawBitmap(8, 70, 304, 96, logoAtmel, BLACK, RED, BLUE, WHITE);
    124e:	7f 92       	push	r7
    1250:	7f 92       	push	r7
    1252:	00 e6       	ldi	r16, 0x60	; 96
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	20 e3       	ldi	r18, 0x30	; 48
    1258:	31 e0       	ldi	r19, 0x01	; 1
    125a:	46 e4       	ldi	r20, 0x46	; 70
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	68 e0       	ldi	r22, 0x08	; 8
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	ce 01       	movw	r24, r28
    1264:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <_ZN3TFT10drawBitmapEiiiiPKhjjjj>
    1268:	2f ef       	ldi	r18, 0xFF	; 255
    126a:	8b e7       	ldi	r24, 0x7B	; 123
    126c:	92 e9       	ldi	r25, 0x92	; 146
    126e:	21 50       	subi	r18, 0x01	; 1
    1270:	80 40       	sbci	r24, 0x00	; 0
    1272:	90 40       	sbci	r25, 0x00	; 0
    1274:	e1 f7       	brne	.-8      	; 0x126e <_ZN4Game5titleEv+0xa6>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <_ZN4Game5titleEv+0xb0>
    1278:	00 00       	nop
  _delay_ms(3000);

  fillScreen(BLACK);
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	ce 01       	movw	r24, r28
    1280:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN3TFT10fillScreenEj>
public:
  Font() : TFT(){};
  Font(const uint8_t *bitmap) : TFT() { m_Bitmap = bitmap; }
  ~Font(){};

  void setFont(const uint8_t *bitmap) { m_Bitmap = bitmap; }
    1284:	88 e6       	ldi	r24, 0x68	; 104
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9d 83       	std	Y+5, r25	; 0x05
    128a:	8c 83       	std	Y+4, r24	; 0x04
  void setColor(uint16_t color0Bit, uint16_t color1Bit) { m_Background = color0Bit; m_Colored = color1Bit; }
    128c:	1f 82       	std	Y+7, r1	; 0x07
    128e:	1e 82       	std	Y+6, r1	; 0x06
    1290:	0f ef       	ldi	r16, 0xFF	; 255
    1292:	1f ef       	ldi	r17, 0xFF	; 255
    1294:	19 87       	std	Y+9, r17	; 0x09
    1296:	08 87       	std	Y+8, r16	; 0x08
  setFont(fontASCII);
  setColor(BLACK, WHITE);
  print(30, 70, "Hello, World!");
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	31 e0       	ldi	r19, 0x01	; 1
    129c:	46 e4       	ldi	r20, 0x46	; 70
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	6e e1       	ldi	r22, 0x1E	; 30
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	ce 01       	movw	r24, r28
    12a6:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN4Font5printEiiPKc>
    12aa:	2f ef       	ldi	r18, 0xFF	; 255
    12ac:	83 ed       	ldi	r24, 0xD3	; 211
    12ae:	90 e3       	ldi	r25, 0x30	; 48
    12b0:	21 50       	subi	r18, 0x01	; 1
    12b2:	80 40       	sbci	r24, 0x00	; 0
    12b4:	90 40       	sbci	r25, 0x00	; 0
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <_ZN4Game5titleEv+0xe8>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <_ZN4Game5titleEv+0xf2>
    12ba:	00 00       	nop
    12bc:	1f 82       	std	Y+7, r1	; 0x07
    12be:	1e 82       	std	Y+6, r1	; 0x06
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	97 e0       	ldi	r25, 0x07	; 7
    12c4:	99 87       	std	Y+9, r25	; 0x09
    12c6:	88 87       	std	Y+8, r24	; 0x08
  _delay_ms(1000);

  setColor(BLACK, CYAN);
  print(30, 120, "And Welcome to");
    12c8:	2f e0       	ldi	r18, 0x0F	; 15
    12ca:	31 e0       	ldi	r19, 0x01	; 1
    12cc:	48 e7       	ldi	r20, 0x78	; 120
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	6e e1       	ldi	r22, 0x1E	; 30
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	ce 01       	movw	r24, r28
    12d6:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN4Font5printEiiPKc>
    12da:	1f 82       	std	Y+7, r1	; 0x07
    12dc:	1e 82       	std	Y+6, r1	; 0x06
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	98 ef       	ldi	r25, 0xF8	; 248
    12e2:	99 87       	std	Y+9, r25	; 0x09
    12e4:	88 87       	std	Y+8, r24	; 0x08
  setColor(BLACK, RED);
  print(30, 136, "Atmega Game (^O^)");
    12e6:	2e e1       	ldi	r18, 0x1E	; 30
    12e8:	31 e0       	ldi	r19, 0x01	; 1
    12ea:	48 e8       	ldi	r20, 0x88	; 136
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	6e e1       	ldi	r22, 0x1E	; 30
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN4Font5printEiiPKc>
    12f8:	2f ef       	ldi	r18, 0xFF	; 255
    12fa:	83 e2       	ldi	r24, 0x23	; 35
    12fc:	94 ef       	ldi	r25, 0xF4	; 244
    12fe:	21 50       	subi	r18, 0x01	; 1
    1300:	80 40       	sbci	r24, 0x00	; 0
    1302:	90 40       	sbci	r25, 0x00	; 0
    1304:	e1 f7       	brne	.-8      	; 0x12fe <_ZN4Game5titleEv+0x136>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <_ZN4Game5titleEv+0x140>
    1308:	00 00       	nop
  _delay_ms(5000);

  fillScreen(BLACK);
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	ce 01       	movw	r24, r28
    1310:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN3TFT10fillScreenEj>
    1314:	1f 82       	std	Y+7, r1	; 0x07
    1316:	1e 82       	std	Y+6, r1	; 0x06
    1318:	19 87       	std	Y+9, r17	; 0x09
    131a:	08 87       	std	Y+8, r16	; 0x08
  setColor(BLACK, WHITE);
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	bf 90       	pop	r11
    1336:	af 90       	pop	r10
    1338:	9f 90       	pop	r9
    133a:	8f 90       	pop	r8
    133c:	7f 90       	pop	r7
    133e:	08 95       	ret

00001340 <_ZN4Game5startEv>:
/*----------------------------------------//
                Start Game
//----------------------------------------*/

void Game::start(void)
{
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	00 d0       	rcall	.+0      	; 0x1346 <_ZN4Game5startEv+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <_ZN4Game5startEv+0x8>
    1348:	00 d0       	rcall	.+0      	; 0x134a <_ZN4Game5startEv+0xa>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	2f ef       	ldi	r18, 0xFF	; 255
    1350:	31 ee       	ldi	r19, 0xE1	; 225
    1352:	44 e0       	ldi	r20, 0x04	; 4
    1354:	21 50       	subi	r18, 0x01	; 1
    1356:	30 40       	sbci	r19, 0x00	; 0
    1358:	40 40       	sbci	r20, 0x00	; 0
    135a:	e1 f7       	brne	.-8      	; 0x1354 <_ZN4Game5startEv+0x14>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <_ZN4Game5startEv+0x1e>
    135e:	00 00       	nop
  
  _delay_ms(100);

  print(40, 40, "TIME:");
    1360:	e8 2e       	mov	r14, r24
    1362:	f9 2e       	mov	r15, r25
    1364:	20 e3       	ldi	r18, 0x30	; 48
    1366:	31 e0       	ldi	r19, 0x01	; 1
    1368:	48 e2       	ldi	r20, 0x28	; 40
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	68 e2       	ldi	r22, 0x28	; 40
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN4Font5printEiiPKc>
private:
  int16_t m_Width;
  int16_t m_Height;

public:
  TFT() : SPI() { m_Width = 240; m_Height = 320; }
    1374:	80 ef       	ldi	r24, 0xF0	; 240
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	80 e4       	ldi	r24, 0x40	; 64
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
private:
  int8_t m_Life;
  bool mIs_Jump;

public:
  Player() : TFT() { m_Life = 3; }
    1384:	83 e0       	ldi	r24, 0x03	; 3
    1386:	8d 83       	std	Y+5, r24	; 0x05

  Player user;

  Frame::secondTime = 0;
    1388:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_ZN5Frame10secondTimeE+0x1>
    138c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_ZN5Frame10secondTimeE>
  Frame::init();
    1390:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN5Frame4initEv>

  while (1)
  {
    Frame::update();
    1394:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN5Frame6updateEv>
    user.startPlayer();
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	0e 94 df 09 	call	0x13be	; 0x13be <_ZN6Player11startPlayerEv>
    print(130, 40, Frame::secondTime);
    13a0:	00 91 53 01 	lds	r16, 0x0153	; 0x800153 <_ZN5Frame10secondTimeE>
    13a4:	10 91 54 01 	lds	r17, 0x0154	; 0x800154 <_ZN5Frame10secondTimeE+0x1>
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	48 e2       	ldi	r20, 0x28	; 40
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	62 e8       	ldi	r22, 0x82	; 130
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	8e 2d       	mov	r24, r14
    13b6:	9f 2d       	mov	r25, r15
    13b8:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN4Font5printEiim>
    13bc:	eb cf       	rjmp	.-42     	; 0x1394 <_ZN4Game5startEv+0x54>

000013be <_ZN6Player11startPlayerEv>:
/*----------------------------------------//
                Start Game
//----------------------------------------*/

void Player::startPlayer(void)
{
    13be:	5f 92       	push	r5
    13c0:	6f 92       	push	r6
    13c2:	7f 92       	push	r7
    13c4:	8f 92       	push	r8
    13c6:	9f 92       	push	r9
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	3c 01       	movw	r6, r24
  
  for (int i=0; i<6; i++)
    13de:	c0 e0       	ldi	r28, 0x00	; 0
    13e0:	d0 e0       	ldi	r29, 0x00	; 0
  {
    if (Frame::sixFrames == i)
    {
      drawBitmap(60, 120, 40, 40, charRun, i, BLACK, MAROON, RED, WHITE);
    13e2:	dd 24       	eor	r13, r13
    13e4:	da 94       	dec	r13
    13e6:	0f 2e       	mov	r0, r31
    13e8:	f8 ef       	ldi	r31, 0xF8	; 248
    13ea:	5f 2e       	mov	r5, r31
    13ec:	f0 2d       	mov	r31, r0
void Player::startPlayer(void)
{
  
  for (int i=0; i<6; i++)
  {
    if (Frame::sixFrames == i)
    13ee:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_ZN5Frame9sixFramesE>
    13f2:	08 2e       	mov	r0, r24
    13f4:	00 0c       	add	r0, r0
    13f6:	99 0b       	sbc	r25, r25
    13f8:	8c 17       	cp	r24, r28
    13fa:	9d 07       	cpc	r25, r29
    13fc:	09 f5       	brne	.+66     	; 0x1440 <_ZN6Player11startPlayerEv+0x82>
    {
      drawBitmap(60, 120, 40, 40, charRun, i, BLACK, MAROON, RED, WHITE);
    13fe:	df 92       	push	r13
    1400:	df 92       	push	r13
    1402:	5f 92       	push	r5
    1404:	1f 92       	push	r1
    1406:	0f 2e       	mov	r0, r31
    1408:	81 2c       	mov	r8, r1
    140a:	f8 e7       	ldi	r31, 0x78	; 120
    140c:	9f 2e       	mov	r9, r31
    140e:	f0 2d       	mov	r31, r0
    1410:	a1 2c       	mov	r10, r1
    1412:	b1 2c       	mov	r11, r1
    1414:	cc 2e       	mov	r12, r28
    1416:	0f 2e       	mov	r0, r31
    1418:	f8 e8       	ldi	r31, 0x88	; 136
    141a:	ef 2e       	mov	r14, r31
    141c:	fa e0       	ldi	r31, 0x0A	; 10
    141e:	ff 2e       	mov	r15, r31
    1420:	f0 2d       	mov	r31, r0
    1422:	08 e2       	ldi	r16, 0x28	; 40
    1424:	10 e0       	ldi	r17, 0x00	; 0
    1426:	28 e2       	ldi	r18, 0x28	; 40
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	48 e7       	ldi	r20, 0x78	; 120
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	6c e3       	ldi	r22, 0x3C	; 60
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	c3 01       	movw	r24, r6
    1434:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj>
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
//----------------------------------------*/

void Player::startPlayer(void)
{
  
  for (int i=0; i<6; i++)
    1440:	21 96       	adiw	r28, 0x01	; 1
    1442:	c6 30       	cpi	r28, 0x06	; 6
    1444:	d1 05       	cpc	r29, r1
    1446:	99 f6       	brne	.-90     	; 0x13ee <_ZN6Player11startPlayerEv+0x30>
    {
      drawBitmap(60, 120, 40, 40, charRun, i, BLACK, MAROON, RED, WHITE);
    }
  }

    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	9f 90       	pop	r9
    145e:	8f 90       	pop	r8
    1460:	7f 90       	pop	r7
    1462:	6f 90       	pop	r6
    1464:	5f 90       	pop	r5
    1466:	08 95       	ret

00001468 <_ZN3MCU7Setting9beginPortEab>:
  }

  else if (PCINTIndex <= 23)
  {
    PCINTIndex -= 16;
    PCMSK1 |= insertBit(PCINTIndex, HIGH);
    1468:	61 95       	neg	r22
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	39 f0       	breq	.+14     	; 0x147c <_ZN3MCU7Setting9beginPortEab+0x14>
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	41 f0       	breq	.+16     	; 0x1482 <_ZN3MCU7Setting9beginPortEab+0x1a>
    1472:	81 11       	cpse	r24, r1
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <_ZN3MCU7Setting9beginPortEab+0x1e>
    1476:	64 b9       	out	0x04, r22	; 4
    1478:	15 b8       	out	0x05, r1	; 5
    147a:	08 95       	ret
    147c:	67 b9       	out	0x07, r22	; 7
    147e:	18 b8       	out	0x08, r1	; 8
    1480:	08 95       	ret
    1482:	6a b9       	out	0x0a, r22	; 10
    1484:	1b b8       	out	0x0b, r1	; 11
    1486:	08 95       	ret

00001488 <_ZN3MCU7Setting10beginTimerEab>:
//----------------------------------------*/

void MCU::Setting::beginTimer(int8_t timerIndex, bool timerMode)
{

  switch (timerIndex)
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	99 f1       	breq	.+102    	; 0x14f2 <_ZN3MCU7Setting10beginTimerEab+0x6a>
    148c:	82 30       	cpi	r24, 0x02	; 2
    148e:	b1 f0       	breq	.+44     	; 0x14bc <_ZN3MCU7Setting10beginTimerEab+0x34>
    1490:	81 11       	cpse	r24, r1
    1492:	50 c0       	rjmp	.+160    	; 0x1534 <_ZN3MCU7Setting10beginTimerEab+0xac>
  {
    // TIMER INTERRUPT 0, 2 (8 BIT)
  case 0:
    if (timerMode == OVF)
    1494:	61 11       	cpse	r22, r1
    1496:	08 c0       	rjmp	.+16     	; 0x14a8 <_ZN3MCU7Setting10beginTimerEab+0x20>
    {
      TIMSK0 = 0x01;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

      TCCR0A = 0x00;    // 1024 Prescaler, Normal Mode
    149e:	14 bc       	out	0x24, r1	; 36
      TCCR0B = 0x05;
    14a0:	85 e0       	ldi	r24, 0x05	; 5
    14a2:	85 bd       	out	0x25, r24	; 37
      TCNT0 = 0x00;     // Start Counting 0x00
    14a4:	16 bc       	out	0x26, r1	; 38
    14a6:	08 95       	ret
    }

    else
    {
      TIMSK0 = 0x02;
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

      TCCR0A = 0x02;    // 1024 Prescaler, CTC Mode
    14ae:	84 bd       	out	0x24, r24	; 36
      TCCR0B = 0x05;
    14b0:	85 e0       	ldi	r24, 0x05	; 5
    14b2:	85 bd       	out	0x25, r24	; 37
      TCNT0 = 0x00;     // Start Counting 0x00
    14b4:	16 bc       	out	0x26, r1	; 38

      OCR0A = _OCR0A;
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	87 bd       	out	0x27, r24	; 39
    14ba:	08 95       	ret
    }

    break;

  case 2:
    if (timerMode == OVF)
    14bc:	61 11       	cpse	r22, r1
    14be:	0b c0       	rjmp	.+22     	; 0x14d6 <_ZN3MCU7Setting10beginTimerEab+0x4e>
    {
      TIMSK2 = 0x01;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>

      TCCR2A = 0x00;    // 1024 Prescaler, Normal Mode
    14c6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      TCCR2B = 0x04;
    14ca:	84 e0       	ldi	r24, 0x04	; 4
    14cc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
      TCNT2 = 0x00;     // Start Counting 0x00
    14d0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    14d4:	08 95       	ret
    }

    else
    {
      TIMSK2 = 0x02;
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>

      TCCR2A = 0x02;    // 1024 Prescaler, CTC Mode
    14dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      TCCR2B = 0x04;
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
      TCNT2 = 0x00;     // Start Counting 0x00
    14e6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

      OCR2A = _OCR2A;
    14ea:	89 ef       	ldi	r24, 0xF9	; 249
    14ec:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    14f0:	08 95       	ret

    break;

    // TIMER INTERRUPT 1 (16 BIT)
  case 1:
    if (timerMode == OVF)
    14f2:	61 11       	cpse	r22, r1
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <_ZN3MCU7Setting10beginTimerEab+0x88>
    {
      TIMSK1 = 0x01;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

      TCCR1A = 0x00;    // 1024 Prescaler, Normal Mode
    14fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
      TCCR1B = 0x05;
    1500:	85 e0       	ldi	r24, 0x05	; 5
    1502:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
      TCNT1H = 0x00;    // Start Counting 0x0000
    1506:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
      TCNT1L = 0x00;
    150a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    150e:	08 95       	ret
    }

    else
    {
      TIMSK1 = 0x02;
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

      TCCR1A = 0x00;    // 1024 Prescaler, CTC Mode
    1516:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
      TCCR1B = 0x0D;
    151a:	8d e0       	ldi	r24, 0x0D	; 13
    151c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
      TCNT1H = 0x00;    // Start Counting 0x0000
    1520:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
      TCNT1L = 0x00;
    1524:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

      OCR1AH = _OCR1AH;
    1528:	8d e3       	ldi	r24, 0x3D	; 61
    152a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
      OCR1AL = _OCR1AL;
    152e:	88 e0       	ldi	r24, 0x08	; 8
    1530:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1534:	08 95       	ret

00001536 <_ZN3MCU7Setting8beginPWMEab>:
//----------------------------------------*/

void MCU::Setting::beginPWM(int8_t PWMIndex, bool PWMMode)
{

  switch (PWMIndex)
    1536:	85 30       	cpi	r24, 0x05	; 5
    1538:	09 f4       	brne	.+2      	; 0x153c <_ZN3MCU7Setting8beginPWMEab+0x6>
    153a:	5d c0       	rjmp	.+186    	; 0x15f6 <_ZN3MCU7Setting8beginPWMEab+0xc0>
    153c:	2c f4       	brge	.+10     	; 0x1548 <_ZN3MCU7Setting8beginPWMEab+0x12>
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	51 f0       	breq	.+20     	; 0x1556 <_ZN3MCU7Setting8beginPWMEab+0x20>
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	c1 f0       	breq	.+48     	; 0x1576 <_ZN3MCU7Setting8beginPWMEab+0x40>
    1546:	08 95       	ret
    1548:	87 30       	cpi	r24, 0x07	; 7
    154a:	29 f1       	breq	.+74     	; 0x1596 <_ZN3MCU7Setting8beginPWMEab+0x60>
    154c:	0c f4       	brge	.+2      	; 0x1550 <_ZN3MCU7Setting8beginPWMEab+0x1a>
    154e:	6f c0       	rjmp	.+222    	; 0x162e <_ZN3MCU7Setting8beginPWMEab+0xf8>
    1550:	88 30       	cpi	r24, 0x08	; 8
    1552:	c9 f1       	breq	.+114    	; 0x15c6 <_ZN3MCU7Setting8beginPWMEab+0x90>
    1554:	08 95       	ret
  {
    // TIMER PWM 0, 2 (8 BIT)
  case OC0A:
    if (PWMMode == CORRECT)
    1556:	61 11       	cpse	r22, r1
    1558:	07 c0       	rjmp	.+14     	; 0x1568 <_ZN3MCU7Setting8beginPWMEab+0x32>
    {
      TCCR0A |= 0x01 | (1 << COM0A0);   // 256 Prescaler, Phase Correct PWM
    155a:	84 b5       	in	r24, 0x24	; 36
    155c:	81 64       	ori	r24, 0x41	; 65
    155e:	84 bd       	out	0x24, r24	; 36
      TCCR0B = 0x0C;                    // Phase Correct PWM to OCR0A
    1560:	8c e0       	ldi	r24, 0x0C	; 12
    1562:	85 bd       	out	0x25, r24	; 37
      TCNT0 = 0x00;                     // Start Counting 0x00
    1564:	16 bc       	out	0x26, r1	; 38
    1566:	08 95       	ret
    }

    else
    {
      TCCR0A |= 0x03 | (1 << COM0A0);   // 256 Prescaler, Fast PWM Mode
    1568:	84 b5       	in	r24, 0x24	; 36
    156a:	83 64       	ori	r24, 0x43	; 67
    156c:	84 bd       	out	0x24, r24	; 36
      TCCR0B = 0x0C;                    // Fast PWM to OCR0A
    156e:	8c e0       	ldi	r24, 0x0C	; 12
    1570:	85 bd       	out	0x25, r24	; 37
      TCNT0 = 0x00;                     // Start Counting 0x00
    1572:	16 bc       	out	0x26, r1	; 38
    1574:	08 95       	ret
    }

    break;

  case OC0B:
    if (PWMMode == CORRECT)
    1576:	61 11       	cpse	r22, r1
    1578:	07 c0       	rjmp	.+14     	; 0x1588 <_ZN3MCU7Setting8beginPWMEab+0x52>
    {
      TCCR0A |= 0x01 | (1 << COM0B0);   // 256 Prescaler, Phase Correct PWM
    157a:	84 b5       	in	r24, 0x24	; 36
    157c:	81 61       	ori	r24, 0x11	; 17
    157e:	84 bd       	out	0x24, r24	; 36
      TCCR0B = 0x0C;                    // Phase Correct PWM to OCR0A
    1580:	8c e0       	ldi	r24, 0x0C	; 12
    1582:	85 bd       	out	0x25, r24	; 37
      TCNT0 = 0x00;                     // Start Counting 0x00
    1584:	16 bc       	out	0x26, r1	; 38
    1586:	08 95       	ret
    }

    else
    {
      TCCR0A |= 0x03 | (1 << COM0B0);   // 256 Prescaler, Fast PWM Mode
    1588:	84 b5       	in	r24, 0x24	; 36
    158a:	83 61       	ori	r24, 0x13	; 19
    158c:	84 bd       	out	0x24, r24	; 36
      TCCR0B = 0x0C;                    // Fast PWM to OCR0A
    158e:	8c e0       	ldi	r24, 0x0C	; 12
    1590:	85 bd       	out	0x25, r24	; 37
      TCNT0 = 0x00;                     // Start Counting 0x00
    1592:	16 bc       	out	0x26, r1	; 38
    1594:	08 95       	ret
    }

    break;

  case OC2A:
    if (PWMMode == CORRECT)
    1596:	61 11       	cpse	r22, r1
    1598:	0b c0       	rjmp	.+22     	; 0x15b0 <_ZN3MCU7Setting8beginPWMEab+0x7a>
    {
      TCCR2A |= 0x01 | (1 << COM2A1);   // 256 Prescaler
    159a:	e0 eb       	ldi	r30, 0xB0	; 176
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	81 68       	ori	r24, 0x81	; 129
    15a2:	80 83       	st	Z, r24
      TCCR2B = 0x06;                    // Phase Correct PWM to 255
    15a4:	86 e0       	ldi	r24, 0x06	; 6
    15a6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
      TCNT2 = 0x00;                     // Start Counting 0x00
    15aa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    15ae:	08 95       	ret
    }

    else
    {
      TCCR2A |= 0x03 | (1 << COM2A1);   // 256 Prescaler
    15b0:	e0 eb       	ldi	r30, 0xB0	; 176
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	83 68       	ori	r24, 0x83	; 131
    15b8:	80 83       	st	Z, r24
      TCCR2B = 0x06;                    // Fast PWM to 255
    15ba:	86 e0       	ldi	r24, 0x06	; 6
    15bc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
      TCNT2 = 0x00;                     // Start Counting 0x00
    15c0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    15c4:	08 95       	ret
    }

    break;

  case OC2B:
    if (PWMMode == CORRECT)
    15c6:	61 11       	cpse	r22, r1
    15c8:	0b c0       	rjmp	.+22     	; 0x15e0 <_ZN3MCU7Setting8beginPWMEab+0xaa>
    {
      TCCR2A |= 0x01 | (1 << COM2B1);   // 256 Prescaler
    15ca:	e0 eb       	ldi	r30, 0xB0	; 176
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	81 62       	ori	r24, 0x21	; 33
    15d2:	80 83       	st	Z, r24
      TCCR2B = 0x06;                    // Phase Correct PWM to 255
    15d4:	86 e0       	ldi	r24, 0x06	; 6
    15d6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
      TCNT2 = 0x00;                     // Start Counting 0x00
    15da:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    15de:	08 95       	ret
    }

    else
    {
      TCCR2A |= 0x03 | (1 << COM2B1);   // 256 Prescaler
    15e0:	e0 eb       	ldi	r30, 0xB0	; 176
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	83 62       	ori	r24, 0x23	; 35
    15e8:	80 83       	st	Z, r24
      TCCR2B = 0x06;                    // Fast PWM to 255
    15ea:	86 e0       	ldi	r24, 0x06	; 6
    15ec:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
      TCNT2 = 0x00;                     // Start Counting 0x00
    15f0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    15f4:	08 95       	ret

    break;

    // TIMER PWM 1 (10 BIT)
  case OC1A:
    if (PWMMode == CORRECT)
    15f6:	61 11       	cpse	r22, r1
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <_ZN3MCU7Setting8beginPWMEab+0xde>
    {
      TCCR1A |= 0x03 | (1 << COM1A1);   // 256 Prescaler
    15fa:	e0 e8       	ldi	r30, 0x80	; 128
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	83 68       	ori	r24, 0x83	; 131
    1602:	80 83       	st	Z, r24
      TCCR1B = 0x04;                    // Phase Correct PWM to 1023
    1604:	84 e0       	ldi	r24, 0x04	; 4
    1606:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
      TCNT1H = 0x00;                    // Start Counting 0x0000
    160a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
      TCNT1L = 0x00;
    160e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1612:	08 95       	ret
    }

    else
    {
      TCCR1A |= 0x03 | (1 << COM1A1);   // 256 Prescaler
    1614:	e0 e8       	ldi	r30, 0x80	; 128
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	83 68       	ori	r24, 0x83	; 131
    161c:	80 83       	st	Z, r24
      TCCR1B = 0x0C;                    // Fast PWM to 1023
    161e:	8c e0       	ldi	r24, 0x0C	; 12
    1620:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
      TCNT1H = 0x00;                    // Start Counting 0x0000
    1624:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
      TCNT1L = 0x00;
    1628:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    162c:	08 95       	ret
    }

    break;

  case OC1B:
    if (PWMMode == CORRECT)
    162e:	61 11       	cpse	r22, r1
    1630:	0d c0       	rjmp	.+26     	; 0x164c <_ZN3MCU7Setting8beginPWMEab+0x116>
    {
      TCCR1A |= 0x03 | (1 << COM1B1);   // 256 Prescaler
    1632:	e0 e8       	ldi	r30, 0x80	; 128
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	83 62       	ori	r24, 0x23	; 35
    163a:	80 83       	st	Z, r24
      TCCR1B = 0x04;                    // Phase Correct PWM to 1023
    163c:	84 e0       	ldi	r24, 0x04	; 4
    163e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
      TCNT1H = 0x00;                    // Start Counting 0x0000
    1642:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
      TCNT1L = 0x00;
    1646:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    164a:	08 95       	ret
    }

    else
    {
      TCCR1A |= 0x03 | (1 << COM1B1);   // 256 Prescaler
    164c:	e0 e8       	ldi	r30, 0x80	; 128
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	83 62       	ori	r24, 0x23	; 35
    1654:	80 83       	st	Z, r24
      TCCR1B = 0x0C;                    // Fast PWM to 1023
    1656:	8c e0       	ldi	r24, 0x0C	; 12
    1658:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
      TCNT1H = 0x00;                    // Start Counting 0x0000
    165c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
      TCNT1L = 0x00;
    1660:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1664:	08 95       	ret

00001666 <_ZN3MCU7Setting8beginSPIEv>:
            Begin SPI Protocol
//----------------------------------------*/

void MCU::Setting::beginSPI(void)
{
  SPCR = (1 << SPE) | (1 << MSTR);
    1666:	80 e5       	ldi	r24, 0x50	; 80
    1668:	8c bd       	out	0x2c, r24	; 44
  SPSR = (1 << SPI2X);
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8d bd       	out	0x2d, r24	; 45
    166e:	08 95       	ret

00001670 <_ZN3SPI7sendBitEh>:
              Send Serial Bit
//----------------------------------------*/

void SPI::sendBit(uint8_t bitValue)
{
  SPDR = bitValue;
    1670:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & 0x80));
    1672:	0d b4       	in	r0, 0x2d	; 45
    1674:	07 fe       	sbrs	r0, 7
    1676:	fd cf       	rjmp	.-6      	; 0x1672 <_ZN3SPI7sendBitEh+0x2>
}
    1678:	08 95       	ret

0000167a <_ZN3SPI13exportCommandEh>:
              Export Command
//----------------------------------------*/

void SPI::exportCommand(uint8_t commandValue)
{
  RS_LOW;
    167a:	2a 98       	cbi	0x05, 2	; 5
  CS_LOW;
    167c:	28 98       	cbi	0x05, 0	; 5

  sendBit(commandValue);
    167e:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN3SPI7sendBitEh>

  CS_HIGH;
    1682:	28 9a       	sbi	0x05, 0	; 5
    1684:	08 95       	ret

00001686 <_ZN3SPI10exportDataEh>:
              Export Data
//----------------------------------------*/

void SPI::exportData(uint8_t dataValue)
{
  RS_HIGH;
    1686:	2a 9a       	sbi	0x05, 2	; 5
  CS_LOW;
    1688:	28 98       	cbi	0x05, 0	; 5

  sendBit(dataValue);
    168a:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN3SPI7sendBitEh>

  CS_HIGH;
    168e:	28 9a       	sbi	0x05, 0	; 5
    1690:	08 95       	ret

00001692 <_ZN3SPI14exportLongDataEj>:
/*----------------------------------------//
            Export Long Data
//----------------------------------------*/

void SPI::exportLongData(uint16_t longDataValue)
{
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	ec 01       	movw	r28, r24
    169a:	16 2f       	mov	r17, r22
    169c:	67 2f       	mov	r22, r23
  RS_HIGH;
    169e:	2a 9a       	sbi	0x05, 2	; 5
  CS_LOW;
    16a0:	28 98       	cbi	0x05, 0	; 5

  sendBit(longDataValue >> 8);
    16a2:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN3SPI7sendBitEh>
  sendBit(longDataValue & 0xFF);
    16a6:	61 2f       	mov	r22, r17
    16a8:	ce 01       	movw	r24, r28
    16aa:	0e 94 38 0b 	call	0x1670	; 0x1670 <_ZN3SPI7sendBitEh>

  CS_HIGH;
    16ae:	28 9a       	sbi	0x05, 0	; 5
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	08 95       	ret

000016b8 <_ZN3TFT5beginEv>:
/*----------------------------------------//
              Begin TFT LCD
//----------------------------------------*/

void TFT::begin(void)
{
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	ec 01       	movw	r28, r24
  CS_HIGH;
    16be:	28 9a       	sbi	0x05, 0	; 5
  RST_LOW;
    16c0:	29 98       	cbi	0x05, 1	; 5
    16c2:	2f ef       	ldi	r18, 0xFF	; 255
    16c4:	89 ef       	ldi	r24, 0xF9	; 249
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	21 50       	subi	r18, 0x01	; 1
    16ca:	80 40       	sbci	r24, 0x00	; 0
    16cc:	90 40       	sbci	r25, 0x00	; 0
    16ce:	e1 f7       	brne	.-8      	; 0x16c8 <_ZN3TFT5beginEv+0x10>
    16d0:	00 c0       	rjmp	.+0      	; 0x16d2 <_ZN3TFT5beginEv+0x1a>
    16d2:	00 00       	nop
  _delay_ms(20);
  RST_HIGH;
    16d4:	29 9a       	sbi	0x05, 1	; 5
    16d6:	2f ef       	ldi	r18, 0xFF	; 255
    16d8:	89 e6       	ldi	r24, 0x69	; 105
    16da:	98 e1       	ldi	r25, 0x18	; 24
    16dc:	21 50       	subi	r18, 0x01	; 1
    16de:	80 40       	sbci	r24, 0x00	; 0
    16e0:	90 40       	sbci	r25, 0x00	; 0
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <_ZN3TFT5beginEv+0x24>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <_ZN3TFT5beginEv+0x2e>
    16e6:	00 00       	nop
  _delay_ms(500);

  exportCommand(0x01);  // Software Reset (01h)
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	ce 01       	movw	r24, r28
    16ec:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>
    16f0:	2f ef       	ldi	r18, 0xFF	; 255
    16f2:	89 ef       	ldi	r24, 0xF9	; 249
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	21 50       	subi	r18, 0x01	; 1
    16f8:	80 40       	sbci	r24, 0x00	; 0
    16fa:	90 40       	sbci	r25, 0x00	; 0
    16fc:	e1 f7       	brne	.-8      	; 0x16f6 <_ZN3TFT5beginEv+0x3e>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <_ZN3TFT5beginEv+0x48>
    1700:	00 00       	nop
  _delay_ms(20);

  exportCommand(0xC0);  // Power Control 1 (C0h)
    1702:	60 ec       	ldi	r22, 0xC0	; 192
    1704:	ce 01       	movw	r24, r28
    1706:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>
  exportData(0x2B);     // VRH [5:0], GVDD 5.00V
    170a:	6b e2       	ldi	r22, 0x2B	; 43
    170c:	ce 01       	movw	r24, r28
    170e:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN3SPI10exportDataEh>

  exportCommand(0x36);  // Memory Access Control (36h)
    1712:	66 e3       	ldi	r22, 0x36	; 54
    1714:	ce 01       	movw	r24, r28
    1716:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>
  exportData(0x48);     // Column Address Order, RGB-BGR Order
    171a:	68 e4       	ldi	r22, 0x48	; 72
    171c:	ce 01       	movw	r24, r28
    171e:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN3SPI10exportDataEh>

  exportCommand(0x3A);  // COLMOD: Pixel Format Set (3Ah)
    1722:	6a e3       	ldi	r22, 0x3A	; 58
    1724:	ce 01       	movw	r24, r28
    1726:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>
  exportData(0x55);     // DBI [2:0], Format 16 bits / pixel
    172a:	65 e5       	ldi	r22, 0x55	; 85
    172c:	ce 01       	movw	r24, r28
    172e:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN3SPI10exportDataEh>

  exportCommand(0x20);  // Display Inversion OFF (20h)
    1732:	60 e2       	ldi	r22, 0x20	; 32
    1734:	ce 01       	movw	r24, r28
    1736:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>

  exportCommand(0x11);  // Sleep Out (11h)
    173a:	61 e1       	ldi	r22, 0x11	; 17
    173c:	ce 01       	movw	r24, r28
    173e:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>
    1742:	2f ef       	ldi	r18, 0xFF	; 255
    1744:	8d ee       	ldi	r24, 0xED	; 237
    1746:	92 e0       	ldi	r25, 0x02	; 2
    1748:	21 50       	subi	r18, 0x01	; 1
    174a:	80 40       	sbci	r24, 0x00	; 0
    174c:	90 40       	sbci	r25, 0x00	; 0
    174e:	e1 f7       	brne	.-8      	; 0x1748 <_ZN3TFT5beginEv+0x90>
    1750:	00 c0       	rjmp	.+0      	; 0x1752 <_ZN3TFT5beginEv+0x9a>
    1752:	00 00       	nop
  _delay_ms(60);

  exportCommand(0x29);  // Display ON (29h)
    1754:	69 e2       	ldi	r22, 0x29	; 41
    1756:	ce 01       	movw	r24, r28
    1758:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>
}
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <_ZN3TFT11setRotationEa>:
/*----------------------------------------//
              Set Rotation
//----------------------------------------*/

void TFT::setRotation(int8_t rotation)
{
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	ec 01       	movw	r28, r24
    176a:	16 2f       	mov	r17, r22
  
  int16_t temp;

  exportCommand(0x36);  // Memory Access Control (36h)
    176c:	66 e3       	ldi	r22, 0x36	; 54
    176e:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>

  switch (rotation)
    1772:	11 30       	cpi	r17, 0x01	; 1
    1774:	89 f0       	breq	.+34     	; 0x1798 <_ZN3TFT11setRotationEa+0x36>
    1776:	12 30       	cpi	r17, 0x02	; 2
    1778:	a1 f0       	breq	.+40     	; 0x17a2 <_ZN3TFT11setRotationEa+0x40>
    177a:	11 11       	cpse	r17, r1
    177c:	16 c0       	rjmp	.+44     	; 0x17aa <_ZN3TFT11setRotationEa+0x48>
  {
  case 0:
    exportData(0x28);   // Row / Column Exchange, RGB-BGR Order
    177e:	68 e2       	ldi	r22, 0x28	; 40
    1780:	ce 01       	movw	r24, r28
    1782:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN3SPI10exportDataEh>
    temp = m_Width;
    1786:	88 81       	ld	r24, Y
    1788:	99 81       	ldd	r25, Y+1	; 0x01
    m_Width = m_Height;
    178a:	2a 81       	ldd	r18, Y+2	; 0x02
    178c:	3b 81       	ldd	r19, Y+3	; 0x03
    178e:	39 83       	std	Y+1, r19	; 0x01
    1790:	28 83       	st	Y, r18
    m_Height = temp;
    1792:	9b 83       	std	Y+3, r25	; 0x03
    1794:	8a 83       	std	Y+2, r24	; 0x02
    break;
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <_ZN3TFT11setRotationEa+0x48>

  case 1:
    exportData(0x48);   // Column Address Order, RGB-BGR Order
    1798:	68 e4       	ldi	r22, 0x48	; 72
    179a:	ce 01       	movw	r24, r28
    179c:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN3SPI10exportDataEh>
    break;
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <_ZN3TFT11setRotationEa+0x48>

  case 2:
    exportData(0x88);   // Row Address Order, RGB-BGR Order
    17a2:	68 e8       	ldi	r22, 0x88	; 136
    17a4:	ce 01       	movw	r24, r28
    17a6:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN3SPI10exportDataEh>

  default:
    break;
  }

}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	08 95       	ret

000017b2 <_ZN3TFT10setAddressEiiii>:
/*----------------------------------------//
              Set Address
//----------------------------------------*/

void TFT::setAddress(int16_t xPos, int16_t yPos, int16_t width, int16_t height)
{
    17b2:	af 92       	push	r10
    17b4:	bf 92       	push	r11
    17b6:	cf 92       	push	r12
    17b8:	df 92       	push	r13
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
    17c8:	5b 01       	movw	r10, r22
    17ca:	7a 01       	movw	r14, r20
    17cc:	69 01       	movw	r12, r18
  exportCommand(0x2A);    // Column Address Set (2Ah)
    17ce:	6a e2       	ldi	r22, 0x2A	; 42
    17d0:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>

  exportLongData(xPos);   // xPosition
    17d4:	b5 01       	movw	r22, r10
    17d6:	ce 01       	movw	r24, r28
    17d8:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
  exportLongData(width);
    17dc:	b6 01       	movw	r22, r12
    17de:	ce 01       	movw	r24, r28
    17e0:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>

  exportCommand(0x2B);    // Page Address Set (2Bh)
    17e4:	6b e2       	ldi	r22, 0x2B	; 43
    17e6:	ce 01       	movw	r24, r28
    17e8:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>

  exportLongData(yPos);   // yPosition
    17ec:	b7 01       	movw	r22, r14
    17ee:	ce 01       	movw	r24, r28
    17f0:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
  exportLongData(height);
    17f4:	b8 01       	movw	r22, r16
    17f6:	ce 01       	movw	r24, r28
    17f8:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>

  exportCommand(0x2C);    // Memory Write (2Ch)
    17fc:	6c e2       	ldi	r22, 0x2C	; 44
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN3SPI13exportCommandEh>
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	bf 90       	pop	r11
    1816:	af 90       	pop	r10
    1818:	08 95       	ret

0000181a <_ZN3TFT10fillScreenEj>:
/*----------------------------------------//
              Fill Screen
//----------------------------------------*/

void TFT::fillScreen(uint16_t colorValue)
{
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	7c 01       	movw	r14, r24
    182c:	6b 01       	movw	r12, r22

  setAddress(0, 0, (m_Width - 1), (m_Height - 1));
    182e:	fc 01       	movw	r30, r24
    1830:	02 81       	ldd	r16, Z+2	; 0x02
    1832:	13 81       	ldd	r17, Z+3	; 0x03
    1834:	01 50       	subi	r16, 0x01	; 1
    1836:	11 09       	sbc	r17, r1
    1838:	20 81       	ld	r18, Z
    183a:	31 81       	ldd	r19, Z+1	; 0x01
    183c:	21 50       	subi	r18, 0x01	; 1
    183e:	31 09       	sbc	r19, r1
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN3TFT10setAddressEiiii>

  for (int i=0; i<m_Height; i++)
    184c:	f7 01       	movw	r30, r14
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	18 16       	cp	r1, r24
    1854:	19 06       	cpc	r1, r25
    1856:	ec f4       	brge	.+58     	; 0x1892 <_ZN3TFT10fillScreenEj+0x78>
    1858:	00 e0       	ldi	r16, 0x00	; 0
    185a:	10 e0       	ldi	r17, 0x00	; 0
  {
    for (int j=0; j<m_Width; j++)
    185c:	f7 01       	movw	r30, r14
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	18 16       	cp	r1, r24
    1864:	19 06       	cpc	r1, r25
    1866:	6c f4       	brge	.+26     	; 0x1882 <_ZN3TFT10fillScreenEj+0x68>
    1868:	c0 e0       	ldi	r28, 0x00	; 0
    186a:	d0 e0       	ldi	r29, 0x00	; 0
    {
      exportLongData(colorValue);
    186c:	b6 01       	movw	r22, r12
    186e:	c7 01       	movw	r24, r14
    1870:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>

  setAddress(0, 0, (m_Width - 1), (m_Height - 1));

  for (int i=0; i<m_Height; i++)
  {
    for (int j=0; j<m_Width; j++)
    1874:	21 96       	adiw	r28, 0x01	; 1
    1876:	f7 01       	movw	r30, r14
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	c8 17       	cp	r28, r24
    187e:	d9 07       	cpc	r29, r25
    1880:	ac f3       	brlt	.-22     	; 0x186c <_ZN3TFT10fillScreenEj+0x52>
void TFT::fillScreen(uint16_t colorValue)
{

  setAddress(0, 0, (m_Width - 1), (m_Height - 1));

  for (int i=0; i<m_Height; i++)
    1882:	0f 5f       	subi	r16, 0xFF	; 255
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	f7 01       	movw	r30, r14
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	08 17       	cp	r16, r24
    188e:	19 07       	cpc	r17, r25
    1890:	2c f3       	brlt	.-54     	; 0x185c <_ZN3TFT10fillScreenEj+0x42>
    {
      exportLongData(colorValue);
    }
  }

}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	08 95       	ret

000018a4 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj>:
                Draw Bitmap
//----------------------------------------*/

void TFT::drawBitmapOnce(int16_t xPos, int16_t yPos, int16_t width, int16_t height, const uint8_t *bitmap,
    uint16_t color0Bit, uint16_t color1Bit, uint16_t color2Bit, uint16_t color3Bit)
{
    18a4:	2f 92       	push	r2
    18a6:	3f 92       	push	r3
    18a8:	4f 92       	push	r4
    18aa:	5f 92       	push	r5
    18ac:	6f 92       	push	r6
    18ae:	7f 92       	push	r7
    18b0:	8f 92       	push	r8
    18b2:	9f 92       	push	r9
    18b4:	af 92       	push	r10
    18b6:	bf 92       	push	r11
    18b8:	cf 92       	push	r12
    18ba:	df 92       	push	r13
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	2a 97       	sbiw	r28, 0x0a	; 10
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	3c 01       	movw	r6, r24
    18da:	29 01       	movw	r4, r18
    18dc:	18 87       	std	Y+8, r17	; 0x08
    18de:	0f 83       	std	Y+7, r16	; 0x07
    18e0:	16 01       	movw	r2, r12
    18e2:	ba 82       	std	Y+2, r11	; 0x02
    18e4:	a9 82       	std	Y+1, r10	; 0x01
    18e6:	9c 82       	std	Y+4, r9	; 0x04
    18e8:	8b 82       	std	Y+3, r8	; 0x03

  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));
    18ea:	04 0f       	add	r16, r20
    18ec:	15 1f       	adc	r17, r21
    18ee:	01 50       	subi	r16, 0x01	; 1
    18f0:	11 09       	sbc	r17, r1
    18f2:	9b 01       	movw	r18, r22
    18f4:	24 0d       	add	r18, r4
    18f6:	35 1d       	adc	r19, r5
    18f8:	21 50       	subi	r18, 0x01	; 1
    18fa:	31 09       	sbc	r19, r1
    18fc:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN3TFT10setAddressEiiii>

  for (int i=0; i<height; i++)
    1900:	2f 81       	ldd	r18, Y+7	; 0x07
    1902:	38 85       	ldd	r19, Y+8	; 0x08
    1904:	12 16       	cp	r1, r18
    1906:	13 06       	cpc	r1, r19
    1908:	0c f0       	brlt	.+2      	; 0x190c <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0x68>
    190a:	5b c0       	rjmp	.+182    	; 0x19c2 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0x11e>
  {
    for (int j=0; j<(width / 4); j++)
    190c:	c2 01       	movw	r24, r4
    190e:	99 23       	and	r25, r25
    1910:	0c f4       	brge	.+2      	; 0x1914 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0x70>
    1912:	03 96       	adiw	r24, 0x03	; 3
    1914:	fc 01       	movw	r30, r24
    1916:	f5 95       	asr	r31
    1918:	e7 95       	ror	r30
    191a:	f5 95       	asr	r31
    191c:	e7 95       	ror	r30
    191e:	fa 87       	std	Y+10, r31	; 0x0a
    1920:	e9 87       	std	Y+9, r30	; 0x09
    1922:	fe 83       	std	Y+6, r31	; 0x06
    1924:	ed 83       	std	Y+5, r30	; 0x05
    1926:	ae 2c       	mov	r10, r14
    1928:	bf 2c       	mov	r11, r15
    192a:	41 2c       	mov	r4, r1
    192c:	51 2c       	mov	r5, r1
    192e:	29 85       	ldd	r18, Y+9	; 0x09
    1930:	3a 85       	ldd	r19, Y+10	; 0x0a
    1932:	12 16       	cp	r1, r18
    1934:	13 06       	cpc	r1, r19
    1936:	c4 f5       	brge	.+112    	; 0x19a8 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0x104>
    1938:	ed 80       	ldd	r14, Y+5	; 0x05
    193a:	fe 80       	ldd	r15, Y+6	; 0x06
    193c:	ea 0c       	add	r14, r10
    193e:	fb 1c       	adc	r15, r11
    1940:	85 01       	movw	r16, r10
    {

      data = pgm_read_byte(&bitmap[i * (width / 4) + j]);
    1942:	f8 01       	movw	r30, r16
    1944:	94 90       	lpm	r9, Z
    1946:	68 94       	set
    1948:	cc 24       	eor	r12, r12
    194a:	c2 f8       	bld	r12, 2
    194c:	d1 2c       	mov	r13, r1

      for (int k=0; k<4; k++)
      {
        temp = data >> 6;
    194e:	89 2d       	mov	r24, r9
    1950:	82 95       	swap	r24
    1952:	86 95       	lsr	r24
    1954:	86 95       	lsr	r24
    1956:	83 70       	andi	r24, 0x03	; 3

        if (temp == 0x00)       //1Pixel = 00
    1958:	29 f4       	brne	.+10     	; 0x1964 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0xc0>
        {
          exportLongData(color0Bit);
    195a:	b1 01       	movw	r22, r2
    195c:	c3 01       	movw	r24, r6
    195e:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1962:	17 c0       	rjmp	.+46     	; 0x1992 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0xee>
        }

        else if (temp == 0x01)  //1Pixel = 01
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	31 f4       	brne	.+12     	; 0x1974 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0xd0>
        {
          exportLongData(color1Bit);
    1968:	69 81       	ldd	r22, Y+1	; 0x01
    196a:	7a 81       	ldd	r23, Y+2	; 0x02
    196c:	c3 01       	movw	r24, r6
    196e:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0xee>
        }

        else if (temp == 0x02)  //1Pixel = 10
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	31 f4       	brne	.+12     	; 0x1984 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0xe0>
        {
          exportLongData(color2Bit);
    1978:	6b 81       	ldd	r22, Y+3	; 0x03
    197a:	7c 81       	ldd	r23, Y+4	; 0x04
    197c:	c3 01       	movw	r24, r6
    197e:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1982:	07 c0       	rjmp	.+14     	; 0x1992 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0xee>
        }

        else if (temp == 0x03)  //1Pixel = 11
    1984:	83 30       	cpi	r24, 0x03	; 3
    1986:	29 f4       	brne	.+10     	; 0x1992 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0xee>
        {
          exportLongData(color3Bit);
    1988:	6f 8d       	ldd	r22, Y+31	; 0x1f
    198a:	78 a1       	ldd	r23, Y+32	; 0x20
    198c:	c3 01       	movw	r24, r6
    198e:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
        }

        data <<= 2;
    1992:	99 0c       	add	r9, r9
    1994:	99 0c       	add	r9, r9
    1996:	f1 e0       	ldi	r31, 0x01	; 1
    1998:	cf 1a       	sub	r12, r31
    199a:	d1 08       	sbc	r13, r1
    for (int j=0; j<(width / 4); j++)
    {

      data = pgm_read_byte(&bitmap[i * (width / 4) + j]);

      for (int k=0; k<4; k++)
    199c:	c1 f6       	brne	.-80     	; 0x194e <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0xaa>
    199e:	0f 5f       	subi	r16, 0xFF	; 255
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i=0; i<height; i++)
  {
    for (int j=0; j<(width / 4); j++)
    19a2:	e0 16       	cp	r14, r16
    19a4:	f1 06       	cpc	r15, r17
    19a6:	69 f6       	brne	.-102    	; 0x1942 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0x9e>
  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i=0; i<height; i++)
    19a8:	2f ef       	ldi	r18, 0xFF	; 255
    19aa:	42 1a       	sub	r4, r18
    19ac:	52 0a       	sbc	r5, r18
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	a8 0e       	add	r10, r24
    19b4:	b9 1e       	adc	r11, r25
    19b6:	ef 81       	ldd	r30, Y+7	; 0x07
    19b8:	f8 85       	ldd	r31, Y+8	; 0x08
    19ba:	e4 15       	cp	r30, r4
    19bc:	f5 05       	cpc	r31, r5
    19be:	09 f0       	breq	.+2      	; 0x19c2 <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0x11e>
    19c0:	b6 cf       	rjmp	.-148    	; 0x192e <_ZN3TFT14drawBitmapOnceEiiiiPKhjjjj+0x8a>
      }

    }
  }

}
    19c2:	2a 96       	adiw	r28, 0x0a	; 10
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	bf 90       	pop	r11
    19e0:	af 90       	pop	r10
    19e2:	9f 90       	pop	r9
    19e4:	8f 90       	pop	r8
    19e6:	7f 90       	pop	r7
    19e8:	6f 90       	pop	r6
    19ea:	5f 90       	pop	r5
    19ec:	4f 90       	pop	r4
    19ee:	3f 90       	pop	r3
    19f0:	2f 90       	pop	r2
    19f2:	08 95       	ret

000019f4 <_ZN3TFT10drawBitmapEiiiiPKhjjjj>:
            Draw Doubled Bitmap
//----------------------------------------*/

void TFT::drawBitmap(int16_t xPos, int16_t yPos, int16_t width, int16_t height, const uint8_t *bitmap,
    uint16_t color0Bit, uint16_t color1Bit, uint16_t color2Bit, uint16_t color3Bit)
{
    19f4:	2f 92       	push	r2
    19f6:	3f 92       	push	r3
    19f8:	4f 92       	push	r4
    19fa:	5f 92       	push	r5
    19fc:	6f 92       	push	r6
    19fe:	7f 92       	push	r7
    1a00:	8f 92       	push	r8
    1a02:	9f 92       	push	r9
    1a04:	af 92       	push	r10
    1a06:	bf 92       	push	r11
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	60 97       	sbiw	r28, 0x10	; 16
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	98 8b       	std	Y+16, r25	; 0x10
    1a2a:	8f 87       	std	Y+15, r24	; 0x0f
    1a2c:	29 01       	movw	r4, r18
    1a2e:	38 01       	movw	r6, r16
    1a30:	da 82       	std	Y+2, r13	; 0x02
    1a32:	c9 82       	std	Y+1, r12	; 0x01
    1a34:	ba 86       	std	Y+10, r11	; 0x0a
    1a36:	a9 86       	std	Y+9, r10	; 0x09
    1a38:	9c 86       	std	Y+12, r9	; 0x0c
    1a3a:	8b 86       	std	Y+11, r8	; 0x0b

  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));
    1a3c:	8a 01       	movw	r16, r20
    1a3e:	06 0d       	add	r16, r6
    1a40:	17 1d       	adc	r17, r7
    1a42:	01 50       	subi	r16, 0x01	; 1
    1a44:	11 09       	sbc	r17, r1
    1a46:	9b 01       	movw	r18, r22
    1a48:	24 0d       	add	r18, r4
    1a4a:	35 1d       	adc	r19, r5
    1a4c:	21 50       	subi	r18, 0x01	; 1
    1a4e:	31 09       	sbc	r19, r1
    1a50:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN3TFT10setAddressEiiii>

  for (int i=0; i<(height / 2); i++)
    1a54:	c3 01       	movw	r24, r6
    1a56:	99 23       	and	r25, r25
    1a58:	0c f4       	brge	.+2      	; 0x1a5c <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x68>
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	35 95       	asr	r19
    1a60:	27 95       	ror	r18
    1a62:	3e 87       	std	Y+14, r19	; 0x0e
    1a64:	2d 87       	std	Y+13, r18	; 0x0d
    1a66:	12 16       	cp	r1, r18
    1a68:	13 06       	cpc	r1, r19
    1a6a:	0c f0       	brlt	.+2      	; 0x1a6e <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x7a>
    1a6c:	7c c0       	rjmp	.+248    	; 0x1b66 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x172>
  {
    for (int j=0; j<2; j++)
    {
      for (int k=0; k<(width / 8); k++)
    1a6e:	c2 01       	movw	r24, r4
    1a70:	99 23       	and	r25, r25
    1a72:	0c f4       	brge	.+2      	; 0x1a76 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x82>
    1a74:	07 96       	adiw	r24, 0x07	; 7
    1a76:	fc 01       	movw	r30, r24
    1a78:	f5 95       	asr	r31
    1a7a:	e7 95       	ror	r30
    1a7c:	f5 95       	asr	r31
    1a7e:	e7 95       	ror	r30
    1a80:	f5 95       	asr	r31
    1a82:	e7 95       	ror	r30
    1a84:	fe 83       	std	Y+6, r31	; 0x06
    1a86:	ed 83       	std	Y+5, r30	; 0x05
    1a88:	f8 87       	std	Y+8, r31	; 0x08
    1a8a:	ef 83       	std	Y+7, r30	; 0x07
    1a8c:	6e 2c       	mov	r6, r14
    1a8e:	7f 2c       	mov	r7, r15
    1a90:	21 2c       	mov	r2, r1
    1a92:	31 2c       	mov	r3, r1
    1a94:	68 94       	set
    1a96:	aa 24       	eor	r10, r10
    1a98:	a1 f8       	bld	r10, 1
    1a9a:	b1 2c       	mov	r11, r1
    1a9c:	8f 80       	ldd	r8, Y+7	; 0x07
    1a9e:	98 84       	ldd	r9, Y+8	; 0x08
    1aa0:	86 0c       	add	r8, r6
    1aa2:	97 1c       	adc	r9, r7
    1aa4:	7c 82       	std	Y+4, r7	; 0x04
    1aa6:	6b 82       	std	Y+3, r6	; 0x03
    1aa8:	4f 84       	ldd	r4, Y+15	; 0x0f
    1aaa:	58 88       	ldd	r5, Y+16	; 0x10
    1aac:	2d 81       	ldd	r18, Y+5	; 0x05
    1aae:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab0:	12 16       	cp	r1, r18
    1ab2:	13 06       	cpc	r1, r19
    1ab4:	0c f0       	brlt	.+2      	; 0x1ab8 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xc4>
    1ab6:	43 c0       	rjmp	.+134    	; 0x1b3e <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x14a>
    1ab8:	eb 80       	ldd	r14, Y+3	; 0x03
    1aba:	fc 80       	ldd	r15, Y+4	; 0x04
      {

        data = pgm_read_byte(&bitmap[i * (width / 8) + k]);
    1abc:	f7 01       	movw	r30, r14
    1abe:	c4 90       	lpm	r12, Z
    1ac0:	68 94       	set
    1ac2:	66 24       	eor	r6, r6
    1ac4:	62 f8       	bld	r6, 2
    1ac6:	71 2c       	mov	r7, r1

        for (int l=0; l<4; l++)
        {
          temp = data >> 6;
    1ac8:	dc 2c       	mov	r13, r12
    1aca:	d6 94       	lsr	r13
    1acc:	d6 94       	lsr	r13
    1ace:	d6 94       	lsr	r13
    1ad0:	d6 94       	lsr	r13
    1ad2:	d6 94       	lsr	r13
    1ad4:	d6 94       	lsr	r13
    1ad6:	02 e0       	ldi	r16, 0x02	; 2
    1ad8:	10 e0       	ldi	r17, 0x00	; 0

          for (int m=0; m<2; m++)
          {

            if (temp == 0x00)       //1Pixel = 00
    1ada:	d1 10       	cpse	r13, r1
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xf6>
            {
              exportLongData(color0Bit);
    1ade:	69 81       	ldd	r22, Y+1	; 0x01
    1ae0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ae2:	c2 01       	movw	r24, r4
    1ae4:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1ae8:	1a c0       	rjmp	.+52     	; 0x1b1e <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x12a>
            }

            else if (temp == 0x01)  //1Pixel = 01
    1aea:	f1 e0       	ldi	r31, 0x01	; 1
    1aec:	df 12       	cpse	r13, r31
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x108>
            {
              exportLongData(color1Bit);
    1af0:	69 85       	ldd	r22, Y+9	; 0x09
    1af2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1af4:	c2 01       	movw	r24, r4
    1af6:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x12a>
            }

            else if (temp == 0x02)  //1Pixel = 10
    1afc:	22 e0       	ldi	r18, 0x02	; 2
    1afe:	d2 12       	cpse	r13, r18
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x11a>
            {
              exportLongData(color2Bit);
    1b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b06:	c2 01       	movw	r24, r4
    1b08:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1b0c:	08 c0       	rjmp	.+16     	; 0x1b1e <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x12a>
            }

            else if (temp == 0x03)  //1Pixel = 11
    1b0e:	33 e0       	ldi	r19, 0x03	; 3
    1b10:	d3 12       	cpse	r13, r19
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x12a>
            {
              exportLongData(color3Bit);
    1b14:	6d a1       	ldd	r22, Y+37	; 0x25
    1b16:	7e a1       	ldd	r23, Y+38	; 0x26
    1b18:	c2 01       	movw	r24, r4
    1b1a:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1b1e:	01 50       	subi	r16, 0x01	; 1
    1b20:	11 09       	sbc	r17, r1

        for (int l=0; l<4; l++)
        {
          temp = data >> 6;

          for (int m=0; m<2; m++)
    1b22:	d9 f6       	brne	.-74     	; 0x1ada <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xe6>
              exportLongData(color3Bit);
            }

          }

          data <<= 2;
    1b24:	cc 0c       	add	r12, r12
    1b26:	cc 0c       	add	r12, r12
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	68 1a       	sub	r6, r24
    1b2c:	71 08       	sbc	r7, r1
      for (int k=0; k<(width / 8); k++)
      {

        data = pgm_read_byte(&bitmap[i * (width / 8) + k]);

        for (int l=0; l<4; l++)
    1b2e:	61 f6       	brne	.-104    	; 0x1ac8 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xd4>
    1b30:	9f ef       	ldi	r25, 0xFF	; 255
    1b32:	e9 1a       	sub	r14, r25
    1b34:	f9 0a       	sbc	r15, r25

  for (int i=0; i<(height / 2); i++)
  {
    for (int j=0; j<2; j++)
    {
      for (int k=0; k<(width / 8); k++)
    1b36:	e8 14       	cp	r14, r8
    1b38:	f9 04       	cpc	r15, r9
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x14a>
    1b3c:	bf cf       	rjmp	.-130    	; 0x1abc <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xc8>
    1b3e:	e1 e0       	ldi	r30, 0x01	; 1
    1b40:	ae 1a       	sub	r10, r30
    1b42:	b1 08       	sbc	r11, r1

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i=0; i<(height / 2); i++)
  {
    for (int j=0; j<2; j++)
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x154>
    1b46:	b2 cf       	rjmp	.-156    	; 0x1aac <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xb8>
    1b48:	6b 80       	ldd	r6, Y+3	; 0x03
    1b4a:	7c 80       	ldd	r7, Y+4	; 0x04
  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i=0; i<(height / 2); i++)
    1b4c:	ff ef       	ldi	r31, 0xFF	; 255
    1b4e:	2f 1a       	sub	r2, r31
    1b50:	3f 0a       	sbc	r3, r31
    1b52:	2f 81       	ldd	r18, Y+7	; 0x07
    1b54:	38 85       	ldd	r19, Y+8	; 0x08
    1b56:	62 0e       	add	r6, r18
    1b58:	73 1e       	adc	r7, r19
    1b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5e:	28 16       	cp	r2, r24
    1b60:	39 06       	cpc	r3, r25
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x172>
    1b64:	97 cf       	rjmp	.-210    	; 0x1a94 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xa0>

      }
    }
  }

}
    1b66:	60 96       	adiw	r28, 0x10	; 16
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	9f 90       	pop	r9
    1b88:	8f 90       	pop	r8
    1b8a:	7f 90       	pop	r7
    1b8c:	6f 90       	pop	r6
    1b8e:	5f 90       	pop	r5
    1b90:	4f 90       	pop	r4
    1b92:	3f 90       	pop	r3
    1b94:	2f 90       	pop	r2
    1b96:	08 95       	ret

00001b98 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj>:
            Draw Doubled Bitmap
//----------------------------------------*/

void TFT::drawBitmap(int16_t xPos, int16_t yPos, int16_t width, int16_t height, const unsigned char (*bitmap)[100], int8_t tileSelection,
    uint16_t color0Bit, uint16_t color1Bit, uint16_t color2Bit, uint16_t color3Bit)
{
    1b98:	2f 92       	push	r2
    1b9a:	3f 92       	push	r3
    1b9c:	4f 92       	push	r4
    1b9e:	5f 92       	push	r5
    1ba0:	6f 92       	push	r6
    1ba2:	7f 92       	push	r7
    1ba4:	8f 92       	push	r8
    1ba6:	9f 92       	push	r9
    1ba8:	af 92       	push	r10
    1baa:	bf 92       	push	r11
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	2e 97       	sbiw	r28, 0x0e	; 14
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	9e 87       	std	Y+14, r25	; 0x0e
    1bce:	8d 87       	std	Y+13, r24	; 0x0d
    1bd0:	29 01       	movw	r4, r18
    1bd2:	38 01       	movw	r6, r16
    1bd4:	ba 82       	std	Y+2, r11	; 0x02
    1bd6:	a9 82       	std	Y+1, r10	; 0x01
    1bd8:	9a 86       	std	Y+10, r9	; 0x0a
    1bda:	89 86       	std	Y+9, r8	; 0x09

  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));
    1bdc:	8a 01       	movw	r16, r20
    1bde:	06 0d       	add	r16, r6
    1be0:	17 1d       	adc	r17, r7
    1be2:	01 50       	subi	r16, 0x01	; 1
    1be4:	11 09       	sbc	r17, r1
    1be6:	9b 01       	movw	r18, r22
    1be8:	24 0d       	add	r18, r4
    1bea:	35 1d       	adc	r19, r5
    1bec:	21 50       	subi	r18, 0x01	; 1
    1bee:	31 09       	sbc	r19, r1
    1bf0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZN3TFT10setAddressEiiii>

  for (int i=0; i<(height / 2); i++)
    1bf4:	c3 01       	movw	r24, r6
    1bf6:	99 23       	and	r25, r25
    1bf8:	0c f4       	brge	.+2      	; 0x1bfc <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x64>
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	9c 01       	movw	r18, r24
    1bfe:	35 95       	asr	r19
    1c00:	27 95       	ror	r18
    1c02:	3c 87       	std	Y+12, r19	; 0x0c
    1c04:	2b 87       	std	Y+11, r18	; 0x0b
    1c06:	12 16       	cp	r1, r18
    1c08:	13 06       	cpc	r1, r19
    1c0a:	0c f0       	brlt	.+2      	; 0x1c0e <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x76>
    1c0c:	81 c0       	rjmp	.+258    	; 0x1d10 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x178>
  {
    for (int j=0; j<2; j++)
    {
      for (int k=0; k<(width / 8); k++)
    1c0e:	c2 01       	movw	r24, r4
    1c10:	99 23       	and	r25, r25
    1c12:	0c f4       	brge	.+2      	; 0x1c16 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x7e>
    1c14:	07 96       	adiw	r24, 0x07	; 7
    1c16:	fc 01       	movw	r30, r24
    1c18:	f5 95       	asr	r31
    1c1a:	e7 95       	ror	r30
    1c1c:	f5 95       	asr	r31
    1c1e:	e7 95       	ror	r30
    1c20:	f5 95       	asr	r31
    1c22:	e7 95       	ror	r30
    1c24:	fe 83       	std	Y+6, r31	; 0x06
    1c26:	ed 83       	std	Y+5, r30	; 0x05
    1c28:	f8 87       	std	Y+8, r31	; 0x08
    1c2a:	ef 83       	std	Y+7, r30	; 0x07
    1c2c:	37 01       	movw	r6, r14
    1c2e:	fc 2d       	mov	r31, r12
    1c30:	24 e6       	ldi	r18, 0x64	; 100
    1c32:	f2 02       	muls	r31, r18
    1c34:	60 0c       	add	r6, r0
    1c36:	71 1c       	adc	r7, r1
    1c38:	11 24       	eor	r1, r1
      {

        data = pgm_read_byte(&bitmap[tileSelection][i * (width / 8) + k]);
    1c3a:	21 2c       	mov	r2, r1
    1c3c:	31 2c       	mov	r3, r1
    1c3e:	68 94       	set
    1c40:	aa 24       	eor	r10, r10
    1c42:	a1 f8       	bld	r10, 1
    1c44:	b1 2c       	mov	r11, r1
    1c46:	8f 80       	ldd	r8, Y+7	; 0x07
    1c48:	98 84       	ldd	r9, Y+8	; 0x08
    1c4a:	86 0c       	add	r8, r6
    1c4c:	97 1c       	adc	r9, r7
    1c4e:	7c 82       	std	Y+4, r7	; 0x04
    1c50:	6b 82       	std	Y+3, r6	; 0x03
    1c52:	4d 84       	ldd	r4, Y+13	; 0x0d
    1c54:	5e 84       	ldd	r5, Y+14	; 0x0e

  for (int i=0; i<(height / 2); i++)
  {
    for (int j=0; j<2; j++)
    {
      for (int k=0; k<(width / 8); k++)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	18 16       	cp	r1, r24
    1c5c:	19 06       	cpc	r1, r25
    1c5e:	0c f0       	brlt	.+2      	; 0x1c62 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0xca>
    1c60:	43 c0       	rjmp	.+134    	; 0x1ce8 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x150>
    1c62:	eb 80       	ldd	r14, Y+3	; 0x03
    1c64:	fc 80       	ldd	r15, Y+4	; 0x04
      {

        data = pgm_read_byte(&bitmap[tileSelection][i * (width / 8) + k]);
    1c66:	f7 01       	movw	r30, r14
    1c68:	c4 90       	lpm	r12, Z
    1c6a:	68 94       	set
    1c6c:	66 24       	eor	r6, r6
    1c6e:	62 f8       	bld	r6, 2
    1c70:	71 2c       	mov	r7, r1

        for (int l=0; l<4; l++)
        {
          temp = data >> 6;
    1c72:	dc 2c       	mov	r13, r12
    1c74:	d6 94       	lsr	r13
    1c76:	d6 94       	lsr	r13
    1c78:	d6 94       	lsr	r13
    1c7a:	d6 94       	lsr	r13
    1c7c:	d6 94       	lsr	r13
    1c7e:	d6 94       	lsr	r13
    1c80:	02 e0       	ldi	r16, 0x02	; 2
    1c82:	10 e0       	ldi	r17, 0x00	; 0

          for (int m=0; m<2; m++)
          {

            if (temp == 0x00)       //1Pixel = 00
    1c84:	d1 10       	cpse	r13, r1
    1c86:	06 c0       	rjmp	.+12     	; 0x1c94 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0xfc>
            {
              exportLongData(color0Bit);
    1c88:	69 81       	ldd	r22, Y+1	; 0x01
    1c8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c8c:	c2 01       	movw	r24, r4
    1c8e:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1c92:	1a c0       	rjmp	.+52     	; 0x1cc8 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x130>
            }

            else if (temp == 0x01)  //1Pixel = 01
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	df 12       	cpse	r13, r31
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x10e>
            {
              exportLongData(color1Bit);
    1c9a:	69 85       	ldd	r22, Y+9	; 0x09
    1c9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c9e:	c2 01       	movw	r24, r4
    1ca0:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1ca4:	11 c0       	rjmp	.+34     	; 0x1cc8 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x130>
            }

            else if (temp == 0x02)  //1Pixel = 10
    1ca6:	22 e0       	ldi	r18, 0x02	; 2
    1ca8:	d2 12       	cpse	r13, r18
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x120>
            {
              exportLongData(color2Bit);
    1cac:	6b a1       	ldd	r22, Y+35	; 0x23
    1cae:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb0:	c2 01       	movw	r24, r4
    1cb2:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1cb6:	08 c0       	rjmp	.+16     	; 0x1cc8 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x130>
            }

            else if (temp == 0x03)  //1Pixel = 11
    1cb8:	33 e0       	ldi	r19, 0x03	; 3
    1cba:	d3 12       	cpse	r13, r19
    1cbc:	05 c0       	rjmp	.+10     	; 0x1cc8 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x130>
            {
              exportLongData(color3Bit);
    1cbe:	6d a1       	ldd	r22, Y+37	; 0x25
    1cc0:	7e a1       	ldd	r23, Y+38	; 0x26
    1cc2:	c2 01       	movw	r24, r4
    1cc4:	0e 94 49 0b 	call	0x1692	; 0x1692 <_ZN3SPI14exportLongDataEj>
    1cc8:	01 50       	subi	r16, 0x01	; 1
    1cca:	11 09       	sbc	r17, r1

        for (int l=0; l<4; l++)
        {
          temp = data >> 6;

          for (int m=0; m<2; m++)
    1ccc:	d9 f6       	brne	.-74     	; 0x1c84 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0xec>
              exportLongData(color3Bit);
            }

          }

          data <<= 2;
    1cce:	cc 0c       	add	r12, r12
    1cd0:	cc 0c       	add	r12, r12
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	68 1a       	sub	r6, r24
    1cd6:	71 08       	sbc	r7, r1
      for (int k=0; k<(width / 8); k++)
      {

        data = pgm_read_byte(&bitmap[tileSelection][i * (width / 8) + k]);

        for (int l=0; l<4; l++)
    1cd8:	61 f6       	brne	.-104    	; 0x1c72 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0xda>
    1cda:	9f ef       	ldi	r25, 0xFF	; 255
    1cdc:	e9 1a       	sub	r14, r25
    1cde:	f9 0a       	sbc	r15, r25

  for (int i=0; i<(height / 2); i++)
  {
    for (int j=0; j<2; j++)
    {
      for (int k=0; k<(width / 8); k++)
    1ce0:	8e 14       	cp	r8, r14
    1ce2:	9f 04       	cpc	r9, r15
    1ce4:	09 f0       	breq	.+2      	; 0x1ce8 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x150>
    1ce6:	bf cf       	rjmp	.-130    	; 0x1c66 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0xce>
    1ce8:	e1 e0       	ldi	r30, 0x01	; 1
    1cea:	ae 1a       	sub	r10, r30
    1cec:	b1 08       	sbc	r11, r1

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i=0; i<(height / 2); i++)
  {
    for (int j=0; j<2; j++)
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x15a>
    1cf0:	b2 cf       	rjmp	.-156    	; 0x1c56 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0xbe>
    1cf2:	6b 80       	ldd	r6, Y+3	; 0x03
    1cf4:	7c 80       	ldd	r7, Y+4	; 0x04
  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i=0; i<(height / 2); i++)
    1cf6:	ff ef       	ldi	r31, 0xFF	; 255
    1cf8:	2f 1a       	sub	r2, r31
    1cfa:	3f 0a       	sbc	r3, r31
    1cfc:	2f 81       	ldd	r18, Y+7	; 0x07
    1cfe:	38 85       	ldd	r19, Y+8	; 0x08
    1d00:	62 0e       	add	r6, r18
    1d02:	73 1e       	adc	r7, r19
    1d04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d06:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d08:	28 16       	cp	r2, r24
    1d0a:	39 06       	cpc	r3, r25
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0x178>
    1d0e:	97 cf       	rjmp	.-210    	; 0x1c3e <_ZN3TFT10drawBitmapEiiiiPA100_Khajjjj+0xa6>

      }
    }
  }

    1d10:	2e 96       	adiw	r28, 0x0e	; 14
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
    1d2c:	bf 90       	pop	r11
    1d2e:	af 90       	pop	r10
    1d30:	9f 90       	pop	r9
    1d32:	8f 90       	pop	r8
    1d34:	7f 90       	pop	r7
    1d36:	6f 90       	pop	r6
    1d38:	5f 90       	pop	r5
    1d3a:	4f 90       	pop	r4
    1d3c:	3f 90       	pop	r3
    1d3e:	2f 90       	pop	r2
    1d40:	08 95       	ret

00001d42 <__udivmodsi4>:
    1d42:	a1 e2       	ldi	r26, 0x21	; 33
    1d44:	1a 2e       	mov	r1, r26
    1d46:	aa 1b       	sub	r26, r26
    1d48:	bb 1b       	sub	r27, r27
    1d4a:	fd 01       	movw	r30, r26
    1d4c:	0d c0       	rjmp	.+26     	; 0x1d68 <__udivmodsi4_ep>

00001d4e <__udivmodsi4_loop>:
    1d4e:	aa 1f       	adc	r26, r26
    1d50:	bb 1f       	adc	r27, r27
    1d52:	ee 1f       	adc	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	a2 17       	cp	r26, r18
    1d58:	b3 07       	cpc	r27, r19
    1d5a:	e4 07       	cpc	r30, r20
    1d5c:	f5 07       	cpc	r31, r21
    1d5e:	20 f0       	brcs	.+8      	; 0x1d68 <__udivmodsi4_ep>
    1d60:	a2 1b       	sub	r26, r18
    1d62:	b3 0b       	sbc	r27, r19
    1d64:	e4 0b       	sbc	r30, r20
    1d66:	f5 0b       	sbc	r31, r21

00001d68 <__udivmodsi4_ep>:
    1d68:	66 1f       	adc	r22, r22
    1d6a:	77 1f       	adc	r23, r23
    1d6c:	88 1f       	adc	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	1a 94       	dec	r1
    1d72:	69 f7       	brne	.-38     	; 0x1d4e <__udivmodsi4_loop>
    1d74:	60 95       	com	r22
    1d76:	70 95       	com	r23
    1d78:	80 95       	com	r24
    1d7a:	90 95       	com	r25
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	ac 01       	movw	r20, r24
    1d80:	bd 01       	movw	r22, r26
    1d82:	cf 01       	movw	r24, r30
    1d84:	08 95       	ret

00001d86 <__tablejump2__>:
    1d86:	ee 0f       	add	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	05 90       	lpm	r0, Z+
    1d8c:	f4 91       	lpm	r31, Z
    1d8e:	e0 2d       	mov	r30, r0
    1d90:	09 94       	ijmp

00001d92 <_exit>:
    1d92:	f8 94       	cli

00001d94 <__stop_program>:
    1d94:	ff cf       	rjmp	.-2      	; 0x1d94 <__stop_program>
