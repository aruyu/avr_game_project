
ATmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001d6c  00001e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800130  00800130  00001e30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005129  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001115  00000000  00000000  00007139  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011fd  00000000  00000000  0000824e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  0000944c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000afd  00000000  00000000  00009930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021e2  00000000  00000000  0000a42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000c60f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__ctors_end>
       4:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
       8:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
       c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      10:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      14:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      18:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      1c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      20:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      24:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      28:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      2c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      30:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      34:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      38:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      3c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      40:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      44:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      48:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      4c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      50:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      54:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      58:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      5c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      60:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>
      64:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 30       	cpi	r16, 0x00	; 0
      6a:	00 00       	nop
      6c:	10 00       	.word	0x0010	; ????
	...
      76:	00 00       	nop
      78:	00 78       	andi	r16, 0x80	; 128
      7a:	6c 28       	or	r6, r12
      7c:	3c 66       	ori	r19, 0x6C	; 108
      7e:	20 30       	cpi	r18, 0x00	; 0
      80:	18 30       	cpi	r17, 0x08	; 8
      82:	54 18       	sub	r5, r4
      84:	00 00       	nop
      86:	00 06       	cpc	r0, r16
      88:	00 78       	andi	r16, 0x80	; 128
      8a:	24 7c       	andi	r18, 0xC4	; 196
      8c:	60 0c       	add	r6, r0
      8e:	50 10       	cpse	r5, r0
      90:	30 18       	sub	r3, r0
      92:	38 18       	sub	r3, r8
      94:	00 00       	nop
      96:	00 0c       	add	r0, r0
      98:	00 78       	andi	r16, 0x80	; 128
      9a:	00 28       	or	r0, r0
      9c:	38 18       	sub	r3, r8
      9e:	34 00       	.word	0x0034	; ????
      a0:	30 18       	sub	r3, r0
      a2:	10 7e       	andi	r17, 0xE0	; 224
      a4:	00 7e       	andi	r16, 0xE0	; 224
      a6:	00 18       	sub	r0, r0
      a8:	00 30       	cpi	r16, 0x00	; 0
      aa:	00 7c       	andi	r16, 0xC0	; 192
      ac:	0c 30       	cpi	r16, 0x0C	; 12
      ae:	48 00       	.word	0x0048	; ????
      b0:	30 18       	sub	r3, r0
      b2:	38 18       	sub	r3, r8
      b4:	00 00       	nop
      b6:	00 30       	cpi	r16, 0x00	; 0
      b8:	00 00       	nop
      ba:	00 28       	or	r0, r0
      bc:	78 66       	ori	r23, 0x68	; 104
      be:	34 00       	.word	0x0034	; ????
      c0:	18 30       	cpi	r17, 0x08	; 8
      c2:	54 18       	sub	r5, r4
      c4:	00 00       	nop
      c6:	00 60       	ori	r16, 0x00	; 0
      c8:	00 30       	cpi	r16, 0x00	; 0
      ca:	00 00       	nop
      cc:	10 00       	.word	0x0010	; ????
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	30 00       	.word	0x0030	; ????
      d6:	30 00       	.word	0x0030	; ????
	...
      e4:	10 00       	.word	0x0010	; ????
      e6:	00 00       	nop
      e8:	38 18       	sub	r3, r8
      ea:	fc fc       	.word	0xfcfc	; ????
      ec:	06 fe       	sbrs	r0, 6
      ee:	7c fe       	.word	0xfe7c	; ????
      f0:	7c 7c       	andi	r23, 0xCC	; 204
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	00 7c       	andi	r16, 0xC0	; 192
      f8:	4c 38       	cpi	r20, 0x8C	; 140
      fa:	06 06       	cpc	r0, r22
      fc:	c6 c0       	rjmp	.+396    	; 0x28a <__trampolines_end+0x222>
      fe:	c0 06       	cpc	r12, r16
     100:	c6 c6       	rjmp	.+3468   	; 0xe8e <__stack+0x58f>
     102:	00 00       	nop
     104:	18 00       	.word	0x0018	; ????
     106:	30 c6       	rjmp	.+3168   	; 0xd68 <__stack+0x469>
     108:	c6 18       	sub	r12, r6
     10a:	06 3c       	cpi	r16, 0xC6	; 198
     10c:	c6 fc       	sbrc	r12, 6
     10e:	fc 06       	cpc	r15, r28
     110:	7c c6       	rjmp	.+3320   	; 0xe0a <__stack+0x50b>
     112:	30 30       	cpi	r19, 0x00	; 0
     114:	30 7c       	andi	r19, 0xC0	; 192
     116:	18 06       	cpc	r1, r24
     118:	c6 18       	sub	r12, r6
     11a:	7c 06       	cpc	r7, r28
     11c:	c6 06       	cpc	r12, r22
     11e:	c6 0c       	add	r12, r6
     120:	c6 c6       	rjmp	.+3468   	; 0xeae <__stack+0x5af>
     122:	00 00       	nop
     124:	60 00       	.word	0x0060	; ????
     126:	0c 06       	cpc	r0, r28
     128:	c6 18       	sub	r12, r6
     12a:	c0 06       	cpc	r12, r16
     12c:	c6 06       	cpc	r12, r22
     12e:	c6 18       	sub	r12, r6
     130:	c6 7e       	andi	r28, 0xE6	; 230
     132:	00 00       	nop
     134:	30 7c       	andi	r19, 0xC0	; 192
     136:	18 3c       	cpi	r17, 0xC8	; 200
     138:	64 18       	sub	r6, r4
     13a:	c0 06       	cpc	r12, r16
     13c:	fe 06       	cpc	r15, r30
     13e:	c6 30       	cpi	r28, 0x06	; 6
     140:	c6 06       	cpc	r12, r22
     142:	30 30       	cpi	r19, 0x00	; 0
     144:	18 00       	.word	0x0018	; ????
     146:	30 00       	.word	0x0030	; ????
     148:	38 3c       	cpi	r19, 0xC8	; 200
     14a:	fe fc       	.word	0xfcfe	; ????
     14c:	06 fc       	sbrc	r0, 6
     14e:	7c 30       	cpi	r23, 0x0C	; 12
     150:	7c 7c       	andi	r23, 0xCC	; 204
     152:	00 10       	cpse	r0, r0
     154:	00 00       	nop
     156:	00 30       	cpi	r16, 0x00	; 0
	...
     168:	7c 7c       	andi	r23, 0xCC	; 204
     16a:	fc 7e       	andi	r31, 0xEC	; 236
     16c:	fc fe       	.word	0xfefc	; ????
     16e:	fe 7c       	andi	r31, 0xCE	; 206
     170:	c6 3c       	cpi	r28, 0xC6	; 198
     172:	1e c6       	rjmp	.+3132   	; 0xdb0 <__stack+0x4b1>
     174:	c0 c6       	rjmp	.+3456   	; 0xef6 <__stack+0x5f7>
     176:	c6 7c       	andi	r28, 0xC6	; 198
     178:	c6 c6       	rjmp	.+3468   	; 0xf06 <__stack+0x607>
     17a:	c6 c0       	rjmp	.+396    	; 0x308 <__trampolines_end+0x2a0>
     17c:	c6 c0       	rjmp	.+396    	; 0x30a <__trampolines_end+0x2a2>
     17e:	c0 c6       	rjmp	.+3456   	; 0xf00 <__stack+0x601>
     180:	c6 18       	sub	r12, r6
     182:	06 c6       	rjmp	.+3084   	; 0xd90 <__stack+0x491>
     184:	c0 ee       	ldi	r28, 0xE0	; 224
     186:	e6 c6       	rjmp	.+3532   	; 0xf54 <__stack+0x655>
     188:	c6 c6       	rjmp	.+3468   	; 0xf16 <__stack+0x617>
     18a:	c6 c0       	rjmp	.+396    	; 0x318 <__trampolines_end+0x2b0>
     18c:	c6 c0       	rjmp	.+396    	; 0x31a <__trampolines_end+0x2b2>
     18e:	c0 c0       	rjmp	.+384    	; 0x310 <__trampolines_end+0x2a8>
     190:	c6 18       	sub	r12, r6
     192:	06 cc       	rjmp	.-2036   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
     194:	c0 fe       	sbrs	r12, 0
     196:	f6 c6       	rjmp	.+3564   	; 0xf84 <__stack+0x685>
     198:	d6 c6       	rjmp	.+3500   	; 0xf46 <__stack+0x647>
     19a:	fc c0       	rjmp	.+504    	; 0x394 <_ZL9logoAtmel+0x2c>
     19c:	c6 f8       	bld	r12, 6
     19e:	fc de       	rcall	.-520    	; 0xffffff98 <__eeprom_end+0xff7eff98>
     1a0:	fe 18       	sub	r15, r14
     1a2:	06 f8       	bld	r0, 6
     1a4:	c0 d6       	rcall	.+3456   	; 0xf26 <__stack+0x627>
     1a6:	de c6       	rjmp	.+3516   	; 0xf64 <__stack+0x665>
     1a8:	dc fe       	.word	0xfedc	; ????
     1aa:	c6 c0       	rjmp	.+396    	; 0x338 <__trampolines_end+0x2d0>
     1ac:	c6 c0       	rjmp	.+396    	; 0x33a <__trampolines_end+0x2d2>
     1ae:	c0 c6       	rjmp	.+3456   	; 0xf30 <__stack+0x631>
     1b0:	c6 18       	sub	r12, r6
     1b2:	06 cc       	rjmp	.-2036   	; 0xfffff9c0 <__eeprom_end+0xff7ef9c0>
     1b4:	c0 c6       	rjmp	.+3456   	; 0xf36 <__stack+0x637>
     1b6:	ce c6       	rjmp	.+3484   	; 0xf54 <__stack+0x655>
     1b8:	c0 c6       	rjmp	.+3456   	; 0xf3a <__stack+0x63b>
     1ba:	c6 c0       	rjmp	.+396    	; 0x348 <__trampolines_end+0x2e0>
     1bc:	c6 c0       	rjmp	.+396    	; 0x34a <__trampolines_end+0x2e2>
     1be:	c0 c6       	rjmp	.+3456   	; 0xf40 <__stack+0x641>
     1c0:	c6 18       	sub	r12, r6
     1c2:	c6 c6       	rjmp	.+3468   	; 0xf50 <__stack+0x651>
     1c4:	c0 c6       	rjmp	.+3456   	; 0xf46 <__stack+0x647>
     1c6:	c6 c6       	rjmp	.+3468   	; 0xf54 <__stack+0x655>
     1c8:	7c c6       	rjmp	.+3320   	; 0xec2 <__stack+0x5c3>
     1ca:	fc 7e       	andi	r31, 0xEC	; 236
     1cc:	fc fe       	.word	0xfefc	; ????
     1ce:	c0 7e       	andi	r28, 0xE0	; 224
     1d0:	c6 3c       	cpi	r28, 0xC6	; 198
     1d2:	7c c6       	rjmp	.+3320   	; 0xecc <__stack+0x5cd>
     1d4:	fe c6       	rjmp	.+3580   	; 0xfd2 <__stack+0x6d3>
     1d6:	c6 7c       	andi	r28, 0xC6	; 198
	...
     1e8:	fc 7c       	andi	r31, 0xCC	; 204
     1ea:	fc 7e       	andi	r31, 0xEC	; 236
     1ec:	7e c6       	rjmp	.+3324   	; 0xeea <__stack+0x5eb>
     1ee:	c6 c6       	rjmp	.+3468   	; 0xf7c <__stack+0x67d>
     1f0:	c6 66       	ori	r28, 0x66	; 102
     1f2:	fe 00       	.word	0x00fe	; ????
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	c6 c6       	rjmp	.+3468   	; 0xf86 <__stack+0x687>
     1fa:	c6 c0       	rjmp	.+396    	; 0x388 <_ZL9logoAtmel+0x20>
     1fc:	18 c6       	rjmp	.+3120   	; 0xe2e <__stack+0x52f>
     1fe:	c6 c6       	rjmp	.+3468   	; 0xf8c <__stack+0x68d>
     200:	c6 66       	ori	r28, 0x66	; 102
     202:	06 38       	cpi	r16, 0x86	; 134
     204:	60 38       	cpi	r22, 0x80	; 128
     206:	10 00       	.word	0x0010	; ????
     208:	c6 c6       	rjmp	.+3468   	; 0xf96 <__stack+0x697>
     20a:	c6 c0       	rjmp	.+396    	; 0x398 <_ZL9logoAtmel+0x30>
     20c:	18 c6       	rjmp	.+3120   	; 0xe3e <__stack+0x53f>
     20e:	c6 c6       	rjmp	.+3468   	; 0xf9c <__stack+0x69d>
     210:	6c 66       	ori	r22, 0x6C	; 108
     212:	0c 30       	cpi	r16, 0x0C	; 12
     214:	30 18       	sub	r3, r0
     216:	38 00       	.word	0x0038	; ????
     218:	c6 c6       	rjmp	.+3468   	; 0xfa6 <__stack+0x6a7>
     21a:	c6 7c       	andi	r28, 0xC6	; 198
     21c:	18 c6       	rjmp	.+3120   	; 0xe4e <__stack+0x54f>
     21e:	c6 d6       	rcall	.+3468   	; 0xfac <__stack+0x6ad>
     220:	38 3c       	cpi	r19, 0xC8	; 200
     222:	38 30       	cpi	r19, 0x08	; 8
     224:	18 18       	sub	r1, r8
     226:	6c 00       	.word	0x006c	; ????
     228:	fc de       	rcall	.-520    	; 0x22 <__FUSE_REGION_LENGTH__+0x1f>
     22a:	fc 06       	cpc	r15, r28
     22c:	18 c6       	rjmp	.+3120   	; 0xe5e <__stack+0x55f>
     22e:	6c fe       	.word	0xfe6c	; ????
     230:	6c 18       	sub	r6, r12
     232:	60 30       	cpi	r22, 0x00	; 0
     234:	0c 18       	sub	r0, r12
     236:	44 00       	.word	0x0044	; ????
     238:	c0 cc       	rjmp	.-1664   	; 0xfffffbba <__eeprom_end+0xff7efbba>
     23a:	c6 06       	cpc	r12, r22
     23c:	18 c6       	rjmp	.+3120   	; 0xe6e <__stack+0x56f>
     23e:	38 ee       	ldi	r19, 0xE8	; 232
     240:	c6 18       	sub	r12, r6
     242:	c0 38       	cpi	r28, 0x80	; 128
     244:	06 38       	cpi	r16, 0x86	; 134
     246:	00 00       	nop
     248:	c0 76       	andi	r28, 0x60	; 96
     24a:	c6 fc       	sbrc	r12, 6
     24c:	18 7c       	andi	r17, 0xC8	; 200
     24e:	10 c6       	rjmp	.+3104   	; 0xe70 <__stack+0x571>
     250:	c6 18       	sub	r12, r6
     252:	fe 00       	.word	0x00fe	; ????
     254:	00 00       	nop
     256:	00 fe       	sbrs	r0, 0
	...
     268:	00 00       	nop
     26a:	c0 00       	.word	0x00c0	; ????
     26c:	06 00       	.word	0x0006	; ????
     26e:	3e 00       	.word	0x003e	; ????
     270:	c0 18       	sub	r12, r0
     272:	0c c0       	rjmp	.+24     	; 0x28c <__trampolines_end+0x224>
     274:	38 00       	.word	0x0038	; ????
     276:	00 00       	nop
     278:	60 7c       	andi	r22, 0xC0	; 192
     27a:	fc 7e       	andi	r31, 0xEC	; 236
     27c:	7e 7c       	andi	r23, 0xCE	; 206
     27e:	60 7e       	andi	r22, 0xE0	; 224
     280:	c0 00       	.word	0x00c0	; ????
     282:	00 c6       	rjmp	.+3072   	; 0xe84 <__stack+0x585>
     284:	18 fc       	.word	0xfc18	; ????
     286:	fc 7c       	andi	r31, 0xCC	; 204
     288:	20 06       	cpc	r2, r16
     28a:	c6 c0       	rjmp	.+396    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     28c:	c6 c6       	rjmp	.+3468   	; 0x101a <_ZL7charRun+0x32>
     28e:	60 c6       	rjmp	.+3264   	; 0xf50 <__stack+0x651>
     290:	fc 38       	cpi	r31, 0x8C	; 140
     292:	1c cc       	rjmp	.-1992   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     294:	18 d6       	rcall	.+3120   	; 0xec6 <__stack+0x5c7>
     296:	c6 c6       	rjmp	.+3468   	; 0x1024 <_ZL7charRun+0x3c>
     298:	00 7e       	andi	r16, 0xE0	; 224
     29a:	c6 c0       	rjmp	.+396    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     29c:	c6 c6       	rjmp	.+3468   	; 0x102a <_ZL7charRun+0x42>
     29e:	fc c6       	rjmp	.+3576   	; 0x1098 <_ZL7charRun+0xb0>
     2a0:	c6 18       	sub	r12, r6
     2a2:	0c f8       	.word	0xf80c	; ????
     2a4:	18 d6       	rcall	.+3120   	; 0xed6 <__stack+0x5d7>
     2a6:	c6 c6       	rjmp	.+3468   	; 0x1034 <_ZL7charRun+0x4c>
     2a8:	00 c6       	rjmp	.+3072   	; 0xeaa <__stack+0x5ab>
     2aa:	c6 c0       	rjmp	.+396    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     2ac:	c6 fc       	sbrc	r12, 6
     2ae:	60 c6       	rjmp	.+3264   	; 0xf70 <__stack+0x671>
     2b0:	c6 18       	sub	r12, r6
     2b2:	0c cc       	rjmp	.-2024   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     2b4:	18 d6       	rcall	.+3120   	; 0xee6 <__stack+0x5e7>
     2b6:	c6 c6       	rjmp	.+3468   	; 0x1044 <_ZL7charRun+0x5c>
     2b8:	00 c6       	rjmp	.+3072   	; 0xeba <__stack+0x5bb>
     2ba:	c6 c0       	rjmp	.+396    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     2bc:	c6 c0       	rjmp	.+396    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     2be:	60 7e       	andi	r22, 0xE0	; 224
     2c0:	c6 18       	sub	r12, r6
     2c2:	0c c6       	rjmp	.+3096   	; 0xedc <__stack+0x5dd>
     2c4:	18 d6       	rcall	.+3120   	; 0xef6 <__stack+0x5f7>
     2c6:	c6 c6       	rjmp	.+3468   	; 0x1054 <_ZL7charRun+0x6c>
     2c8:	00 7e       	andi	r16, 0xE0	; 224
     2ca:	fc 7e       	andi	r31, 0xEC	; 236
     2cc:	7e 7c       	andi	r23, 0xCE	; 206
     2ce:	60 06       	cpc	r6, r16
     2d0:	c6 18       	sub	r12, r6
     2d2:	0c c6       	rjmp	.+3096   	; 0xeec <__stack+0x5ed>
     2d4:	18 d6       	rcall	.+3120   	; 0xf06 <__stack+0x607>
     2d6:	c6 7c       	andi	r28, 0xC6	; 198
     2d8:	00 00       	nop
     2da:	00 00       	nop
     2dc:	00 00       	nop
     2de:	00 7c       	andi	r16, 0xC0	; 192
     2e0:	00 00       	nop
     2e2:	78 00       	.word	0x0078	; ????
	...
     2ec:	18 00       	.word	0x0018	; ????
	...
     2f6:	00 00       	nop
     2f8:	fc 7e       	andi	r31, 0xEC	; 236
     2fa:	fc 7c       	andi	r31, 0xCC	; 204
     2fc:	18 c6       	rjmp	.+3120   	; 0xf2e <__stack+0x62f>
     2fe:	c6 d6       	rcall	.+3468   	; 0x108c <_ZL7charRun+0xa4>
     300:	c6 c6       	rjmp	.+3468   	; 0x108e <_ZL7charRun+0xa6>
     302:	fe 38       	cpi	r31, 0x8E	; 142
     304:	10 38       	cpi	r17, 0x80	; 128
     306:	00 00       	nop
     308:	c6 c6       	rjmp	.+3468   	; 0x1096 <_ZL7charRun+0xae>
     30a:	c6 c0       	rjmp	.+396    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     30c:	7e c6       	rjmp	.+3324   	; 0x100a <_ZL7charRun+0x22>
     30e:	c6 d6       	rcall	.+3468   	; 0x109c <_ZL7charRun+0xb4>
     310:	6c c6       	rjmp	.+3288   	; 0xfea <_ZL7charRun+0x2>
     312:	0c 30       	cpi	r16, 0x0C	; 12
     314:	10 18       	sub	r1, r0
     316:	30 00       	.word	0x0030	; ????
     318:	c6 c6       	rjmp	.+3468   	; 0x10a6 <_ZL7charRun+0xbe>
     31a:	c0 7c       	andi	r28, 0xC0	; 192
     31c:	18 c6       	rjmp	.+3120   	; 0xf4e <__stack+0x64f>
     31e:	c6 d6       	rcall	.+3468   	; 0x10ac <_ZL7charRun+0xc4>
     320:	38 c6       	rjmp	.+3184   	; 0xf92 <__stack+0x693>
     322:	38 60       	ori	r19, 0x08	; 8
     324:	10 0c       	add	r1, r0
     326:	5a 00       	.word	0x005a	; ????
     328:	c6 c6       	rjmp	.+3468   	; 0x10b6 <_ZL7charRun+0xce>
     32a:	c0 06       	cpc	r12, r16
     32c:	18 c6       	rjmp	.+3120   	; 0xf5e <__stack+0x65f>
     32e:	6c d6       	rcall	.+3288   	; 0x1008 <_ZL7charRun+0x20>
     330:	6c c6       	rjmp	.+3288   	; 0x100a <_ZL7charRun+0x22>
     332:	60 30       	cpi	r22, 0x00	; 0
     334:	10 18       	sub	r1, r0
     336:	0c 00       	.word	0x000c	; ????
     338:	c6 c6       	rjmp	.+3468   	; 0x10c6 <_ZL7charRun+0xde>
     33a:	c0 06       	cpc	r12, r16
     33c:	18 c6       	rjmp	.+3120   	; 0xf6e <__stack+0x66f>
     33e:	38 d6       	rcall	.+3184   	; 0xfb0 <__stack+0x6b1>
     340:	c6 7e       	andi	r28, 0xE6	; 230
     342:	c0 38       	cpi	r28, 0x80	; 128
     344:	10 38       	cpi	r17, 0x80	; 128
     346:	00 00       	nop
     348:	fc 7e       	andi	r31, 0xEC	; 236
     34a:	c0 7c       	andi	r28, 0xC0	; 192
     34c:	18 7e       	andi	r17, 0xE8	; 232
     34e:	10 7e       	andi	r17, 0xE0	; 224
     350:	c6 06       	cpc	r12, r22
     352:	fe 00       	.word	0x00fe	; ????
     354:	00 00       	nop
     356:	00 00       	nop
     358:	c0 06       	cpc	r12, r16
     35a:	00 00       	nop
     35c:	00 00       	nop
     35e:	00 00       	nop
     360:	00 7c       	andi	r16, 0xC0	; 192
     362:	00 00       	nop
     364:	00 00       	nop
	...

00000368 <_ZL9logoAtmel>:
     368:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     378:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     388:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     398:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     408:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     418:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     428:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     438:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     448:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     458:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     468:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     478:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     488:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     498:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     4f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     508:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     528:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     538:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     548:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     568:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     578:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     588:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     598:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     608:	ff ff ff ff ff ff ff ff ff ff ff ff ff 55 7f d5     .............U..
     618:	ff ff ff ff ff ff ff ff ff ff ff ff ff 57 fd ff     .............W..
     628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     638:	ff ff ff ff ff 55 7f d5 ff ff ff ff ff ff ff ff     .....U..........
     648:	ff ff ff ff ff 57 f7 ff ff ff ff ff ff ff ff ff     .....W..........
     658:	ff ff ff ff ff ff ff ff ff ff ff ff fd 55 7f d5     .............U..
     668:	ff ff ff ff ff ff ff ff ff ff ff ff ff 57 ff ff     .............W..
     678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     688:	ff ff ff ff f5 55 7f d5 ff ff ff ff ff ff ff ff     .....U..........
     698:	ff ff ff ff ff 57 ff ff ff ff ff ff ff ff ff ff     .....W..........
     6a8:	ff ff ff ff ff ff ff ff ff ff ff ff d5 75 7f d5     .............u..
     6b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff 57 ff ff     .............W..
     6c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     6d8:	ff ff ff ff 55 f5 7f d5 7f ff ff d5 ff ff 57 ff     ....U.........W.
     6e8:	ff ff 55 7f ff 57 ff ff ff ff ff ff ff ff ff ff     ..U..W..........
     6f8:	ff ff ff ff ff ff ff ff ff ff ff fd 57 f5 7d 55     ............W.}U
     708:	55 7f fd 55 5f d5 55 7f ff d5 55 57 ff 57 ff ff     U..U_.U...UW.W..
     718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     728:	ff ff ff fd 5f f5 7d 55 55 7f f5 55 55 55 55 5f     ...._.}UU..UUUU_
     738:	ff 55 55 55 ff 57 ff ff ff ff ff ff ff ff ff ff     .UUU.W..........
     748:	ff ff ff ff ff ff ff ff ff ff ff f5 5f f5 7d 55     ............_.}U
     758:	55 7f d5 55 55 55 55 57 fd 55 7f 55 7f 57 ff ff     U..UUUUW.U.U.W..
     768:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     778:	ff ff ff d5 7f f5 7f d5 ff ff 55 7f d5 57 fd 57     ..........U..W.W
     788:	fd 57 ff d5 7f 57 ff ff ff ff ff ff ff ff ff ff     .W...W..........
     798:	ff ff ff ff ff ff ff ff ff ff ff 55 ff f5 7f d5     ...........U....
     7a8:	ff ff 55 ff f5 5f ff 57 f5 5f ff f5 5f 57 ff ff     ..U.._.W._.._W..
     7b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7c8:	ff ff fd 57 ff f5 7f d5 ff ff 57 ff f5 7f ff 55     ...W......W....U
     7d8:	f5 5f ff f5 5f 57 ff ff ff ff ff ff ff ff ff ff     ._.._W..........
     7e8:	ff ff ff ff ff ff ff ff ff ff f5 55 57 f5 7f d5     ...........UW...
     7f8:	ff ff 57 ff f5 7f ff 55 f5 55 55 55 5f 57 ff ff     ..W....U.UUU_W..
     808:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     818:	ff ff d5 55 57 f5 7f d5 ff ff 57 ff f5 7f ff 55     ...UW.....W....U
     828:	f5 55 55 55 5f 57 ff ff ff ff ff ff ff ff ff ff     .UUU_W..........
     838:	ff ff ff ff ff ff ff ff ff ff d5 55 5f f5 7f d5     ...........U_...
     848:	ff ff 57 ff f5 7f ff 55 f5 55 55 55 5f 57 ff ff     ..W....U.UUU_W..
     858:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     868:	ff ff 55 ff ff f5 7f d5 ff ff 57 ff f5 7f ff 55     ..U.......W....U
     878:	f5 7f ff ff ff 55 ff ff ff ff ff ff ff ff ff ff     .....U..........
     888:	ff ff ff ff ff ff ff ff ff fd 57 ff ff f5 7f d5     ..........W.....
     898:	7f ff 57 ff f5 7f ff 55 f5 5f ff ff ff 55 ff ff     ..W....U._...U..
     8a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8b8:	ff f5 5f ff ff f5 7f f5 5f ff 57 ff f5 7f ff 55     .._....._.W....U
     8c8:	fd 57 ff f5 7f d5 7f ff ff ff ff ff ff ff ff ff     .W..............
     8d8:	ff ff ff ff ff ff ff ff ff d5 7f ff ff f5 7f f5     ................
     8e8:	55 7f 57 ff f5 7f ff 55 fd 55 ff 55 7f d5 55 ff     U.W....U.U.U..U.
     8f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     908:	ff 55 ff ff ff f5 7f fd 55 7f 57 ff f5 7f ff 55     .U......U.W....U
     918:	ff 55 55 55 ff f5 55 ff ff ff ff ff ff ff ff ff     .UUU..U.........
     928:	ff ff ff ff ff ff ff ff fd 57 ff ff ff f5 7f ff     .........W......
     938:	55 7f 57 ff f5 7f ff 55 ff d5 55 57 ff fd 55 ff     U.W....U..UW..U.
     948:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     958:	fd 5f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ._..............
     968:	ff ff 55 7f ff ff ff ff ff ff ff ff ff ff ff ff     ..U.............
     978:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     988:	ff fa aa aa ff ff ff ff ff ff ff ff ff ff ff ff     ................
     998:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9a8:	ff ff ff ff ff ff ff ff ff aa aa aa be bf ff ff     ................
     9b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9d8:	fe aa aa aa af ff ff ff ff ff ff ff ff ff ff ff     ................
     9e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9f8:	ff ff ff ff ff ff ff ff fa aa aa aa ab ff ff ff     ................
     a08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a28:	ea aa aa aa ab ff ff fc 3f ff c3 ff ff ff ff ff     ........?.......
     a38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a48:	ff ff ff ff ff ff ff ff aa af aa ab ea ff ff f0     ................
     a58:	0f ff 00 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe     ................
     a78:	aa bf ea af fa ff ff f0 0f ff 00 ff ff ff ff ff     ................
     a88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a98:	ff ff ff ff ff ff ff fe aa ff ea bf fa bf ff f0     ................
     aa8:	0f ff 00 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ab8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fa     ................
     ac8:	ab ff fa bf fe af ff f0 03 fc 00 fc 3f 00 00 fc     ............?...
     ad8:	00 03 fc 00 03 fc 00 00 f0 ff c3 c3 f0 00 0f ff     ................
     ae8:	ff ff ff ff ff ff ff fa aa ff fa bf ff af ff c0     ................
     af8:	03 fc 00 fc 3c 00 00 3c 00 00 fc 00 03 f0 00 00     ....<..<........
     b08:	f0 ff c3 c3 c0 00 03 ff ff ff ff ff ff ff ff fa     ................
     b18:	aa ff fe af ff ab ff c0 00 f0 00 fc 3c 00 00 3c     ............<..<
     b28:	00 00 f0 00 00 f0 00 00 f0 ff c3 c3 c0 00 03 ff     ................
     b38:	ff ff ff ff ff ff ff fa be bf ff af ff ea ff c0     ................
     b48:	c0 f0 30 3c 3c 0f ff fc 3f f0 f0 3f c0 f0 3f ff     ..0<<...?..?..?.
     b58:	f0 ff c3 c3 c0 ff c3 ff ff ff ff ff ff ff ff fa     ................
     b68:	be af ff ab ff fa ff c0 c0 f0 30 3c 3c 3f ff fc     ..........0<<?..
     b78:	3f f0 f0 ff f0 f0 ff ff f0 00 03 c3 c0 ff c3 ff     ?...............
     b88:	ff ff ff ff ff ff ff fa ff af ff eb ff fa bf c0     ................
     b98:	f0 00 f0 3c 3c 3f ff fc 3f f0 f0 ff f0 f0 ff ff     ...<<?..?.......
     ba8:	f0 00 03 c3 c0 ff c3 ff ff ff ff ff ff ff ff fb     ................
     bb8:	ff eb ff fa ff fe bf c0 f0 00 f0 3c 3c 3f ff fc     ...........<<?..
     bc8:	00 00 f0 ff f0 f0 ff ff f0 00 03 c3 c0 00 03 ff     ................
     bd8:	ff ff ff ff ff ff ff ff ff eb ff fa bf ff bf c0     ................
     be8:	f0 00 f0 3c 3c 3f ff fc 00 00 f0 ff f0 f0 ff ff     ...<<?..........
     bf8:	f0 ff c3 c3 c0 00 0f ff ff ff ff ff ff ff ff ff     ................
     c08:	ff ea ff fe bf ff ff c0 fc 03 f0 3c 3c 0f ff fc     ...........<<...
     c18:	3f f0 f0 3f c0 f0 3f ff f0 ff c3 c3 c0 ff ff ff     ?..?..?.........
     c28:	ff ff ff ff ff ff ff ff ff aa bf fa af ff ff c0     ................
     c38:	fc 03 f0 3c 3c 00 00 3c 3f f0 f0 00 00 f0 00 00     ...<<..<?.......
     c48:	f0 ff c3 c3 c0 ff ff ff ff ff ff ff ff ff ff ff     ................
     c58:	fe aa bf fa ab ff ff c0 ff 0f f0 3c 3f 00 00 3c     ...........<?..<
     c68:	3f f0 fc 00 03 fc 00 00 f0 ff c3 c3 c0 ff ff ff     ?...............
     c78:	ff ff ff ff ff ff ff ff fe aa af ea ab ff ff f3     ................
     c88:	ff ff fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c98:	ff ff ff ff f3 ff ff ff ff ff ff ff ff ff ff ff     ................
     ca8:	fa aa ab aa aa ff ff ff ff ff ff ff ff ff ff ff     ................
     cb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cc8:	ff ff ff ff ff ff ff ff ea aa aa aa aa ff ff ff     ................
     cd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ce8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cf8:	fa aa aa aa aa ff ff ff ff ff ff ff ff ff ff ff     ................
     d08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d18:	ff ff ff ff ff ff ff ff ff aa aa aa ab ff ff ff     ................
     d28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d48:	ff fa aa aa bf ff ff ff ff ff ff ff ff ff ff ff     ................
     d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ea8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ec8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ee8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ef8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fa8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fb8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000fe8 <_ZL7charRun>:
     fe8:	00 00 00 00 00 00 00 0f fc 00 00 f0 fa ab c0 03     ................
     ff8:	ff aa aa b0 03 ea aa aa ac 00 fa aa aa fc 00 0d     ................
    1008:	6a af ff 00 0d 5d 5f ff 00 03 d7 ff 3c 00 00 35     j....]_.....<..5
    1018:	57 3c 00 00 f5 57 fc 00 03 aa 57 f0 00 3e aa 60     W<...W....W..>.`
    1028:	70 00 ea a9 80 70 03 aa a9 80 c0 0e aa 96 02 c0     p....p..........
    1038:	0e 95 68 07 00 39 6a 80 03 00 0e b5 50 03 00 03     ..h..9j.....P...
    1048:	cd 40 0c 00 00 00 00 ff c0 00 00 0f aa b0 00 00     .@..............
    1058:	3a aa ac 00 f3 ea aa fc 03 fe aa aa ff 03 ea aa     :...............
    1068:	ab ff 00 f5 aa 9f fc 00 0d 55 5f 3c 00 03 f7 5f     .........U_<..._
    1078:	3c 00 00 39 f7 f0 00 00 e9 54 70 00 03 aa 98 70     <..9.....Tp....p
    1088:	00 0e aa 60 c0 00 3a aa 60 c0 00 ea a9 80 c0 03     ...`..:.`.......
    1098:	aa a9 80 c0 0e aa 96 00 c0 39 55 68 c3 00 0e aa     .........9Uh....
    10a8:	83 3c 00 03 fc 0c 00 00 00 00 0f ff f0 00 00 3a     .<.............:
    10b8:	aa ac 00 00 ea aa ff 00 03 aa ab ff 00 3f aa ab     .............?..
    10c8:	ff 00 fe aa af 3c 00 fa aa b7 3c 00 3d 55 d7 fc     .....<....<.=U..
    10d8:	00 03 d5 d7 f0 00 03 a9 54 70 00 0e aa 60 b0 00     ........Tp...`..
    10e8:	3a a9 80 b0 00 3a a6 02 b0 00 ea a6 02 c0 00 ea     :....:..........
    10f8:	98 00 c0 00 ea 98 00 c0 03 95 58 f0 c0 00 ea a3     ..........X.....
    1108:	0c c0 00 3c 0c 03 00 00 03 30 00 00 00 00 ff ff     ...<.....0......
    1118:	c0 00 03 aa aa b0 00 0e aa aa ac 00 3a aa aa ff     ............:...
    1128:	00 ea aa af ff 03 e6 ab ff fc 03 fd 9f 57 3c 00     .............W<.
    1138:	ff 57 57 3c 00 0f a5 57 fc 00 3a a9 53 f0 00 ea     .WW<...W..:.S...
    1148:	a6 80 c0 03 aa 98 00 c0 03 aa 60 02 b0 0e a9 80     ..........`.....
    1158:	02 b0 0d a9 80 0a b0 0e 69 80 02 c0 03 95 80 03     ........i.......
    1168:	00 00 ea 00 00 c0 00 3f 01 70 c0 00 00 ff cc 30     .......?.p.....0
    1178:	00 03 ff fc 00 00 3e aa ab c0 03 ea aa aa b0 0f     ......>.........
    1188:	aa aa aa ac 0f f6 aa ab ff 03 cd af af ff 00 03     ................
    1198:	75 ff fc 00 00 d5 57 3c 00 00 d5 57 3c 00 03 e5     u.....W<...W<...
    11a8:	57 fc 00 3e a9 63 f0 03 ea a6 80 c0 0e aa 98 00     W..>.c..........
    11b8:	c0 3a aa 60 02 c0 36 a9 80 02 c0 39 a6 00 0a c0     .:.`..6....9....
    11c8:	0e 56 40 0a c0 03 ab 50 03 00 00 fc c0 03 00 00     .V@....P........
    11d8:	00 3a 83 00 00 00 00 00 00 00 00 0f fc 00 00 f0     .:..............
    11e8:	fa ab c0 03 ff aa aa b0 03 ea aa aa ac 00 d6 aa     ................
    11f8:	ab fc 00 3d 6a bf ff 00 0d 5d 5f ff 00 03 d7 fc     ...=j....]_.....
    1208:	fc 00 00 35 5c fc 00 00 f5 5f fc 00 03 a9 4f f0     ...5\...._....O.
    1218:	00 3e a9 80 70 00 ea a6 00 70 03 aa a6 00 70 0e     .>..p....p....p.
    1228:	aa 58 02 c0 0e 55 a0 0a c0 39 aa 00 03 00 0e b5     .X...U...9......
    1238:	50 03 00 03 cd 4c 0c 00                             P....L..

00001240 <__ctors_start>:
    1240:	5a 09       	sbc	r21, r10

00001242 <__ctors_end>:
    1242:	11 24       	eor	r1, r1
    1244:	1f be       	out	0x3f, r1	; 63
    1246:	cf ef       	ldi	r28, 0xFF	; 255
    1248:	d8 e0       	ldi	r29, 0x08	; 8
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	cd bf       	out	0x3d, r28	; 61

0000124e <__do_copy_data>:
    124e:	11 e0       	ldi	r17, 0x01	; 1
    1250:	a0 e0       	ldi	r26, 0x00	; 0
    1252:	b1 e0       	ldi	r27, 0x01	; 1
    1254:	ec e6       	ldi	r30, 0x6C	; 108
    1256:	fd e1       	ldi	r31, 0x1D	; 29
    1258:	02 c0       	rjmp	.+4      	; 0x125e <__do_copy_data+0x10>
    125a:	05 90       	lpm	r0, Z+
    125c:	0d 92       	st	X+, r0
    125e:	a0 33       	cpi	r26, 0x30	; 48
    1260:	b1 07       	cpc	r27, r17
    1262:	d9 f7       	brne	.-10     	; 0x125a <__do_copy_data+0xc>

00001264 <__do_clear_bss>:
    1264:	21 e0       	ldi	r18, 0x01	; 1
    1266:	a0 e3       	ldi	r26, 0x30	; 48
    1268:	b1 e0       	ldi	r27, 0x01	; 1
    126a:	01 c0       	rjmp	.+2      	; 0x126e <.do_clear_bss_start>

0000126c <.do_clear_bss_loop>:
    126c:	1d 92       	st	X+, r1

0000126e <.do_clear_bss_start>:
    126e:	ac 33       	cpi	r26, 0x3C	; 60
    1270:	b2 07       	cpc	r27, r18
    1272:	e1 f7       	brne	.-8      	; 0x126c <.do_clear_bss_loop>

00001274 <__do_global_ctors>:
    1274:	19 e0       	ldi	r17, 0x09	; 9
    1276:	c1 e2       	ldi	r28, 0x21	; 33
    1278:	d9 e0       	ldi	r29, 0x09	; 9
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <__do_global_ctors+0x10>
    127c:	21 97       	sbiw	r28, 0x01	; 1
    127e:	fe 01       	movw	r30, r28
    1280:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__tablejump2__>
    1284:	c0 32       	cpi	r28, 0x20	; 32
    1286:	d1 07       	cpc	r29, r17
    1288:	c9 f7       	brne	.-14     	; 0x127c <__do_global_ctors+0x8>
    128a:	0e 94 4b 09 	call	0x1296	; 0x1296 <main>
    128e:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <_exit>

00001292 <__bad_interrupt>:
    1292:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001296 <main>:
--------------  MAIN START  --------------
//========================================*/

int main(void)
{
  beginPort(B, OUT);
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	0e 94 44 0b 	call	0x1688	; 0x1688 <_ZN3MCU7Setting9beginPortEab>
  beginSPI();
    129e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN3MCU7Setting8beginSPIEv>

  game.title();
    12a2:	80 e3       	ldi	r24, 0x30	; 48
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 04 0a 	call	0x1408	; 0x1408 <_ZN4Game5titleEv>

  while (1)
  {
    game.start();
    12aa:	80 e3       	ldi	r24, 0x30	; 48
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN4Game5startEv>
    12b2:	fb cf       	rjmp	.-10     	; 0x12aa <main+0x14>

000012b4 <_GLOBAL__sub_I_game>:
  int16_t m_Height;
  int16_t m_Temp;
  //uint16_t m_Cache[15][20];

public:
  TFT() : SPI() { m_Width = 240; m_Height = 320; }
    12b4:	e0 e3       	ldi	r30, 0x30	; 48
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	80 ef       	ldi	r24, 0xF0	; 240
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	80 83       	st	Z, r24
    12c0:	80 e4       	ldi	r24, 0x40	; 64
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	93 83       	std	Z+3, r25	; 0x03
    12c6:	82 83       	std	Z+2, r24	; 0x02
    12c8:	08 95       	ret

000012ca <_ZN4Font11printLetterEiih>:
/*----------------------------------------//
              Print 8x8 Letter
//----------------------------------------*/

void Font::printLetter(int16_t xPos, int16_t yPos, uint8_t ASCII)
{
    12ca:	8f 92       	push	r8
    12cc:	9f 92       	push	r9
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24

  uint8_t data;
  uint8_t temp;
  int16_t ASCIIValue = ASCII - 32;
    12e4:	82 2f       	mov	r24, r18
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	80 97       	sbiw	r24, 0x20	; 32
  ASCIIValue = (ASCIIValue / 16) * 128 + (ASCIIValue % 16);
    12ea:	9c 01       	movw	r18, r24
    12ec:	12 f4       	brpl	.+4      	; 0x12f2 <_ZN4Font11printLetterEiih+0x28>
    12ee:	21 5f       	subi	r18, 0xF1	; 241
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	49 01       	movw	r8, r18
    12f4:	95 94       	asr	r9
    12f6:	87 94       	ror	r8
    12f8:	95 94       	asr	r9
    12fa:	87 94       	ror	r8
    12fc:	95 94       	asr	r9
    12fe:	87 94       	ror	r8
    1300:	95 94       	asr	r9
    1302:	87 94       	ror	r8
    1304:	96 94       	lsr	r9
    1306:	98 2c       	mov	r9, r8
    1308:	88 24       	eor	r8, r8
    130a:	97 94       	ror	r9
    130c:	87 94       	ror	r8
    130e:	8f 70       	andi	r24, 0x0F	; 15
    1310:	90 78       	andi	r25, 0x80	; 128
    1312:	99 23       	and	r25, r25
    1314:	24 f4       	brge	.+8      	; 0x131e <_ZN4Font11printLetterEiih+0x54>
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	80 6f       	ori	r24, 0xF0	; 240
    131a:	9f 6f       	ori	r25, 0xFF	; 255
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	88 0e       	add	r8, r24
    1320:	99 1e       	adc	r9, r25

  setAddress(xPos, yPos, (xPos + 15), (yPos + 15));
    1322:	8a 01       	movw	r16, r20
    1324:	01 5f       	subi	r16, 0xF1	; 241
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	9b 01       	movw	r18, r22
    132a:	21 5f       	subi	r18, 0xF1	; 241
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	ce 01       	movw	r24, r28
    1330:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN3TFT10setAddressEiiii>
    1334:	54 01       	movw	r10, r8
    1336:	80 e8       	ldi	r24, 0x80	; 128
    1338:	88 0e       	add	r8, r24
    133a:	91 1c       	adc	r9, r1
/*----------------------------------------//
              Print 8x8 Letter
//----------------------------------------*/

void Font::printLetter(int16_t xPos, int16_t yPos, uint8_t ASCII)
{
    133c:	68 94       	set
    133e:	cc 24       	eor	r12, r12
    1340:	c1 f8       	bld	r12, 1
    1342:	d1 2c       	mov	r13, r1
  for (int i = 0; i < (16 / 2); i++)
  {
    for (int j = 0; j < 2; j++)
    {

      data = pgm_read_byte(&m_Bitmap[(i * 16) + ASCIIValue]);
    1344:	ee 81       	ldd	r30, Y+6	; 0x06
    1346:	ff 81       	ldd	r31, Y+7	; 0x07
    1348:	ea 0d       	add	r30, r10
    134a:	fb 1d       	adc	r31, r11
    134c:	14 91       	lpm	r17, Z
    134e:	68 94       	set
    1350:	ee 24       	eor	r14, r14
    1352:	e3 f8       	bld	r14, 3
    1354:	f1 2c       	mov	r15, r1
        temp = data >> 7;

        for (int l = 0; l < 2; l++)
        {

          if (temp == 0x00)
    1356:	11 23       	and	r17, r17
    1358:	5c f4       	brge	.+22     	; 0x1370 <_ZN4Font11printLetterEiih+0xa6>
            exportLongData(m_Background); //1Pixel = 0
          }

          else
          {
            exportLongData(m_Colored); //1Pixel = 1
    135a:	6a 85       	ldd	r22, Y+10	; 0x0a
    135c:	7b 85       	ldd	r23, Y+11	; 0x0b
    135e:	ce 01       	movw	r24, r28
    1360:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1364:	6a 85       	ldd	r22, Y+10	; 0x0a
    1366:	7b 85       	ldd	r23, Y+11	; 0x0b
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    136e:	0a c0       	rjmp	.+20     	; 0x1384 <_ZN4Font11printLetterEiih+0xba>
        for (int l = 0; l < 2; l++)
        {

          if (temp == 0x00)
          {
            exportLongData(m_Background); //1Pixel = 0
    1370:	68 85       	ldd	r22, Y+8	; 0x08
    1372:	79 85       	ldd	r23, Y+9	; 0x09
    1374:	ce 01       	movw	r24, r28
    1376:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    137a:	68 85       	ldd	r22, Y+8	; 0x08
    137c:	79 85       	ldd	r23, Y+9	; 0x09
    137e:	ce 01       	movw	r24, r28
    1380:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
            exportLongData(m_Colored); //1Pixel = 1
          }

        }

        data <<= 1;
    1384:	11 0f       	add	r17, r17
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	e8 1a       	sub	r14, r24
    138a:	f1 08       	sbc	r15, r1
    for (int j = 0; j < 2; j++)
    {

      data = pgm_read_byte(&m_Bitmap[(i * 16) + ASCIIValue]);

      for (int k = 0; k < 8; k++)
    138c:	21 f7       	brne	.-56     	; 0x1356 <_ZN4Font11printLetterEiih+0x8c>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	c8 1a       	sub	r12, r24
    1392:	d1 08       	sbc	r13, r1

  setAddress(xPos, yPos, (xPos + 15), (yPos + 15));

  for (int i = 0; i < (16 / 2); i++)
  {
    for (int j = 0; j < 2; j++)
    1394:	b9 f6       	brne	.-82     	; 0x1344 <_ZN4Font11printLetterEiih+0x7a>
    1396:	80 e1       	ldi	r24, 0x10	; 16
    1398:	a8 0e       	add	r10, r24
    139a:	b1 1c       	adc	r11, r1
  int16_t ASCIIValue = ASCII - 32;
  ASCIIValue = (ASCIIValue / 16) * 128 + (ASCIIValue % 16);

  setAddress(xPos, yPos, (xPos + 15), (yPos + 15));

  for (int i = 0; i < (16 / 2); i++)
    139c:	a8 14       	cp	r10, r8
    139e:	b9 04       	cpc	r11, r9
    13a0:	69 f6       	brne	.-102    	; 0x133c <_ZN4Font11printLetterEiih+0x72>
      }

    }
  }

}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	08 95       	ret

000013bc <_ZN4Font5printEiiPKc>:
/*----------------------------------------//
              Print String
//----------------------------------------*/

void Font::print(int16_t xPos, int16_t yPos, const char* stringValue)
{
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	7c 01       	movw	r14, r24
    13ce:	eb 01       	movw	r28, r22
    13d0:	6a 01       	movw	r12, r20
    13d2:	f9 01       	movw	r30, r18

  while (*stringValue != '\0')
    13d4:	20 81       	ld	r18, Z
    13d6:	22 23       	and	r18, r18
    13d8:	71 f0       	breq	.+28     	; 0x13f6 <_ZN4Font5printEiiPKc+0x3a>
    13da:	8f 01       	movw	r16, r30
    13dc:	0f 5f       	subi	r16, 0xFF	; 255
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    printLetter(xPos, yPos, *stringValue);
    13e0:	a6 01       	movw	r20, r12
    13e2:	be 01       	movw	r22, r28
    13e4:	c7 01       	movw	r24, r14
    13e6:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN4Font11printLetterEiih>
    stringValue++;
    xPos += 16;
    13ea:	60 96       	adiw	r28, 0x10	; 16
//----------------------------------------*/

void Font::print(int16_t xPos, int16_t yPos, const char* stringValue)
{

  while (*stringValue != '\0')
    13ec:	f8 01       	movw	r30, r16
    13ee:	21 91       	ld	r18, Z+
    13f0:	8f 01       	movw	r16, r30
    13f2:	21 11       	cpse	r18, r1
    13f4:	f5 cf       	rjmp	.-22     	; 0x13e0 <_ZN4Font5printEiiPKc+0x24>
    printLetter(xPos, yPos, *stringValue);
    stringValue++;
    xPos += 16;
  }

    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	df 90       	pop	r13
    1404:	cf 90       	pop	r12
    1406:	08 95       	ret

00001408 <_ZN4Game5titleEv>:
/*----------------------------------------//
                Game Title
//----------------------------------------*/

void Game::title(void)
{
    1408:	7f 92       	push	r7
    140a:	8f 92       	push	r8
    140c:	9f 92       	push	r9
    140e:	af 92       	push	r10
    1410:	bf 92       	push	r11
    1412:	cf 92       	push	r12
    1414:	df 92       	push	r13
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	ec 01       	movw	r28, r24
  begin();
    1424:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <_ZN3TFT5beginEv>
  setRotation(0);
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	ce 01       	movw	r24, r28
    142c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN3TFT11setRotationEa>

  fillScreen(RED);
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	78 ef       	ldi	r23, 0xF8	; 248
    1434:	ce 01       	movw	r24, r28
    1436:	0e 94 44 0c 	call	0x1888	; 0x1888 <_ZN3TFT10fillScreenEj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    143a:	2f ef       	ldi	r18, 0xFF	; 255
    143c:	89 e6       	ldi	r24, 0x69	; 105
    143e:	98 e1       	ldi	r25, 0x18	; 24
    1440:	21 50       	subi	r18, 0x01	; 1
    1442:	80 40       	sbci	r24, 0x00	; 0
    1444:	90 40       	sbci	r25, 0x00	; 0
    1446:	e1 f7       	brne	.-8      	; 0x1440 <_ZN4Game5titleEv+0x38>
    1448:	00 c0       	rjmp	.+0      	; 0x144a <_ZN4Game5titleEv+0x42>
    144a:	00 00       	nop
  _delay_ms(500);

  fillScreen(GREEN);
    144c:	60 ee       	ldi	r22, 0xE0	; 224
    144e:	77 e0       	ldi	r23, 0x07	; 7
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 44 0c 	call	0x1888	; 0x1888 <_ZN3TFT10fillScreenEj>
    1456:	2f ef       	ldi	r18, 0xFF	; 255
    1458:	89 e6       	ldi	r24, 0x69	; 105
    145a:	98 e1       	ldi	r25, 0x18	; 24
    145c:	21 50       	subi	r18, 0x01	; 1
    145e:	80 40       	sbci	r24, 0x00	; 0
    1460:	90 40       	sbci	r25, 0x00	; 0
    1462:	e1 f7       	brne	.-8      	; 0x145c <_ZN4Game5titleEv+0x54>
    1464:	00 c0       	rjmp	.+0      	; 0x1466 <_ZN4Game5titleEv+0x5e>
    1466:	00 00       	nop
  _delay_ms(500);

  fillScreen(BLUE);
    1468:	6f e1       	ldi	r22, 0x1F	; 31
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	ce 01       	movw	r24, r28
    146e:	0e 94 44 0c 	call	0x1888	; 0x1888 <_ZN3TFT10fillScreenEj>
    1472:	2f ef       	ldi	r18, 0xFF	; 255
    1474:	89 e6       	ldi	r24, 0x69	; 105
    1476:	98 e1       	ldi	r25, 0x18	; 24
    1478:	21 50       	subi	r18, 0x01	; 1
    147a:	80 40       	sbci	r24, 0x00	; 0
    147c:	90 40       	sbci	r25, 0x00	; 0
    147e:	e1 f7       	brne	.-8      	; 0x1478 <_ZN4Game5titleEv+0x70>
    1480:	00 c0       	rjmp	.+0      	; 0x1482 <_ZN4Game5titleEv+0x7a>
    1482:	00 00       	nop
  _delay_ms(500);

  fillScreen(WHITE);
    1484:	6f ef       	ldi	r22, 0xFF	; 255
    1486:	7f ef       	ldi	r23, 0xFF	; 255
    1488:	ce 01       	movw	r24, r28
    148a:	0e 94 44 0c 	call	0x1888	; 0x1888 <_ZN3TFT10fillScreenEj>
  drawBitmap(0, 30, 160, 80, logoAtmel, BLACK, RED, BLUE, WHITE);
    148e:	77 24       	eor	r7, r7
    1490:	7a 94       	dec	r7
    1492:	7f 92       	push	r7
    1494:	7f 92       	push	r7
    1496:	0f 2e       	mov	r0, r31
    1498:	ff e1       	ldi	r31, 0x1F	; 31
    149a:	8f 2e       	mov	r8, r31
    149c:	91 2c       	mov	r9, r1
    149e:	f0 2d       	mov	r31, r0
    14a0:	0f 2e       	mov	r0, r31
    14a2:	a1 2c       	mov	r10, r1
    14a4:	f8 ef       	ldi	r31, 0xF8	; 248
    14a6:	bf 2e       	mov	r11, r31
    14a8:	f0 2d       	mov	r31, r0
    14aa:	c1 2c       	mov	r12, r1
    14ac:	d1 2c       	mov	r13, r1
    14ae:	0f 2e       	mov	r0, r31
    14b0:	f8 e6       	ldi	r31, 0x68	; 104
    14b2:	ef 2e       	mov	r14, r31
    14b4:	f3 e0       	ldi	r31, 0x03	; 3
    14b6:	ff 2e       	mov	r15, r31
    14b8:	f0 2d       	mov	r31, r0
    14ba:	00 e5       	ldi	r16, 0x50	; 80
    14bc:	10 e0       	ldi	r17, 0x00	; 0
    14be:	20 ea       	ldi	r18, 0xA0	; 160
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4e e1       	ldi	r20, 0x1E	; 30
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	ce 01       	movw	r24, r28
    14cc:	0e 94 89 0c 	call	0x1912	; 0x1912 <_ZN3TFT10drawBitmapEiiiiPKhjjjj>
    14d0:	2f ef       	ldi	r18, 0xFF	; 255
    14d2:	89 e6       	ldi	r24, 0x69	; 105
    14d4:	98 e1       	ldi	r25, 0x18	; 24
    14d6:	21 50       	subi	r18, 0x01	; 1
    14d8:	80 40       	sbci	r24, 0x00	; 0
    14da:	90 40       	sbci	r25, 0x00	; 0
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <_ZN4Game5titleEv+0xce>
    14de:	00 c0       	rjmp	.+0      	; 0x14e0 <_ZN4Game5titleEv+0xd8>
    14e0:	00 00       	nop
  _delay_ms(500);

  drawBitmapTwice(0, 30, 320, 160, logoAtmel, BLACK, RED, BLUE, WHITE);
    14e2:	7f 92       	push	r7
    14e4:	7f 92       	push	r7
    14e6:	00 ea       	ldi	r16, 0xA0	; 160
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	20 e4       	ldi	r18, 0x40	; 64
    14ec:	31 e0       	ldi	r19, 0x01	; 1
    14ee:	4e e1       	ldi	r20, 0x1E	; 30
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	ce 01       	movw	r24, r28
    14f8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj>
    14fc:	2f ef       	ldi	r18, 0xFF	; 255
    14fe:	8b e7       	ldi	r24, 0x7B	; 123
    1500:	92 e9       	ldi	r25, 0x92	; 146
    1502:	21 50       	subi	r18, 0x01	; 1
    1504:	80 40       	sbci	r24, 0x00	; 0
    1506:	90 40       	sbci	r25, 0x00	; 0
    1508:	e1 f7       	brne	.-8      	; 0x1502 <_ZN4Game5titleEv+0xfa>
    150a:	00 c0       	rjmp	.+0      	; 0x150c <_ZN4Game5titleEv+0x104>
    150c:	00 00       	nop
  _delay_ms(3000);

  fillScreen(BLACK);
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	ce 01       	movw	r24, r28
    1514:	0e 94 44 0c 	call	0x1888	; 0x1888 <_ZN3TFT10fillScreenEj>
public:
  Font() : TFT(){};
  Font(const uint8_t *bitmap) : TFT() { m_Bitmap = bitmap; }
  ~Font(){};

  void setFont(const uint8_t *bitmap) { m_Bitmap = bitmap; }
    1518:	88 e6       	ldi	r24, 0x68	; 104
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9f 83       	std	Y+7, r25	; 0x07
    151e:	8e 83       	std	Y+6, r24	; 0x06
  void setColor(uint16_t color0Bit, uint16_t color1Bit) { m_Background = color0Bit; m_Colored = color1Bit; }
    1520:	19 86       	std	Y+9, r1	; 0x09
    1522:	18 86       	std	Y+8, r1	; 0x08
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	9f ef       	ldi	r25, 0xFF	; 255
    1528:	9b 87       	std	Y+11, r25	; 0x0b
    152a:	8a 87       	std	Y+10, r24	; 0x0a
  setFont(fontASCII);
  setColor(BLACK, WHITE);
  print(30, 70, "Hello, World!");
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	31 e0       	ldi	r19, 0x01	; 1
    1530:	46 e4       	ldi	r20, 0x46	; 70
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	6e e1       	ldi	r22, 0x1E	; 30
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	ce 01       	movw	r24, r28
    153a:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN4Font5printEiiPKc>
    153e:	2f ef       	ldi	r18, 0xFF	; 255
    1540:	83 ed       	ldi	r24, 0xD3	; 211
    1542:	90 e3       	ldi	r25, 0x30	; 48
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	80 40       	sbci	r24, 0x00	; 0
    1548:	90 40       	sbci	r25, 0x00	; 0
    154a:	e1 f7       	brne	.-8      	; 0x1544 <_ZN4Game5titleEv+0x13c>
    154c:	00 c0       	rjmp	.+0      	; 0x154e <_ZN4Game5titleEv+0x146>
    154e:	00 00       	nop
    1550:	19 86       	std	Y+9, r1	; 0x09
    1552:	18 86       	std	Y+8, r1	; 0x08
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	97 e0       	ldi	r25, 0x07	; 7
    1558:	9b 87       	std	Y+11, r25	; 0x0b
    155a:	8a 87       	std	Y+10, r24	; 0x0a
  _delay_ms(1000);

  setColor(BLACK, CYAN);
  print(30, 120, "And Welcome to");
    155c:	2e e0       	ldi	r18, 0x0E	; 14
    155e:	31 e0       	ldi	r19, 0x01	; 1
    1560:	48 e7       	ldi	r20, 0x78	; 120
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	6e e1       	ldi	r22, 0x1E	; 30
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	ce 01       	movw	r24, r28
    156a:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN4Font5printEiiPKc>
    156e:	19 86       	std	Y+9, r1	; 0x09
    1570:	18 86       	std	Y+8, r1	; 0x08
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	98 ef       	ldi	r25, 0xF8	; 248
    1576:	9b 87       	std	Y+11, r25	; 0x0b
    1578:	8a 87       	std	Y+10, r24	; 0x0a
  setColor(BLACK, RED);
  print(30, 136, "Atmega Game (^0^)");
    157a:	2d e1       	ldi	r18, 0x1D	; 29
    157c:	31 e0       	ldi	r19, 0x01	; 1
    157e:	48 e8       	ldi	r20, 0x88	; 136
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	6e e1       	ldi	r22, 0x1E	; 30
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	ce 01       	movw	r24, r28
    1588:	0e 94 de 09 	call	0x13bc	; 0x13bc <_ZN4Font5printEiiPKc>
    158c:	2f ef       	ldi	r18, 0xFF	; 255
    158e:	83 e2       	ldi	r24, 0x23	; 35
    1590:	94 ef       	ldi	r25, 0xF4	; 244
    1592:	21 50       	subi	r18, 0x01	; 1
    1594:	80 40       	sbci	r24, 0x00	; 0
    1596:	90 40       	sbci	r25, 0x00	; 0
    1598:	e1 f7       	brne	.-8      	; 0x1592 <_ZN4Game5titleEv+0x18a>
    159a:	00 c0       	rjmp	.+0      	; 0x159c <_ZN4Game5titleEv+0x194>
    159c:	00 00       	nop
  _delay_ms(5000);
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	08 95       	ret

000015c2 <_ZN4Game5startEv>:
/*----------------------------------------//
                Start Game
//----------------------------------------*/

void Game::start(void)
{
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	29 97       	sbiw	r28, 0x09	; 9
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
  fillScreen(BLACK);
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	0e 94 44 0c 	call	0x1888	; 0x1888 <_ZN3TFT10fillScreenEj>
    15de:	8f e3       	ldi	r24, 0x3F	; 63
    15e0:	9c e9       	ldi	r25, 0x9C	; 156
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <_ZN4Game5startEv+0x20>
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <_ZN4Game5startEv+0x26>
    15e8:	00 00       	nop
  int16_t m_Height;
  int16_t m_Temp;
  //uint16_t m_Cache[15][20];

public:
  TFT() : SPI() { m_Width = 240; m_Height = 320; }
    15ea:	80 ef       	ldi	r24, 0xF0	; 240
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	80 e4       	ldi	r24, 0x40	; 64
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
  int8_t m_YPos;
  int8_t m_Life;
  int8_t m_Weapon;

public:
  Player() : TFT() { m_Life = 3; }
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	88 87       	std	Y+8, r24	; 0x08
  
  Player user;

  while (1)
  {
    user.startPlayer();
    15fe:	ce 01       	movw	r24, r28
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN6Player11startPlayerEv>
    1606:	fb cf       	rjmp	.-10     	; 0x15fe <_ZN4Game5startEv+0x3c>

00001608 <_ZN6Player11startPlayerEv>:
/*----------------------------------------//
                Start Game
//----------------------------------------*/

void Player::startPlayer(void)
{
    1608:	6f 92       	push	r6
    160a:	7f 92       	push	r7
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	cf 93       	push	r28
    1620:	3c 01       	movw	r6, r24
    1622:	c0 e0       	ldi	r28, 0x00	; 0
  for (int i=0; i<6; i++)
  {
    drawTile(60, 120, charRun, i, BLACK, MAROON, RED, WHITE);
    1624:	88 24       	eor	r8, r8
    1626:	8a 94       	dec	r8
    1628:	98 2c       	mov	r9, r8
    162a:	0f 2e       	mov	r0, r31
    162c:	a1 2c       	mov	r10, r1
    162e:	f8 ef       	ldi	r31, 0xF8	; 248
    1630:	bf 2e       	mov	r11, r31
    1632:	f0 2d       	mov	r31, r0
    1634:	0f 2e       	mov	r0, r31
    1636:	c1 2c       	mov	r12, r1
    1638:	f8 e7       	ldi	r31, 0x78	; 120
    163a:	df 2e       	mov	r13, r31
    163c:	f0 2d       	mov	r31, r0
    163e:	e1 2c       	mov	r14, r1
    1640:	f1 2c       	mov	r15, r1
    1642:	0c 2f       	mov	r16, r28
    1644:	28 ee       	ldi	r18, 0xE8	; 232
    1646:	3f e0       	ldi	r19, 0x0F	; 15
    1648:	48 e7       	ldi	r20, 0x78	; 120
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	6c e3       	ldi	r22, 0x3C	; 60
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	c3 01       	movw	r24, r6
    1652:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN3TFT8drawTileEiiPA100_Khajjjj>
    1656:	2f ef       	ldi	r18, 0xFF	; 255
    1658:	81 ee       	ldi	r24, 0xE1	; 225
    165a:	94 e0       	ldi	r25, 0x04	; 4
    165c:	21 50       	subi	r18, 0x01	; 1
    165e:	80 40       	sbci	r24, 0x00	; 0
    1660:	90 40       	sbci	r25, 0x00	; 0
    1662:	e1 f7       	brne	.-8      	; 0x165c <_ZN6Player11startPlayerEv+0x54>
    1664:	00 c0       	rjmp	.+0      	; 0x1666 <_ZN6Player11startPlayerEv+0x5e>
    1666:	00 00       	nop
    1668:	cf 5f       	subi	r28, 0xFF	; 255
                Start Game
//----------------------------------------*/

void Player::startPlayer(void)
{
  for (int i=0; i<6; i++)
    166a:	c6 30       	cpi	r28, 0x06	; 6
    166c:	d9 f6       	brne	.-74     	; 0x1624 <_ZN6Player11startPlayerEv+0x1c>
  {
    drawTile(60, 120, charRun, i, BLACK, MAROON, RED, WHITE);
    _delay_ms(100);
  }
    166e:	cf 91       	pop	r28
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	bf 90       	pop	r11
    167c:	af 90       	pop	r10
    167e:	9f 90       	pop	r9
    1680:	8f 90       	pop	r8
    1682:	7f 90       	pop	r7
    1684:	6f 90       	pop	r6
    1686:	08 95       	ret

00001688 <_ZN3MCU7Setting9beginPortEab>:
    else
    {
      TCCR1A |= 0x03 | (1 << COM1B1); // 256, Fast PWM Mode
      TCCR1B = 0x0C;
      TCNT1H = 0x00; // Start Counting 0x0000
      TCNT1L = 0x00;
    1688:	61 95       	neg	r22
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	39 f0       	breq	.+14     	; 0x169c <_ZN3MCU7Setting9beginPortEab+0x14>
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	41 f0       	breq	.+16     	; 0x16a2 <_ZN3MCU7Setting9beginPortEab+0x1a>
    1692:	81 11       	cpse	r24, r1
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <_ZN3MCU7Setting9beginPortEab+0x1e>
    1696:	64 b9       	out	0x04, r22	; 4
    1698:	15 b8       	out	0x05, r1	; 5
    169a:	08 95       	ret
    169c:	67 b9       	out	0x07, r22	; 7
    169e:	18 b8       	out	0x08, r1	; 8
    16a0:	08 95       	ret
    16a2:	6a b9       	out	0x0a, r22	; 10
    16a4:	1b b8       	out	0x0b, r1	; 11
    16a6:	08 95       	ret

000016a8 <_ZN3MCU7Setting8beginSPIEv>:
            Begin SPI Protocol
//----------------------------------------*/

void MCU::Setting::beginSPI(void)
{
  SPCR = (1 << SPE) | (1 << MSTR);
    16a8:	80 e5       	ldi	r24, 0x50	; 80
    16aa:	8c bd       	out	0x2c, r24	; 44
  SPSR = (1 << SPI2X); 
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	8d bd       	out	0x2d, r24	; 45
    16b0:	08 95       	ret

000016b2 <_ZN3SPI7sendBitEh>:
              Send Serial Bit
//----------------------------------------*/

void SPI::sendBit(uint8_t bitValue)
{
  SPDR = bitValue;
    16b2:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & 0x80));
    16b4:	0d b4       	in	r0, 0x2d	; 45
    16b6:	07 fe       	sbrs	r0, 7
    16b8:	fd cf       	rjmp	.-6      	; 0x16b4 <_ZN3SPI7sendBitEh+0x2>
}
    16ba:	08 95       	ret

000016bc <_ZN3SPI13exportCommandEh>:
              Export Command
//----------------------------------------*/

void SPI::exportCommand(uint8_t commandValue)
{
  RS_LOW;
    16bc:	2a 98       	cbi	0x05, 2	; 5
  CS_LOW;
    16be:	28 98       	cbi	0x05, 0	; 5

  sendBit(commandValue);
    16c0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN3SPI7sendBitEh>

  CS_HIGH;
    16c4:	28 9a       	sbi	0x05, 0	; 5
    16c6:	08 95       	ret

000016c8 <_ZN3SPI10exportDataEh>:
              Export Data
//----------------------------------------*/

void SPI::exportData(uint8_t dataValue)
{
  RS_HIGH;
    16c8:	2a 9a       	sbi	0x05, 2	; 5
  CS_LOW;
    16ca:	28 98       	cbi	0x05, 0	; 5

  sendBit(dataValue);
    16cc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN3SPI7sendBitEh>

  CS_HIGH;
    16d0:	28 9a       	sbi	0x05, 0	; 5
    16d2:	08 95       	ret

000016d4 <_ZN3SPI14exportLongDataEj>:
/*----------------------------------------//
            Export Long Data
//----------------------------------------*/

void SPI::exportLongData(uint16_t longDataValue)
{
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	ec 01       	movw	r28, r24
    16dc:	16 2f       	mov	r17, r22
    16de:	67 2f       	mov	r22, r23
  RS_HIGH;
    16e0:	2a 9a       	sbi	0x05, 2	; 5
  CS_LOW;
    16e2:	28 98       	cbi	0x05, 0	; 5

  sendBit(longDataValue >> 8);
    16e4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN3SPI7sendBitEh>
  sendBit(longDataValue & 0xFF);
    16e8:	61 2f       	mov	r22, r17
    16ea:	ce 01       	movw	r24, r28
    16ec:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN3SPI7sendBitEh>

  CS_HIGH;
    16f0:	28 9a       	sbi	0x05, 0	; 5
}
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	08 95       	ret

000016fa <_ZN3TFT5beginEv>:
/*----------------------------------------//
              Begin TFT LCD
//----------------------------------------*/

void TFT::begin(void)
{
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
  CS_HIGH;
    1700:	28 9a       	sbi	0x05, 0	; 5
  RST_LOW;
    1702:	29 98       	cbi	0x05, 1	; 5
    1704:	2f ef       	ldi	r18, 0xFF	; 255
    1706:	89 ef       	ldi	r24, 0xF9	; 249
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	21 50       	subi	r18, 0x01	; 1
    170c:	80 40       	sbci	r24, 0x00	; 0
    170e:	90 40       	sbci	r25, 0x00	; 0
    1710:	e1 f7       	brne	.-8      	; 0x170a <_ZN3TFT5beginEv+0x10>
    1712:	00 c0       	rjmp	.+0      	; 0x1714 <_ZN3TFT5beginEv+0x1a>
    1714:	00 00       	nop
  _delay_ms(20);
  RST_HIGH;
    1716:	29 9a       	sbi	0x05, 1	; 5
    1718:	2f ef       	ldi	r18, 0xFF	; 255
    171a:	89 e6       	ldi	r24, 0x69	; 105
    171c:	98 e1       	ldi	r25, 0x18	; 24
    171e:	21 50       	subi	r18, 0x01	; 1
    1720:	80 40       	sbci	r24, 0x00	; 0
    1722:	90 40       	sbci	r25, 0x00	; 0
    1724:	e1 f7       	brne	.-8      	; 0x171e <_ZN3TFT5beginEv+0x24>
    1726:	00 c0       	rjmp	.+0      	; 0x1728 <_ZN3TFT5beginEv+0x2e>
    1728:	00 00       	nop
  _delay_ms(500);

  exportCommand(0x01); // Software Reset (01h)
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	ce 01       	movw	r24, r28
    172e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>
    1732:	2f ef       	ldi	r18, 0xFF	; 255
    1734:	89 ef       	ldi	r24, 0xF9	; 249
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	21 50       	subi	r18, 0x01	; 1
    173a:	80 40       	sbci	r24, 0x00	; 0
    173c:	90 40       	sbci	r25, 0x00	; 0
    173e:	e1 f7       	brne	.-8      	; 0x1738 <_ZN3TFT5beginEv+0x3e>
    1740:	00 c0       	rjmp	.+0      	; 0x1742 <_ZN3TFT5beginEv+0x48>
    1742:	00 00       	nop
  _delay_ms(20);

  exportCommand(0xC0); // Power Control 1 (C0h)
    1744:	60 ec       	ldi	r22, 0xC0	; 192
    1746:	ce 01       	movw	r24, r28
    1748:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>
  exportData(0x2B);    // VRH[5:0] 5.00 V
    174c:	6b e2       	ldi	r22, 0x2B	; 43
    174e:	ce 01       	movw	r24, r28
    1750:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN3SPI10exportDataEh>

  exportCommand(0x36); // Memory Access Control (36h)
    1754:	66 e3       	ldi	r22, 0x36	; 54
    1756:	ce 01       	movw	r24, r28
    1758:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>
  exportData(0x48);    // Column Address Order, RGB-BGR Order
    175c:	68 e4       	ldi	r22, 0x48	; 72
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN3SPI10exportDataEh>

  exportCommand(0x3A); // COLMOD: Pixel Format Set (3Ah)
    1764:	6a e3       	ldi	r22, 0x3A	; 58
    1766:	ce 01       	movw	r24, r28
    1768:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>
  exportData(0x55);    // 16 bits / pixel
    176c:	65 e5       	ldi	r22, 0x55	; 85
    176e:	ce 01       	movw	r24, r28
    1770:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN3SPI10exportDataEh>

  exportCommand(0x20); // Display Inversion OFF (20h)
    1774:	60 e2       	ldi	r22, 0x20	; 32
    1776:	ce 01       	movw	r24, r28
    1778:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>

  exportCommand(0x11); // Sleep Out (11h)
    177c:	61 e1       	ldi	r22, 0x11	; 17
    177e:	ce 01       	movw	r24, r28
    1780:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>
    1784:	2f ef       	ldi	r18, 0xFF	; 255
    1786:	89 ef       	ldi	r24, 0xF9	; 249
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	21 50       	subi	r18, 0x01	; 1
    178c:	80 40       	sbci	r24, 0x00	; 0
    178e:	90 40       	sbci	r25, 0x00	; 0
    1790:	e1 f7       	brne	.-8      	; 0x178a <_ZN3TFT5beginEv+0x90>
    1792:	00 c0       	rjmp	.+0      	; 0x1794 <_ZN3TFT5beginEv+0x9a>
    1794:	00 00       	nop
  _delay_ms(20);

  exportCommand(0x29); // Display ON (29h)
    1796:	69 e2       	ldi	r22, 0x29	; 41
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <_ZN3TFT11setRotationEa>:
/*----------------------------------------//
              Set Rotation
//----------------------------------------*/

void TFT::setRotation(int8_t rotation)
{
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	ec 01       	movw	r28, r24
    17ac:	16 2f       	mov	r17, r22

  exportCommand(0x36); // Memory Access Control (36h)
    17ae:	66 e3       	ldi	r22, 0x36	; 54
    17b0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>

  switch (rotation)
    17b4:	11 30       	cpi	r17, 0x01	; 1
    17b6:	c1 f0       	breq	.+48     	; 0x17e8 <_ZN3TFT11setRotationEa+0x44>
    17b8:	1c f4       	brge	.+6      	; 0x17c0 <_ZN3TFT11setRotationEa+0x1c>
    17ba:	11 23       	and	r17, r17
    17bc:	31 f0       	breq	.+12     	; 0x17ca <_ZN3TFT11setRotationEa+0x26>
    17be:	2c c0       	rjmp	.+88     	; 0x1818 <_ZN3TFT11setRotationEa+0x74>
    17c0:	12 30       	cpi	r17, 0x02	; 2
    17c2:	b9 f0       	breq	.+46     	; 0x17f2 <_ZN3TFT11setRotationEa+0x4e>
    17c4:	13 30       	cpi	r17, 0x03	; 3
    17c6:	d1 f0       	breq	.+52     	; 0x17fc <_ZN3TFT11setRotationEa+0x58>
    17c8:	27 c0       	rjmp	.+78     	; 0x1818 <_ZN3TFT11setRotationEa+0x74>
  {
  case 0:
    exportData(0x28); //(MADCTL_MV | MADCTL_BGR)
    17ca:	68 e2       	ldi	r22, 0x28	; 40
    17cc:	ce 01       	movw	r24, r28
    17ce:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN3SPI10exportDataEh>
    m_Temp = m_Width;
    17d2:	88 81       	ld	r24, Y
    17d4:	99 81       	ldd	r25, Y+1	; 0x01
    17d6:	9d 83       	std	Y+5, r25	; 0x05
    17d8:	8c 83       	std	Y+4, r24	; 0x04
    m_Width = m_Height;
    17da:	2a 81       	ldd	r18, Y+2	; 0x02
    17dc:	3b 81       	ldd	r19, Y+3	; 0x03
    17de:	39 83       	std	Y+1, r19	; 0x01
    17e0:	28 83       	st	Y, r18
    m_Height = m_Temp;
    17e2:	9b 83       	std	Y+3, r25	; 0x03
    17e4:	8a 83       	std	Y+2, r24	; 0x02
    break;
    17e6:	18 c0       	rjmp	.+48     	; 0x1818 <_ZN3TFT11setRotationEa+0x74>

  case 1:
    exportData(0x48); //(MADCTL_MX | MADCTL_BGR)
    17e8:	68 e4       	ldi	r22, 0x48	; 72
    17ea:	ce 01       	movw	r24, r28
    17ec:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN3SPI10exportDataEh>
    break;
    17f0:	13 c0       	rjmp	.+38     	; 0x1818 <_ZN3TFT11setRotationEa+0x74>

  case 2:
    exportData(0x88); //(MADCTL_MY | MADCTL_BGR)
    17f2:	68 e8       	ldi	r22, 0x88	; 136
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN3SPI10exportDataEh>
    break;
    17fa:	0e c0       	rjmp	.+28     	; 0x1818 <_ZN3TFT11setRotationEa+0x74>

  case 3:
    exportData(0xE8); //(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR)
    17fc:	68 ee       	ldi	r22, 0xE8	; 232
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN3SPI10exportDataEh>
    m_Temp = m_Width;
    1804:	88 81       	ld	r24, Y
    1806:	99 81       	ldd	r25, Y+1	; 0x01
    1808:	9d 83       	std	Y+5, r25	; 0x05
    180a:	8c 83       	std	Y+4, r24	; 0x04
    m_Width = m_Height;
    180c:	2a 81       	ldd	r18, Y+2	; 0x02
    180e:	3b 81       	ldd	r19, Y+3	; 0x03
    1810:	39 83       	std	Y+1, r19	; 0x01
    1812:	28 83       	st	Y, r18
    m_Height = m_Temp;
    1814:	9b 83       	std	Y+3, r25	; 0x03
    1816:	8a 83       	std	Y+2, r24	; 0x02

  default:
    break;
  }

}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	08 95       	ret

00001820 <_ZN3TFT10setAddressEiiii>:
/*----------------------------------------//
              Set Address
//----------------------------------------*/

void TFT::setAddress(int16_t xPos, int16_t yPos, int16_t width, int16_t height)
{
    1820:	af 92       	push	r10
    1822:	bf 92       	push	r11
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
    1836:	5b 01       	movw	r10, r22
    1838:	7a 01       	movw	r14, r20
    183a:	69 01       	movw	r12, r18
  exportCommand(0x2A); // Column Address set 0x2A
    183c:	6a e2       	ldi	r22, 0x2A	; 42
    183e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>

  exportLongData(xPos); // xPosition
    1842:	b5 01       	movw	r22, r10
    1844:	ce 01       	movw	r24, r28
    1846:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
  exportLongData(width);
    184a:	b6 01       	movw	r22, r12
    184c:	ce 01       	movw	r24, r28
    184e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>

  exportCommand(0x2B); // Page Address Set 0x2B
    1852:	6b e2       	ldi	r22, 0x2B	; 43
    1854:	ce 01       	movw	r24, r28
    1856:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>

  exportLongData(yPos); // yPosition
    185a:	b7 01       	movw	r22, r14
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
  exportLongData(height);
    1862:	b8 01       	movw	r22, r16
    1864:	ce 01       	movw	r24, r28
    1866:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>

  exportCommand(0x2C); // Memory Write 0x2C
    186a:	6c e2       	ldi	r22, 0x2C	; 44
    186c:	ce 01       	movw	r24, r28
    186e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN3SPI13exportCommandEh>
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	bf 90       	pop	r11
    1884:	af 90       	pop	r10
    1886:	08 95       	ret

00001888 <_ZN3TFT10fillScreenEj>:
/*----------------------------------------//
              Fill Screen
//----------------------------------------*/

void TFT::fillScreen(uint16_t colorValue)
{
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	7c 01       	movw	r14, r24
    189a:	6b 01       	movw	r12, r22

  setAddress(0, 0, (m_Width - 1), (m_Height - 1));
    189c:	fc 01       	movw	r30, r24
    189e:	02 81       	ldd	r16, Z+2	; 0x02
    18a0:	13 81       	ldd	r17, Z+3	; 0x03
    18a2:	01 50       	subi	r16, 0x01	; 1
    18a4:	11 09       	sbc	r17, r1
    18a6:	20 81       	ld	r18, Z
    18a8:	31 81       	ldd	r19, Z+1	; 0x01
    18aa:	21 50       	subi	r18, 0x01	; 1
    18ac:	31 09       	sbc	r19, r1
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN3TFT10setAddressEiiii>

  for (int i = 0; i < m_Height; i++)
    18ba:	f7 01       	movw	r30, r14
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	18 16       	cp	r1, r24
    18c2:	19 06       	cpc	r1, r25
    18c4:	ec f4       	brge	.+58     	; 0x1900 <_ZN3TFT10fillScreenEj+0x78>
    18c6:	00 e0       	ldi	r16, 0x00	; 0
    18c8:	10 e0       	ldi	r17, 0x00	; 0
  {
    for (int j = 0; j < m_Width; j++)
    18ca:	f7 01       	movw	r30, r14
    18cc:	80 81       	ld	r24, Z
    18ce:	91 81       	ldd	r25, Z+1	; 0x01
    18d0:	18 16       	cp	r1, r24
    18d2:	19 06       	cpc	r1, r25
    18d4:	6c f4       	brge	.+26     	; 0x18f0 <_ZN3TFT10fillScreenEj+0x68>
    18d6:	c0 e0       	ldi	r28, 0x00	; 0
    18d8:	d0 e0       	ldi	r29, 0x00	; 0
    {
      exportLongData(colorValue);
    18da:	b6 01       	movw	r22, r12
    18dc:	c7 01       	movw	r24, r14
    18de:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>

  setAddress(0, 0, (m_Width - 1), (m_Height - 1));

  for (int i = 0; i < m_Height; i++)
  {
    for (int j = 0; j < m_Width; j++)
    18e2:	21 96       	adiw	r28, 0x01	; 1
    18e4:	f7 01       	movw	r30, r14
    18e6:	80 81       	ld	r24, Z
    18e8:	91 81       	ldd	r25, Z+1	; 0x01
    18ea:	c8 17       	cp	r28, r24
    18ec:	d9 07       	cpc	r29, r25
    18ee:	ac f3       	brlt	.-22     	; 0x18da <_ZN3TFT10fillScreenEj+0x52>
void TFT::fillScreen(uint16_t colorValue)
{

  setAddress(0, 0, (m_Width - 1), (m_Height - 1));

  for (int i = 0; i < m_Height; i++)
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	f7 01       	movw	r30, r14
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	08 17       	cp	r16, r24
    18fc:	19 07       	cpc	r17, r25
    18fe:	2c f3       	brlt	.-54     	; 0x18ca <_ZN3TFT10fillScreenEj+0x42>
    {
      exportLongData(colorValue);
    }
  }

}
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	08 95       	ret

00001912 <_ZN3TFT10drawBitmapEiiiiPKhjjjj>:
/*----------------------------------------//
              Draw Bitmap
//----------------------------------------*/

void TFT::drawBitmap(int16_t xPos, int16_t yPos, int16_t width, int16_t height, const uint8_t *bitmap, uint16_t color0Bit, uint16_t color1Bit, uint16_t color2Bit, uint16_t color3Bit)
{
    1912:	2f 92       	push	r2
    1914:	3f 92       	push	r3
    1916:	4f 92       	push	r4
    1918:	5f 92       	push	r5
    191a:	6f 92       	push	r6
    191c:	7f 92       	push	r7
    191e:	8f 92       	push	r8
    1920:	9f 92       	push	r9
    1922:	af 92       	push	r10
    1924:	bf 92       	push	r11
    1926:	cf 92       	push	r12
    1928:	df 92       	push	r13
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	2a 97       	sbiw	r28, 0x0a	; 10
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	3c 01       	movw	r6, r24
    1948:	29 01       	movw	r4, r18
    194a:	18 87       	std	Y+8, r17	; 0x08
    194c:	0f 83       	std	Y+7, r16	; 0x07
    194e:	16 01       	movw	r2, r12
    1950:	ba 82       	std	Y+2, r11	; 0x02
    1952:	a9 82       	std	Y+1, r10	; 0x01
    1954:	9c 82       	std	Y+4, r9	; 0x04
    1956:	8b 82       	std	Y+3, r8	; 0x03

  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));
    1958:	04 0f       	add	r16, r20
    195a:	15 1f       	adc	r17, r21
    195c:	01 50       	subi	r16, 0x01	; 1
    195e:	11 09       	sbc	r17, r1
    1960:	9b 01       	movw	r18, r22
    1962:	24 0d       	add	r18, r4
    1964:	35 1d       	adc	r19, r5
    1966:	21 50       	subi	r18, 0x01	; 1
    1968:	31 09       	sbc	r19, r1
    196a:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN3TFT10setAddressEiiii>

  for (int i = 0; i < height; i++)
    196e:	2f 81       	ldd	r18, Y+7	; 0x07
    1970:	38 85       	ldd	r19, Y+8	; 0x08
    1972:	12 16       	cp	r1, r18
    1974:	13 06       	cpc	r1, r19
    1976:	0c f0       	brlt	.+2      	; 0x197a <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x68>
    1978:	5b c0       	rjmp	.+182    	; 0x1a30 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x11e>
  {
    for (int j = 0; j < (width / 4); j++)
    197a:	c2 01       	movw	r24, r4
    197c:	99 23       	and	r25, r25
    197e:	0c f4       	brge	.+2      	; 0x1982 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x70>
    1980:	03 96       	adiw	r24, 0x03	; 3
    1982:	fc 01       	movw	r30, r24
    1984:	f5 95       	asr	r31
    1986:	e7 95       	ror	r30
    1988:	f5 95       	asr	r31
    198a:	e7 95       	ror	r30
    198c:	fa 87       	std	Y+10, r31	; 0x0a
    198e:	e9 87       	std	Y+9, r30	; 0x09
    1990:	fe 83       	std	Y+6, r31	; 0x06
    1992:	ed 83       	std	Y+5, r30	; 0x05
    1994:	ae 2c       	mov	r10, r14
    1996:	bf 2c       	mov	r11, r15
    1998:	41 2c       	mov	r4, r1
    199a:	51 2c       	mov	r5, r1
    199c:	29 85       	ldd	r18, Y+9	; 0x09
    199e:	3a 85       	ldd	r19, Y+10	; 0x0a
    19a0:	12 16       	cp	r1, r18
    19a2:	13 06       	cpc	r1, r19
    19a4:	c4 f5       	brge	.+112    	; 0x1a16 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x104>
    19a6:	ed 80       	ldd	r14, Y+5	; 0x05
    19a8:	fe 80       	ldd	r15, Y+6	; 0x06
    19aa:	ea 0c       	add	r14, r10
    19ac:	fb 1c       	adc	r15, r11
    19ae:	85 01       	movw	r16, r10
    {

      data = pgm_read_byte(&bitmap[i * (width / 4) + j]);
    19b0:	f8 01       	movw	r30, r16
    19b2:	94 90       	lpm	r9, Z
    19b4:	68 94       	set
    19b6:	cc 24       	eor	r12, r12
    19b8:	c2 f8       	bld	r12, 2
    19ba:	d1 2c       	mov	r13, r1

      for (int k = 0; k < 4; k++)
      {
        temp = data >> 6;
    19bc:	89 2d       	mov	r24, r9
    19be:	82 95       	swap	r24
    19c0:	86 95       	lsr	r24
    19c2:	86 95       	lsr	r24
    19c4:	83 70       	andi	r24, 0x03	; 3

        if (temp == 0x00) //1Pixel = 00
    19c6:	29 f4       	brne	.+10     	; 0x19d2 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xc0>
        {
          exportLongData(color0Bit);
    19c8:	b1 01       	movw	r22, r2
    19ca:	c3 01       	movw	r24, r6
    19cc:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    19d0:	17 c0       	rjmp	.+46     	; 0x1a00 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xee>
        }

        else if (temp == 0x01) //1Pixel = 01
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	31 f4       	brne	.+12     	; 0x19e2 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xd0>
        {
          exportLongData(color1Bit);
    19d6:	69 81       	ldd	r22, Y+1	; 0x01
    19d8:	7a 81       	ldd	r23, Y+2	; 0x02
    19da:	c3 01       	movw	r24, r6
    19dc:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    19e0:	0f c0       	rjmp	.+30     	; 0x1a00 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xee>
        }

        else if (temp == 0x02) //1Pixel = 10
    19e2:	82 30       	cpi	r24, 0x02	; 2
    19e4:	31 f4       	brne	.+12     	; 0x19f2 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xe0>
        {
          exportLongData(color2Bit);
    19e6:	6b 81       	ldd	r22, Y+3	; 0x03
    19e8:	7c 81       	ldd	r23, Y+4	; 0x04
    19ea:	c3 01       	movw	r24, r6
    19ec:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    19f0:	07 c0       	rjmp	.+14     	; 0x1a00 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xee>
        }

        else if (temp == 0x03) //1Pixel = 11
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xee>
        {
          exportLongData(color3Bit);
    19f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19f8:	78 a1       	ldd	r23, Y+32	; 0x20
    19fa:	c3 01       	movw	r24, r6
    19fc:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
        }

        data <<= 2;
    1a00:	99 0c       	add	r9, r9
    1a02:	99 0c       	add	r9, r9
    1a04:	f1 e0       	ldi	r31, 0x01	; 1
    1a06:	cf 1a       	sub	r12, r31
    1a08:	d1 08       	sbc	r13, r1
    for (int j = 0; j < (width / 4); j++)
    {

      data = pgm_read_byte(&bitmap[i * (width / 4) + j]);

      for (int k = 0; k < 4; k++)
    1a0a:	c1 f6       	brne	.-80     	; 0x19bc <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0xaa>
    1a0c:	0f 5f       	subi	r16, 0xFF	; 255
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i = 0; i < height; i++)
  {
    for (int j = 0; j < (width / 4); j++)
    1a10:	e0 16       	cp	r14, r16
    1a12:	f1 06       	cpc	r15, r17
    1a14:	69 f6       	brne	.-102    	; 0x19b0 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x9e>
  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i = 0; i < height; i++)
    1a16:	2f ef       	ldi	r18, 0xFF	; 255
    1a18:	42 1a       	sub	r4, r18
    1a1a:	52 0a       	sbc	r5, r18
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	a8 0e       	add	r10, r24
    1a22:	b9 1e       	adc	r11, r25
    1a24:	ef 81       	ldd	r30, Y+7	; 0x07
    1a26:	f8 85       	ldd	r31, Y+8	; 0x08
    1a28:	e4 15       	cp	r30, r4
    1a2a:	f5 05       	cpc	r31, r5
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x11e>
    1a2e:	b6 cf       	rjmp	.-148    	; 0x199c <_ZN3TFT10drawBitmapEiiiiPKhjjjj+0x8a>
      }

    }
  }

}
    1a30:	2a 96       	adiw	r28, 0x0a	; 10
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	bf 90       	pop	r11
    1a4e:	af 90       	pop	r10
    1a50:	9f 90       	pop	r9
    1a52:	8f 90       	pop	r8
    1a54:	7f 90       	pop	r7
    1a56:	6f 90       	pop	r6
    1a58:	5f 90       	pop	r5
    1a5a:	4f 90       	pop	r4
    1a5c:	3f 90       	pop	r3
    1a5e:	2f 90       	pop	r2
    1a60:	08 95       	ret

00001a62 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj>:
/*----------------------------------------//
            Draw Bitmap Twice
//----------------------------------------*/

void TFT::drawBitmapTwice(int16_t xPos, int16_t yPos, int16_t width, int16_t height, const uint8_t *bitmap, uint16_t color0Bit, uint16_t color1Bit, uint16_t color2Bit, uint16_t color3Bit)
{
    1a62:	2f 92       	push	r2
    1a64:	3f 92       	push	r3
    1a66:	4f 92       	push	r4
    1a68:	5f 92       	push	r5
    1a6a:	6f 92       	push	r6
    1a6c:	7f 92       	push	r7
    1a6e:	8f 92       	push	r8
    1a70:	9f 92       	push	r9
    1a72:	af 92       	push	r10
    1a74:	bf 92       	push	r11
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	60 97       	sbiw	r28, 0x10	; 16
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	98 8b       	std	Y+16, r25	; 0x10
    1a98:	8f 87       	std	Y+15, r24	; 0x0f
    1a9a:	29 01       	movw	r4, r18
    1a9c:	38 01       	movw	r6, r16
    1a9e:	da 82       	std	Y+2, r13	; 0x02
    1aa0:	c9 82       	std	Y+1, r12	; 0x01
    1aa2:	ba 86       	std	Y+10, r11	; 0x0a
    1aa4:	a9 86       	std	Y+9, r10	; 0x09
    1aa6:	9c 86       	std	Y+12, r9	; 0x0c
    1aa8:	8b 86       	std	Y+11, r8	; 0x0b

  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));
    1aaa:	8a 01       	movw	r16, r20
    1aac:	06 0d       	add	r16, r6
    1aae:	17 1d       	adc	r17, r7
    1ab0:	01 50       	subi	r16, 0x01	; 1
    1ab2:	11 09       	sbc	r17, r1
    1ab4:	9b 01       	movw	r18, r22
    1ab6:	24 0d       	add	r18, r4
    1ab8:	35 1d       	adc	r19, r5
    1aba:	21 50       	subi	r18, 0x01	; 1
    1abc:	31 09       	sbc	r19, r1
    1abe:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN3TFT10setAddressEiiii>

  for (int i = 0; i < (height / 2); i++)
    1ac2:	c3 01       	movw	r24, r6
    1ac4:	99 23       	and	r25, r25
    1ac6:	0c f4       	brge	.+2      	; 0x1aca <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x68>
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	9c 01       	movw	r18, r24
    1acc:	35 95       	asr	r19
    1ace:	27 95       	ror	r18
    1ad0:	3e 87       	std	Y+14, r19	; 0x0e
    1ad2:	2d 87       	std	Y+13, r18	; 0x0d
    1ad4:	12 16       	cp	r1, r18
    1ad6:	13 06       	cpc	r1, r19
    1ad8:	0c f0       	brlt	.+2      	; 0x1adc <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x7a>
    1ada:	7c c0       	rjmp	.+248    	; 0x1bd4 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x172>
  {
    for (int j = 0; j < 2; j++)
    {
      for (int k = 0; k < (width / 8); k++)
    1adc:	c2 01       	movw	r24, r4
    1ade:	99 23       	and	r25, r25
    1ae0:	0c f4       	brge	.+2      	; 0x1ae4 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x82>
    1ae2:	07 96       	adiw	r24, 0x07	; 7
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	f5 95       	asr	r31
    1ae8:	e7 95       	ror	r30
    1aea:	f5 95       	asr	r31
    1aec:	e7 95       	ror	r30
    1aee:	f5 95       	asr	r31
    1af0:	e7 95       	ror	r30
    1af2:	fe 83       	std	Y+6, r31	; 0x06
    1af4:	ed 83       	std	Y+5, r30	; 0x05
    1af6:	f8 87       	std	Y+8, r31	; 0x08
    1af8:	ef 83       	std	Y+7, r30	; 0x07
    1afa:	6e 2c       	mov	r6, r14
    1afc:	7f 2c       	mov	r7, r15
    1afe:	21 2c       	mov	r2, r1
    1b00:	31 2c       	mov	r3, r1
    1b02:	68 94       	set
    1b04:	aa 24       	eor	r10, r10
    1b06:	a1 f8       	bld	r10, 1
    1b08:	b1 2c       	mov	r11, r1
    1b0a:	8f 80       	ldd	r8, Y+7	; 0x07
    1b0c:	98 84       	ldd	r9, Y+8	; 0x08
    1b0e:	86 0c       	add	r8, r6
    1b10:	97 1c       	adc	r9, r7
    1b12:	7c 82       	std	Y+4, r7	; 0x04
    1b14:	6b 82       	std	Y+3, r6	; 0x03
    1b16:	4f 84       	ldd	r4, Y+15	; 0x0f
    1b18:	58 88       	ldd	r5, Y+16	; 0x10
    1b1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b1e:	12 16       	cp	r1, r18
    1b20:	13 06       	cpc	r1, r19
    1b22:	0c f0       	brlt	.+2      	; 0x1b26 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0xc4>
    1b24:	43 c0       	rjmp	.+134    	; 0x1bac <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x14a>
    1b26:	eb 80       	ldd	r14, Y+3	; 0x03
    1b28:	fc 80       	ldd	r15, Y+4	; 0x04
      {

        data = pgm_read_byte(&bitmap[i * (width / 8) + k]);
    1b2a:	f7 01       	movw	r30, r14
    1b2c:	c4 90       	lpm	r12, Z
    1b2e:	68 94       	set
    1b30:	66 24       	eor	r6, r6
    1b32:	62 f8       	bld	r6, 2
    1b34:	71 2c       	mov	r7, r1

        for (int l = 0; l < 4; l++)
        {
          temp = data >> 6;
    1b36:	dc 2c       	mov	r13, r12
    1b38:	d6 94       	lsr	r13
    1b3a:	d6 94       	lsr	r13
    1b3c:	d6 94       	lsr	r13
    1b3e:	d6 94       	lsr	r13
    1b40:	d6 94       	lsr	r13
    1b42:	d6 94       	lsr	r13
    1b44:	02 e0       	ldi	r16, 0x02	; 2
    1b46:	10 e0       	ldi	r17, 0x00	; 0

          for (int m = 0; m < 2; m++)
          {

            if (temp == 0x00) //1Pixel = 00
    1b48:	d1 10       	cpse	r13, r1
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0xf6>
            {
              exportLongData(color0Bit);
    1b4c:	69 81       	ldd	r22, Y+1	; 0x01
    1b4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b50:	c2 01       	movw	r24, r4
    1b52:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1b56:	1a c0       	rjmp	.+52     	; 0x1b8c <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x12a>
            }

            else if (temp == 0x01) //1Pixel = 01
    1b58:	f1 e0       	ldi	r31, 0x01	; 1
    1b5a:	df 12       	cpse	r13, r31
    1b5c:	06 c0       	rjmp	.+12     	; 0x1b6a <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x108>
            {
              exportLongData(color1Bit);
    1b5e:	69 85       	ldd	r22, Y+9	; 0x09
    1b60:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b62:	c2 01       	movw	r24, r4
    1b64:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1b68:	11 c0       	rjmp	.+34     	; 0x1b8c <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x12a>
            }

            else if (temp == 0x02) //1Pixel = 10
    1b6a:	22 e0       	ldi	r18, 0x02	; 2
    1b6c:	d2 12       	cpse	r13, r18
    1b6e:	06 c0       	rjmp	.+12     	; 0x1b7c <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x11a>
            {
              exportLongData(color2Bit);
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	c2 01       	movw	r24, r4
    1b76:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x12a>
            }

            else if (temp == 0x03) //1Pixel = 11
    1b7c:	33 e0       	ldi	r19, 0x03	; 3
    1b7e:	d3 12       	cpse	r13, r19
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x12a>
            {
              exportLongData(color3Bit);
    1b82:	6d a1       	ldd	r22, Y+37	; 0x25
    1b84:	7e a1       	ldd	r23, Y+38	; 0x26
    1b86:	c2 01       	movw	r24, r4
    1b88:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1b8c:	01 50       	subi	r16, 0x01	; 1
    1b8e:	11 09       	sbc	r17, r1

        for (int l = 0; l < 4; l++)
        {
          temp = data >> 6;

          for (int m = 0; m < 2; m++)
    1b90:	d9 f6       	brne	.-74     	; 0x1b48 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0xe6>
              exportLongData(color3Bit);
            }

          }

          data <<= 2;
    1b92:	cc 0c       	add	r12, r12
    1b94:	cc 0c       	add	r12, r12
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	68 1a       	sub	r6, r24
    1b9a:	71 08       	sbc	r7, r1
      for (int k = 0; k < (width / 8); k++)
      {

        data = pgm_read_byte(&bitmap[i * (width / 8) + k]);

        for (int l = 0; l < 4; l++)
    1b9c:	61 f6       	brne	.-104    	; 0x1b36 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0xd4>
    1b9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ba0:	e9 1a       	sub	r14, r25
    1ba2:	f9 0a       	sbc	r15, r25

  for (int i = 0; i < (height / 2); i++)
  {
    for (int j = 0; j < 2; j++)
    {
      for (int k = 0; k < (width / 8); k++)
    1ba4:	e8 14       	cp	r14, r8
    1ba6:	f9 04       	cpc	r15, r9
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x14a>
    1baa:	bf cf       	rjmp	.-130    	; 0x1b2a <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0xc8>
    1bac:	e1 e0       	ldi	r30, 0x01	; 1
    1bae:	ae 1a       	sub	r10, r30
    1bb0:	b1 08       	sbc	r11, r1

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i = 0; i < (height / 2); i++)
  {
    for (int j = 0; j < 2; j++)
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x154>
    1bb4:	b2 cf       	rjmp	.-156    	; 0x1b1a <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0xb8>
    1bb6:	6b 80       	ldd	r6, Y+3	; 0x03
    1bb8:	7c 80       	ldd	r7, Y+4	; 0x04
  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + width - 1), (yPos + height - 1));

  for (int i = 0; i < (height / 2); i++)
    1bba:	ff ef       	ldi	r31, 0xFF	; 255
    1bbc:	2f 1a       	sub	r2, r31
    1bbe:	3f 0a       	sbc	r3, r31
    1bc0:	2f 81       	ldd	r18, Y+7	; 0x07
    1bc2:	38 85       	ldd	r19, Y+8	; 0x08
    1bc4:	62 0e       	add	r6, r18
    1bc6:	73 1e       	adc	r7, r19
    1bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bcc:	28 16       	cp	r2, r24
    1bce:	39 06       	cpc	r3, r25
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0x172>
    1bd2:	97 cf       	rjmp	.-210    	; 0x1b02 <_ZN3TFT15drawBitmapTwiceEiiiiPKhjjjj+0xa0>

      }
    }
  }

}
    1bd4:	60 96       	adiw	r28, 0x10	; 16
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	ff 90       	pop	r15
    1bea:	ef 90       	pop	r14
    1bec:	df 90       	pop	r13
    1bee:	cf 90       	pop	r12
    1bf0:	bf 90       	pop	r11
    1bf2:	af 90       	pop	r10
    1bf4:	9f 90       	pop	r9
    1bf6:	8f 90       	pop	r8
    1bf8:	7f 90       	pop	r7
    1bfa:	6f 90       	pop	r6
    1bfc:	5f 90       	pop	r5
    1bfe:	4f 90       	pop	r4
    1c00:	3f 90       	pop	r3
    1c02:	2f 90       	pop	r2
    1c04:	08 95       	ret

00001c06 <_ZN3TFT8drawTileEiiPA100_Khajjjj>:
/*----------------------------------------//
              Draw 20x20 Tile
//----------------------------------------*/

void TFT::drawTile(int16_t xPos, int16_t yPos, const unsigned char (*bitmap)[100], int8_t tileSelection, uint16_t color0Bit, uint16_t color1Bit, uint16_t color2Bit, uint16_t color3Bit)
{
    1c06:	2f 92       	push	r2
    1c08:	3f 92       	push	r3
    1c0a:	4f 92       	push	r4
    1c0c:	5f 92       	push	r5
    1c0e:	6f 92       	push	r6
    1c10:	7f 92       	push	r7
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	28 97       	sbiw	r28, 0x08	; 8
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	3c 01       	movw	r6, r24
    1c3c:	19 01       	movw	r2, r18
    1c3e:	0f 83       	std	Y+7, r16	; 0x07
    1c40:	27 01       	movw	r4, r14
    1c42:	da 82       	std	Y+2, r13	; 0x02
    1c44:	c9 82       	std	Y+1, r12	; 0x01
    1c46:	bc 82       	std	Y+4, r11	; 0x04
    1c48:	ab 82       	std	Y+3, r10	; 0x03
    1c4a:	9e 82       	std	Y+6, r9	; 0x06
    1c4c:	8d 82       	std	Y+5, r8	; 0x05

  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + 39), (yPos + 39));
    1c4e:	8a 01       	movw	r16, r20
    1c50:	09 5d       	subi	r16, 0xD9	; 217
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	9b 01       	movw	r18, r22
    1c56:	29 5d       	subi	r18, 0xD9	; 217
    1c58:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5a:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN3TFT10setAddressEiiii>
    for (int j = 0; j < 2; j++)
    {
      for (int k = 0; k < (40 / 8); k++)
      {

        data = pgm_read_byte(&bitmap[tileSelection][i * (40 / 8) + k]);
    1c5e:	c1 01       	movw	r24, r2
    1c60:	2f 81       	ldd	r18, Y+7	; 0x07
    1c62:	34 e6       	ldi	r19, 0x64	; 100
    1c64:	23 02       	muls	r18, r19
    1c66:	80 0d       	add	r24, r0
    1c68:	91 1d       	adc	r25, r1
    1c6a:	11 24       	eor	r1, r1
    1c6c:	5c 01       	movw	r10, r24
    1c6e:	e5 e0       	ldi	r30, 0x05	; 5
    1c70:	ae 0e       	add	r10, r30
    1c72:	b1 1c       	adc	r11, r1
    1c74:	9c 01       	movw	r18, r24
    1c76:	27 59       	subi	r18, 0x97	; 151
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	38 87       	std	Y+8, r19	; 0x08
    1c7c:	2f 83       	std	Y+7, r18	; 0x07
/*----------------------------------------//
              Draw 20x20 Tile
//----------------------------------------*/

void TFT::drawTile(int16_t xPos, int16_t yPos, const unsigned char (*bitmap)[100], int8_t tileSelection, uint16_t color0Bit, uint16_t color1Bit, uint16_t color2Bit, uint16_t color3Bit)
{
    1c7e:	68 94       	set
    1c80:	88 24       	eor	r8, r8
    1c82:	81 f8       	bld	r8, 1
    1c84:	91 2c       	mov	r9, r1
    1c86:	65 01       	movw	r12, r10
    1c88:	35 e0       	ldi	r19, 0x05	; 5
    1c8a:	c3 1a       	sub	r12, r19
    1c8c:	d1 08       	sbc	r13, r1
    for (int j = 0; j < 2; j++)
    {
      for (int k = 0; k < (40 / 8); k++)
      {

        data = pgm_read_byte(&bitmap[tileSelection][i * (40 / 8) + k]);
    1c8e:	f6 01       	movw	r30, r12
    1c90:	24 90       	lpm	r2, Z
    1c92:	68 94       	set
    1c94:	ee 24       	eor	r14, r14
    1c96:	e2 f8       	bld	r14, 2
    1c98:	f1 2c       	mov	r15, r1

        for (int l = 0; l < 4; l++)
        {
          temp = data >> 6;
    1c9a:	32 2c       	mov	r3, r2
    1c9c:	36 94       	lsr	r3
    1c9e:	36 94       	lsr	r3
    1ca0:	36 94       	lsr	r3
    1ca2:	36 94       	lsr	r3
    1ca4:	36 94       	lsr	r3
    1ca6:	36 94       	lsr	r3
    1ca8:	02 e0       	ldi	r16, 0x02	; 2
    1caa:	10 e0       	ldi	r17, 0x00	; 0

          for (int m = 0; m < 2; m++)
          {

            if (temp == 0x00) //1Pixel = 00
    1cac:	31 10       	cpse	r3, r1
    1cae:	05 c0       	rjmp	.+10     	; 0x1cba <_ZN3TFT8drawTileEiiPA100_Khajjjj+0xb4>
            {
              exportLongData(color0Bit);
    1cb0:	b2 01       	movw	r22, r4
    1cb2:	c3 01       	movw	r24, r6
    1cb4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1cb8:	1a c0       	rjmp	.+52     	; 0x1cee <_ZN3TFT8drawTileEiiPA100_Khajjjj+0xe8>
            }

            else if (temp == 0x01) //1Pixel = 01
    1cba:	f1 e0       	ldi	r31, 0x01	; 1
    1cbc:	3f 12       	cpse	r3, r31
    1cbe:	06 c0       	rjmp	.+12     	; 0x1ccc <_ZN3TFT8drawTileEiiPA100_Khajjjj+0xc6>
            {
              exportLongData(color1Bit);
    1cc0:	69 81       	ldd	r22, Y+1	; 0x01
    1cc2:	7a 81       	ldd	r23, Y+2	; 0x02
    1cc4:	c3 01       	movw	r24, r6
    1cc6:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1cca:	11 c0       	rjmp	.+34     	; 0x1cee <_ZN3TFT8drawTileEiiPA100_Khajjjj+0xe8>
            }

            else if (temp == 0x02) //1Pixel = 10
    1ccc:	22 e0       	ldi	r18, 0x02	; 2
    1cce:	32 12       	cpse	r3, r18
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <_ZN3TFT8drawTileEiiPA100_Khajjjj+0xd8>
            {
              exportLongData(color2Bit);
    1cd2:	6b 81       	ldd	r22, Y+3	; 0x03
    1cd4:	7c 81       	ldd	r23, Y+4	; 0x04
    1cd6:	c3 01       	movw	r24, r6
    1cd8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1cdc:	08 c0       	rjmp	.+16     	; 0x1cee <_ZN3TFT8drawTileEiiPA100_Khajjjj+0xe8>
            }

            else if (temp == 0x03) //1Pixel = 11
    1cde:	33 e0       	ldi	r19, 0x03	; 3
    1ce0:	33 12       	cpse	r3, r19
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <_ZN3TFT8drawTileEiiPA100_Khajjjj+0xe8>
            {
              exportLongData(color3Bit);
    1ce4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ce6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce8:	c3 01       	movw	r24, r6
    1cea:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN3SPI14exportLongDataEj>
    1cee:	01 50       	subi	r16, 0x01	; 1
    1cf0:	11 09       	sbc	r17, r1

        for (int l = 0; l < 4; l++)
        {
          temp = data >> 6;

          for (int m = 0; m < 2; m++)
    1cf2:	e1 f6       	brne	.-72     	; 0x1cac <_ZN3TFT8drawTileEiiPA100_Khajjjj+0xa6>
              exportLongData(color3Bit);
            }

          }

          data <<= 2;
    1cf4:	22 0c       	add	r2, r2
    1cf6:	22 0c       	add	r2, r2
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	e8 1a       	sub	r14, r24
    1cfc:	f1 08       	sbc	r15, r1
      for (int k = 0; k < (40 / 8); k++)
      {

        data = pgm_read_byte(&bitmap[tileSelection][i * (40 / 8) + k]);

        for (int l = 0; l < 4; l++)
    1cfe:	69 f6       	brne	.-102    	; 0x1c9a <_ZN3TFT8drawTileEiiPA100_Khajjjj+0x94>
    1d00:	9f ef       	ldi	r25, 0xFF	; 255
    1d02:	c9 1a       	sub	r12, r25
    1d04:	d9 0a       	sbc	r13, r25

  for (int i = 0; i < (40 / 2); i++)
  {
    for (int j = 0; j < 2; j++)
    {
      for (int k = 0; k < (40 / 8); k++)
    1d06:	ca 14       	cp	r12, r10
    1d08:	db 04       	cpc	r13, r11
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <_ZN3TFT8drawTileEiiPA100_Khajjjj+0x108>
    1d0c:	c0 cf       	rjmp	.-128    	; 0x1c8e <_ZN3TFT8drawTileEiiPA100_Khajjjj+0x88>
    1d0e:	e1 e0       	ldi	r30, 0x01	; 1
    1d10:	8e 1a       	sub	r8, r30
    1d12:	91 08       	sbc	r9, r1

  setAddress(xPos, yPos, (xPos + 39), (yPos + 39));

  for (int i = 0; i < (40 / 2); i++)
  {
    for (int j = 0; j < 2; j++)
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <_ZN3TFT8drawTileEiiPA100_Khajjjj+0x112>
    1d16:	b7 cf       	rjmp	.-146    	; 0x1c86 <_ZN3TFT8drawTileEiiPA100_Khajjjj+0x80>
    1d18:	f5 e0       	ldi	r31, 0x05	; 5
    1d1a:	af 0e       	add	r10, r31
    1d1c:	b1 1c       	adc	r11, r1
  uint8_t data;
  uint8_t temp;

  setAddress(xPos, yPos, (xPos + 39), (yPos + 39));

  for (int i = 0; i < (40 / 2); i++)
    1d1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d20:	38 85       	ldd	r19, Y+8	; 0x08
    1d22:	2a 15       	cp	r18, r10
    1d24:	3b 05       	cpc	r19, r11
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <_ZN3TFT8drawTileEiiPA100_Khajjjj+0x124>
    1d28:	aa cf       	rjmp	.-172    	; 0x1c7e <_ZN3TFT8drawTileEiiPA100_Khajjjj+0x78>

      }
    }
  }

    1d2a:	28 96       	adiw	r28, 0x08	; 8
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	df 90       	pop	r13
    1d44:	cf 90       	pop	r12
    1d46:	bf 90       	pop	r11
    1d48:	af 90       	pop	r10
    1d4a:	9f 90       	pop	r9
    1d4c:	8f 90       	pop	r8
    1d4e:	7f 90       	pop	r7
    1d50:	6f 90       	pop	r6
    1d52:	5f 90       	pop	r5
    1d54:	4f 90       	pop	r4
    1d56:	3f 90       	pop	r3
    1d58:	2f 90       	pop	r2
    1d5a:	08 95       	ret

00001d5c <__tablejump2__>:
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	05 90       	lpm	r0, Z+
    1d62:	f4 91       	lpm	r31, Z
    1d64:	e0 2d       	mov	r30, r0
    1d66:	09 94       	ijmp

00001d68 <_exit>:
    1d68:	f8 94       	cli

00001d6a <__stop_program>:
    1d6a:	ff cf       	rjmp	.-2      	; 0x1d6a <__stop_program>
